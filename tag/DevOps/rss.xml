<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>swalloow.github.io/</title>
   
   <link>http://swalloow.github.io/</link>
   <description>About Data Science, Data Engineering</description>
   <language>ko-KO</language>
   <managingEditor> Swalloow</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>SSH 프로토콜과 Tunneling 이해하기</title>
	  <link>//ssh-tunneling</link>
	  <author>Swalloow</author>
	  <pubDate>2017-03-20T19:18:00+09:00</pubDate>
	  <guid>//ssh-tunneling</guid>
	  <description><![CDATA[
	     <p>​   ​</p>

<p>지금까지 아무 생각없이 SSH를 사용하다가 한번 정리해보았습니다.</p>

<p>​   ​</p>

<h2 id="ssh-protocol">SSH Protocol</h2>

<p>SSH는 Secure Shell의 약자입니다. SSH는 한마디로 정의하면,
네트워크 상의 다른 컴퓨터에 로그인하거나 원격 시스템에서 명령을 실행하고
다른 시스템으로 파일을 복사할 수 있도록 해 주는 프로토콜입니다.
VPN을 구성하는 것보다 가격이 저렴하고 쉽게 연결할 수 있어 많이 사용됩니다.</p>

<p>MacOS에는 <strong>OpenSSH</strong> 클라이언트와 서버가 내장되어 있기 때문에 바로 사용할 수 있습니다.
SSH는 <strong>22번 포트</strong> 를 사용하며, 크게 다음의 3가지를 제공합니다.</p>

<p>​   ​</p>

<h4 id="authentication">1. Authentication</h4>

<p><img src="/assets/images/ssh-key-auth-flow.png" alt="SSH-Auth" /></p>

<p>SSH는 public key와 private key를 사용하는 비대칭 암호방식을 사용합니다.
간단히 설명하면, <code class="highlighter-rouge">public key</code>와 <code class="highlighter-rouge">private key</code>가 모두 있어야 인증이 되는 방식입니다.
각자 private key는 외부 유출없이 가지고 있고, public key만 네트워크를 통해 전달합니다.
SSH는 RSA, DSA 등 다양한 인증 방식을 지원합니다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>ssh-keygen
<span class="gp">$ </span>cat ~/.ssh/id_rsa.pub</code></pre></figure>

<p><code class="highlighter-rouge">ssh-keygen</code> 명령어를 통해 ssh 키를 생성하고
<code class="highlighter-rouge">~/.ssh/id_rsa.pub</code>에서 public key를 확인할 수 있습니다.</p>

<p>​   ​</p>

<h4 id="encryption--integrity">2. Encryption &amp; Integrity</h4>

<p>SSH는 네트워크를 통해 전달되는 데이터를 암호화합니다.
<code class="highlighter-rouge">3DES, blowfish</code> 등 여러 가지 암호화 방식을 제공하며,
새로운 암호화 기법을 추가할 수도 있습니다.</p>

<p>그리고 SSH는 네트워크를 통해 받은 데이터가 변경되지 않았음(무결성)을 보장해줍니다.
이를 위해 <strong>MAC(Message Authentication Code)</strong> 이라는 알고리즘을 사용합니다.</p>

<p><img src="/assets/images/mac-algo.jpg" alt="MAC-Algo" /></p>

<p>MAC 알고리즘은 다음과 같이 동작합니다.
SSH 클라이언트가 서버로 메세지를 보내면,
MAC 알고리즘을 통해 <code class="highlighter-rouge">secret key</code>를 입력받아 MAC 코드를 생성합니다.
그리고, 임의 길이의 암호화 된 메시지와 MAC 코드를 SSH 서버로 보냅니다.</p>

<p>서버에서는 다시 메세지와 서버의 <code class="highlighter-rouge">secret key</code>를 조합하여 MAC 코드를 만들고,
클라이언트로부터 받은 MAC 코드와 비교하여 인증을 진행하게 됩니다.</p>

<p>​   ​</p>

<h4 id="compression">4. Compression</h4>

<p>SSH는 네트워크 상에서 데이터를 전송하고 수신할 때 압축 과정을 거칩니다.
이를 통해 전송 데이터의 크기를 줄여 네트워크 비용을 낮출 수 있습니다.</p>

<p>​   ​</p>

<h2 id="ssh-tunneling">SSH Tunneling</h2>

<p>SSH Tunneling은 터널을 통해 데이터를 주고받는다 해서 붙여진 이름입니다.
앞서 얘기했던 것처럼 연결, 통신은 모두 암호화되며 <code class="highlighter-rouge">SMTP, IMAP</code> 등 여러 가지로 사용될 수 있습니다.</p>

<p>Direct로 보내면 네트워크 층에서 수 많은 공격을 받을 수 있기 때문에
SSH를 통해 다른 Application에 연결하는 것이 안전합니다.
SSH Tunneling에는 다음과 같이 두 가지 방법이 있습니다.</p>

<p>​   ​</p>

<h4 id="local-port-forwarding">Local port forwarding</h4>

<p><img src="/assets/images/ssh-local.png" alt="SSH-Local" /></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>ssh -L port1:host_name:port2 server_name</code></pre></figure>

<p>로컬에서 서버에 있는 MySQL과 SSH 연결을 한다고 가정해보겠습니다.
<code class="highlighter-rouge">Local port forwarding</code>은
로컬에 설치된 MySQL 클라이언트의 3306 포트가
연결된 SSH Tunnel을 거쳐 서버에 있는 MySQL 서버의 3306 포트와 연결됩니다.
이를 통해 직접 서버의 데이터베이스에 안전하게 접근할 수 있으며
요청을 보내서 서로 데이터를 주고 받을 수 있습니다.</p>

<p>​   ​</p>

<h4 id="remote-port-forwarding">Remote port forwarding</h4>

<p><img src="/assets/images/ssh-remote.png" alt="SSH-Remote" /></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>ssh -R port1:host_name:port2 server_name</code></pre></figure>

<p>이번에는 로컬에서 파이썬 웹 애플리케이션을 개발 중인데 친구에게 보여주고 싶다고 가정 해보겠습니다.
아직 공개 IP 주소를 제공하지 않기 때문에 인터넷을 통해 직접 기기에 연결할 수 없을 겁니다.
라우터에서 NAT를 구성하여 해결할 수 있지만 라우터의 구성을 변경해야하므로 번거롭습니다.
이럴때 <code class="highlighter-rouge">Remote port forwarding</code>을 통해 쉽게 해결할 수 있습니다.</p>

<p>먼저 port1의 서버에서 port2로 로컬 트래픽을 전달하는 SSH 터널을 생성합니다.
이후 로컬에서 port2의 서버에 연결하면 실제로 SSH 터널을 통해 데이터를 요청하는 것을 확인할 수 있습니다.</p>

<p>OSI 7계층에서 생각해보면 SSH는 <code class="highlighter-rouge">Application - Transport - Network</code> 계층에 걸쳐있습니다.
Application 계층에서 포트를 연결하면 Transport 계층의 TCP 통신을 통해 전달되고,
Network 계층을 통해 목적지로 이동하게 됩니다.</p>

<p>​   ​</p>

	  ]]></description>
	</item>

	<item>
	  <title>AWS EC2 인스턴스 SSH 접속을 위한 초기설정 그리고 주의사항</title>
	  <link>//aws-config</link>
	  <author>Swalloow</author>
	  <pubDate>2017-03-10T19:18:00+09:00</pubDate>
	  <guid>//aws-config</guid>
	  <description><![CDATA[
	     <p>​   ​</p>

<p>이 포스팅의 모든 내용은 OS X에 최적화되어 있습니다.
그리고, 정리한 내용은 AWS 공식문서에 아주 잘 소개되어 있습니다.</p>

<p>​   ​</p>

<h2 id="aws-cli">AWS CLI</h2>

<p>AWS CLI는 여러 AWS 서비스를 명령줄에서 제어하고 스크립트를 통해 자동화할 수 있는 커멘드라인 인터페이스입니다.
이를 사용하기 전에 먼저, brew를 통해 <code class="highlighter-rouge">awscli</code>를 설치해야 합니다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>brew install awscli</code></pre></figure>

<p>설치하고 나면 이제 aws 명령어를 사용할 수 있습니다.
가장 먼저 configure 명령어를 통해 Access key를 입력해야합니다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>aws configure
AWS Access Key ID <span class="o">[</span>None]: AKIAIOSFODNN7EXAMPLE
AWS Secret Access Key <span class="o">[</span>None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
Default region name <span class="o">[</span>None]: us-west-2
Default output format <span class="o">[</span>None]: ENTER</code></pre></figure>

<p>여기에서 Access Key ID는 <code class="highlighter-rouge">[IAM - Security credentials]</code>에서 확인할 수 있습니다.</p>

<p>​   ​</p>

<h2 id="aws-ec2-">AWS EC2 접속</h2>

<p>EC2 인스턴스를 만들면 .pem이라는 파일을 발급받게 됩니다.
이 파일은 절대 외부로 유출되면 안되기 때문에 조심해야합니다.
.pem 파일이 있는 경로로 이동한 다음 아래의 명령어를 통해 접속하면 됩니다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>chmod 400 /path/my-key-pair.pem
<span class="gp">$ </span>ssh -i /path/my-key-pair.pem ec2-user@ec2-198-51-100-1.compute-1.amazonaws.com</code></pre></figure>

<p>“Permission denied” 에러가 발생하면 <code class="highlighter-rouge">-vvv</code> 옵션을 통해 디버깅 할 수 있습니다.
(가장 많이 하는 실수가 user_id에 ubuntu를 안적어주는 경우)</p>

<p>​   ​</p>

<h2 id="aws---">AWS를 사용하면서 조심해야할 사항</h2>

<p>​   ​</p>

<h4 id="section">1.인스턴스 관리</h4>

<p>프리티어를 사용하는 경우, 다 사용하고 나서 인스턴스를 항상 꺼주는 습관을 들여 과도한 요금이 과금되지 않도록 해야합니다.
특히 여러 개의 인스턴스를 돌리는 경우 순식간에 청구서가 날아올 수 있습니다.</p>

<h4 id="root---">2. ROOT 계정 사용 자제</h4>

<p>많은 경우에 ROOT 계정의 키가 털려서 과금이 발생됩니다. IAM을 통해 Admin 계정을 만들어서 사용하고,
GitHub 같은 곳에 설정파일을 올리지 말아야합니다.</p>

<h4 id="cloudwatch--">3. CloudWatch로 요금 확인</h4>

<p>CloudWatch를 통해 Billing Cost가 일정 금액을 넘어가면 메일이나 Slack 메세지로 보내도록 설정해두면 편합니다.</p>

<h4 id="section-1">4. 네트워크 확인</h4>

<p>네트워크에서 모든 포트를 여는 것도 위험합니다. 이렇게 되면 DDoS 공격을 받을 위험이 있습니다.</p>

<p>​   ​</p>

<h2 id="section-2">참고링크</h2>
<ul>
  <li><a href="http://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html">SSH를 사용하여 Linux 인스턴스에 연결</a></li>
  <li><a href="http://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html#TroubleshootingInstancesConnectingMindTerm">인스턴스 연결문제 해결방법</a></li>
</ul>

<p>​   ​</p>

	  ]]></description>
	</item>

	<item>
	  <title>Docker, DockerHub 명령어 정리</title>
	  <link>//docker-command</link>
	  <author>Swalloow</author>
	  <pubDate>2017-02-22T19:18:00+09:00</pubDate>
	  <guid>//docker-command</guid>
	  <description><![CDATA[
	     <p>​   ​</p>

<p><img src="/assets/images/docker-architect.png" alt="docker-architect" /></p>

<p>명령어를 정리하기 전에 Docker 시스템 아키텍처를 보면 이해하기 쉽습니다.
Docker는 크게 <strong>클라이언트-서버 아키텍처</strong> 로 구성되어 있습니다.
그림처럼 우리가 명령어를 입력하면 클라이언트는 데몬과 통신하고 데몬이 컨테이너를 빌드, 실행합니다.</p>

<p>DockerHub는 도커 컨테이너를 관리하고 공유하기 위한 SAAS로
GitHub 처럼 이미지를 올려서 공유하거나 내려받을 수 있습니다.</p>

<p><a href="https://swalloow.github.io/docker-install">지난 번 포스팅</a>에 이어서
이제 Docker 명령어를 정리하고, 더 나아가 DockerHub에 이미지를 올리는 방법까지 알아보겠습니다.</p>

<p>​</p>

<h4 id="section">상태 확인하기</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker ps
docker images</code></pre></figure>

<p><code class="highlighter-rouge">docker ps</code>는 실행 중인 컨테이너 목록을 확인할 때 사용합니다.
<code class="highlighter-rouge">-a</code> 옵션을 사용하면 전체 목록을 확인할 수 있습니다.
<code class="highlighter-rouge">docker images</code>는 설치된 이미지 목록을 확인할 때 사용합니다.</p>

<p>​   ​</p>

<h4 id="section-1">이미지 받아오기</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker search nginx
docker pull nginx</code></pre></figure>

<p>다음은 Dockerhub로 부터 이미지를 받아오기 위한 명령어입니다.
<code class="highlighter-rouge">docker search [image]</code>로 이미지를 검색할 수 있습니다.
<code class="highlighter-rouge">docker pull [image]</code>을 사용하여 이미지를 받아올 수 있습니다.</p>

<p>​   ​</p>

<h4 id="section-2">컨테이너 실행하기</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker run -d -p 80:80 --name webserver nginx</code></pre></figure>

<p><code class="highlighter-rouge">docker run [image]</code> 명령어를 통해 컨테이너를 실행할 수 있습니다.
<code class="highlighter-rouge">-p</code> 옵션을 통해 포트를 지정할 수 있고, <code class="highlighter-rouge">-d</code> 옵션을 통해 백그라운드로 실행시킬 수 있습니다.
그리고 <code class="highlighter-rouge">--name</code>을 통해 컨테이너 이름을 지정할 수 있습니다.</p>

<p>​   ​</p>

<h4 id="section-3">컨테이너 중지/재시작하기</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker stop webserver
docker restart webserver
docker start webserver</code></pre></figure>

<p><code class="highlighter-rouge">docker stop/restart/start [container]</code> 명령어를 통해 컨테이너를 중지/재시작/시작할 수 있습니다.</p>

<p>​   ​</p>

<h4 id="section-4">컨테이너/이미지 삭제하기</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker rm -f webserver
docker rmi webserver</code></pre></figure>

<p><code class="highlighter-rouge">docker rm -f [container]</code> 명령어를 통해 컨테이너를 삭제할 수 있습니다.
<code class="highlighter-rouge">docker rmi [image]</code> 명령어를 통해 이미지를 삭제할 수 있습니다.</p>

<p>​   ​</p>

<h4 id="dockerhub--">DockerHub 관련 명령어</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker build <span class="o">[</span>PATH]
docker commit
docker push</code></pre></figure>

<p>DockerHub를 사용하기 위해서는 먼저 로그인이 되어 있어야 합니다.
아이디가 없다면, <a href="https://hub.docker.com/">https://hub.docker.com/</a>에서 가입하시면 됩니다.
이후 <code class="highlighter-rouge">docker login</code> 명령어를 통해 연결할 수 있습니다.</p>

<p><code class="highlighter-rouge">docker build [PATH]</code>는 지정된 경로에 Dockerfile을 만드는 명령어 입니다.
<code class="highlighter-rouge">docker commit</code> 명령어를 통해 변경사항을 저장할 수 있습니다.
<code class="highlighter-rouge">docker push</code> 명령어를 통해 DockerHub 저장소에 이미지를 올릴 수 있습니다.</p>

<p>​   ​</p>

<h4 id="section-5">이외에도 자주 사용하는 명령어</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker <span class="nb">history
</span>docker inspect
docker cp <span class="o">[</span>PATH]</code></pre></figure>

<p><code class="highlighter-rouge">docker history [container/image]</code> 명령어를 통해 히스토리를 확인할 수 있습니다.
<code class="highlighter-rouge">docker inspect [container/image]</code> 명령어를 통해 상세정보를 확인할 수 있습니다.
<code class="highlighter-rouge">docker cp [PATH]</code> 명령어를 통해 파일을 지정한 경로로 꺼내올 수 있습니다.</p>

<p>​   ​</p>

	  ]]></description>
	</item>

	<item>
	  <title>Docker 간편한 설치부터 실행까지</title>
	  <link>//docker-install</link>
	  <author>Swalloow</author>
	  <pubDate>2017-02-21T19:18:00+09:00</pubDate>
	  <guid>//docker-install</guid>
	  <description><![CDATA[
	     <p>​   ​</p>

<p>Docker는 오픈소스 컨테이너입니다. 기존의 가상머신과 비슷하면서도 훨씬 가벼운 형태라고 볼 수 있습니다. 그렇다면 VMWare, VirtualBox와 같은 기존의 가상머신과 Docker Container가 어떻게 다른지 살펴보겠습니다.</p>

<p><img src="/assets/images/vm-docker.png" alt="vm-docker" /></p>

<p>먼저 기존의 가상머신(Virtual Machine)을 보면 Hypervisor(VMWare, VirtualBox…) 위에 GuestOS가 올라간 형태임을 알 수 있습니다. OS가 올라갔다는 것은 말 그대로 x86 하드웨어가 그대로 가상화 된 것입니다. 가상머신을 설치하고 메모리 영역을 확인해보면 호스트 메모리와 게스트 메모리를 볼 수 있는데, 게스트 메모리를 얼마나 할당할 것인지에 따라 가상머신의 성능이 변하기도 합니다.</p>

<p>반면에 Docker는 Docker Engine 위에 Application이 올라간 것을 볼 수 있습니다. 즉, Docker Engine을 통해 Host OS 위에서 컨테이너가 생성되는 것입니다. 여기서 컨테이너는 리눅스 커널의 <code class="highlighter-rouge">cgroups, namespaces</code> 등의 기능을 사용해 가상공간을 생성할 수 있도록 하는 기능입니다.</p>

<p>​   ​</p>

<h4 id="section">컨테이너가 가상머신보다 뛰어난 점은?</h4>

<p>기본적으로 가상머신을 사용하게 되면 상세 설정을 해주지 않는 한 메모리, CPU 코어, 프로세스 등 각종 성능 손실이 발생합니다. 반면에 컨테이너는 Host OS의 커널은 그대로 사용하고 일부분만 패키징 되기 때문에 용량이 크게 줄어들 뿐만 아니라, 프로세스 영역도 기존의 OS와 공유해서 사용합니다. 정리하자면, <u>컨테이너는 하드웨어를 가상화하는 계층이 없기 때문에 메모리 접근, 파일시스템, 네트워크 속도가 가상 머신에 비해 월등히 빠릅니다</u>.</p>

<p>​   ​</p>

<h4 id="boot2docker">Boot2Docker</h4>

<p>앞서 말했던 것 처럼 Docker는 리눅스 커널의 컨테이너 기능을 기반으로 하기 때문에 Windows나 OS X 환경에서 실행할 수 없습니다. 그래서 이를 지원하기 위해 나온 것이 <strong>Boot2Docker</strong> 입니다. Boot2Docker는 가상머신 안에 리눅스를 설치하고 Docker를 실행하는 방식으로 이를 해결했습니다.</p>

<p>하지만 15년 9월쯤 부터 <strong>boot2docker-cil이 deprecated</strong> 되었습니다. 이제 공식 레퍼런스를 보면 toolbox를 이용하여 설치하는 방법을 권장하고 있으며 기존의 boot2docker에서 이전하는 방법에 대해서도 설명하고 있습니다.</p>

<p>​   ​</p>

<h2 id="os-x-docker-">OS X에서 Docker 설치</h2>

<p>Docker를 설치하는 방법으로는 크게 2가지가 있습니다. 첫번째는 Docker for Mac으로 설치하는 방법이고, 두번째는 Docker Toolbox로 설치하는 방법입니다.</p>

<p>​   ​</p>

<h4 id="docker-for-mac-docker-toolbox-">Docker for Mac과 Docker Toolbox의 차이점은?</h4>

<p>가장 큰 차이점은 사용하는 가상머신이 다르다는 점입니다. Docker Toolbox 같은 경우에는 Boot2Docker에서 사용해왔던 VirtualBox를 그대로 사용합니다. 반면에 Docker for Mac은 <strong>HyperKit</strong> 이라는 macOS를 위한 경량화 가상머신을 사용합니다.</p>

<p><img src="/assets/images/docker-formac.png" alt="docker-formac" /></p>

<p>Docker Toolbox를 사용하는 경우, 위와 같이 <code class="highlighter-rouge">/usr/local/bin</code> 폴더에 docker, docker-compose, docker-machine이 설치됩니다. 그리고 가상화는 VirtualBox를 통해 이루어지게 됩니다.</p>

<p><img src="/assets/images/docker-toolbox.png" alt="docker-toolbox" /></p>

<p>반면에 Docker for Mac은 <code class="highlighter-rouge">Applications</code> 폴더 내에 app으로 관리할 수 있게 됩니다. 그리고 가상화는 오라클의 <strong>VirtualBox</strong> 을 통해 이루어집니다. 따라서, 둘다 설치할 필요가 없습니다.</p>

<p>만일 전부터 Docker를 써왔고, VirtualBox를 꼭 써야한다면, Docker Toolbox를 설치하시면 됩니다. 또는 “나는 App으로 관리하는게 편하다” 라고 한다면 Docker for Mac을 사용하시면 됩니다. 자세한 내용은 다음을 참고하시면 됩니다. <a href="https://docs.docker.com/docker-for-mac/docker-toolbox/">https://docs.docker.com/docker-for-mac/docker-toolbox/</a></p>

<p>만일 둘 다 설치했고, Docker toolbox를 제거하고 싶다면 다음 링크를 참고하시면 됩니다.
<a href="https://docs.docker.com/toolbox/toolbox_install_mac/#how-to-uninstall-toolbox">https://docs.docker.com/toolbox/toolbox_install_mac/#how-to-uninstall-toolbox</a></p>

<p>​   ​</p>

<h2 id="docker-">Docker 실행</h2>

<p>저는 Docker for Mac을 사용하여 설치했습니다.</p>

<p><img src="/assets/images/docker-run.png" alt="docker-run" /></p>

<p>어플리케이션 데몬을 실행시키면 이제 docker 명령어를 사용할 수 있게 됩니다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker version
docker info</code></pre></figure>

<p>이제 한번 테스트 해볼 시간입니다.
아래의 명령어를 통해 nginx 이미지를 만들고 80번 포트에 웹 서버를 띄워 보겠습니다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker run -d -p 80:80 --name webserver nginx</code></pre></figure>

<p><img src="/assets/images/docker-test.png" alt="docker-test" /></p>

<p>실행되고 있는 웹 서버를 중지하고 컨테이너를 삭제해보겠습니다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker ps
docker stop webserver
docker rm -f webserver</code></pre></figure>

<p>아직 이미지는 남아있는 상태입니다. 이미지까지 삭제해줍니다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker images
docker rmi nginx</code></pre></figure>

<p>자세한 Docker 사용법이나 명령어는 다음에 정리하도록 하겠습니다.</p>

<p>​   ​</p>

	  ]]></description>
	</item>

	<item>
	  <title>자주 사용하는 리눅스 명령어 정리 (3) - Screen</title>
	  <link>//linux3</link>
	  <author>Swalloow</author>
	  <pubDate>2017-02-18T19:18:00+09:00</pubDate>
	  <guid>//linux3</guid>
	  <description><![CDATA[
	     <p>​   ​</p>

<p>Screen은 여러 프로세스 간에 물리적 콘솔을 다중화하는데 사용할 수있는 전체 화면 소프트웨어 프로그램이다.
하나의 단일 터미널 창 관리자에서 여러 개의 개별 터미널 인스턴스를 열 수 있는 사용자를 제공한다.</p>

<p>사실 다중 터미널이 필요한거라면 tmux나 iTerm이 더 편하다고 생각한다.
하지만, 스크린은 서버에서 백드라운드 데몬을 돌려야 할 때 아주 유용하다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">screen -S pingsession -d -m -L ping localhost</code></pre></figure>

<p>이 명령은 화면에 새로운 세션 (-m)을 만들고, 출력 (-L)을 기록하고, 즉시 분리 (-d) 명령이 실행되도록 지시한다.
로그는 현재 디렉토리의 screenlog.n 에 기록된다.</p>

<p>여기서 n은 화면 세션의 “창” 번호이다. 로깅은 정기적으로 버퍼링되고 플러시되며 로그 파일을 기록 할 수 있다.
화면 세션은 프로세스 제어, 즉 실행중인 데몬 중지 등을 지원한다.
이를 수행하기 위해 화면 세션은 세션 이름 (-S 세션 이름)으로 시작되어야하며 나중에 이름과 함께 종료 될 수 있다.</p>

<p>​   ​</p>

<h2 id="screen--">Screen 명령어 정리</h2>

<ul>
  <li>ctrl + a / d : screen 나갈 때</li>
  <li>ctrl + a / k : screen 죽일 때</li>
  <li>screen -ls : screen 목록 확인</li>
  <li>screen -r “name” : screen 재접속</li>
  <li>screen -S “name” : screen 생성</li>
  <li>~/.screenrc : 설정파일을 확인</li>
</ul>

<p>​   ​</p>

	  ]]></description>
	</item>

	<item>
	  <title>자주 사용하는 리눅스 명령어 정리 (2) - 쉘 스크립트</title>
	  <link>//linux2</link>
	  <author>Swalloow</author>
	  <pubDate>2017-02-16T19:18:00+09:00</pubDate>
	  <guid>//linux2</guid>
	  <description><![CDATA[
	     <p>​   ​</p>

<p>맥북을 사용하면서 가장 좋았던 점은 기본 운영체제가 유닉스 계열이다보니,
모든 것이 커멘드라인으로 해결된다는 점이었다. 특히 쉘 스크립트를 활용하면 간단한 자동화도 구현할 수 있다.
따라서, 이번 포스팅에서는 자동화를 위한 쉘 스크립트 문법을 정리해보려 한다.</p>

<p>​   ​</p>

<h2 id="section">쉘 스크립트란?</h2>

<p>문법에 대해 알기 이전에 쉘 스크립트가 어떤 역할을 하는지 알아야 한다.
기본적으로 우리가 사용하는 운영체제는 하드웨어 제어, CPU 스케줄링 등 많은 역할을 수행한다.
쉘은 운영체제 위에서 다양한 운영 체제 기능과 서비스를 구현하는 인터페이스를 제공하는 프로그램이다.
즉, 사용자와 맞닿아 있기 때문에 우리는 쉘의 명령어를 통해 직접 조작할 수 있는 것이다.</p>

<p>아래는 쉘 스크립트와 관련된 기본 명령어이다.</p>

<ul>
  <li>스크립트 실행 : sh {script.sh}</li>
  <li>스크립트 실행가능 지정 : chmod +x {script.sh}</li>
</ul>

<p>​   ​</p>

<h4 id="section-1">변수의 기본</h4>

<ul>
  <li>변수에 넣는 모든 값은 문자열로 취급한다.</li>
  <li>변수이름은 대소문자 구분, ‘=’ 좌우에는 공백 유지</li>
</ul>

<p>​   ​</p>

<h4 id="section-2">연산자</h4>

<ul>
  <li>OR : <code class="highlighter-rouge">||</code></li>
  <li>AND : <code class="highlighter-rouge">&amp;&amp;</code></li>
  <li>문자열 비교 : “string1”=”string2”</li>
</ul>

<p>​   ​</p>

<h4 id="if-else-">if-else 문</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">if</span> <span class="o">[</span> <span class="k">case</span> <span class="o">]</span>; <span class="k">then
  </span><span class="nb">true
</span><span class="k">else
  </span><span class="nb">false
</span><span class="k">fi</span></code></pre></figure>

<p>​   ​</p>

<h4 id="case-">case 문</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">case</span> <span class="nv">$answer</span> <span class="k">in
  </span>yes<span class="p">)</span>
  	<span class="nb">echo</span> <span class="s2">"yes"</span>
  no<span class="o">)</span>
  	<span class="nb">echo</span> <span class="s2">"no"</span>
<span class="k">esac</span></code></pre></figure>

<p>​   ​</p>

<h4 id="for-in-">for-in 문</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">for </span>fname <span class="k">in</span> <span class="k">$(</span>ls .sh<span class="k">)</span>; <span class="k">do
  </span><span class="nb">echo</span> <span class="s2">"fname"</span>
<span class="k">done</span></code></pre></figure>

<p>​   ​</p>

<h4 id="while-">while 문</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">while</span> <span class="o">[</span> 1 <span class="o">]</span>; <span class="k">do
  </span><span class="nb">echo</span> <span class="s2">"fname"</span>
<span class="k">done</span></code></pre></figure>

<p>​</p>

	  ]]></description>
	</item>

	<item>
	  <title>자주 사용하는 리눅스 명령어 정리 (1) - 기본 명령어</title>
	  <link>//linux1</link>
	  <author>Swalloow</author>
	  <pubDate>2017-02-15T19:18:00+09:00</pubDate>
	  <guid>//linux1</guid>
	  <description><![CDATA[
	     <p>​   ​</p>

<p>리눅스는 리누스 토발즈가 1991년 처음 개발을 시작한 오픈소스 소프트웨어이다.
보통 윈도우를 오래 사용하다보면 터미널보다 GUI에 익숙해지기 마련이다.
하지만 최근 맥북으로 갈아타면서 커멘드라인이 편하다는 걸 알게 되었고,
앞으로 좀 더 생산성을 높이기 위해 몇 가지 유용한 명령어들을 정리해보려 한다.</p>

<p>생활코딩에 리눅스에 대해 잘 정리한 강의가 있어 참고하면 좋다.
<a href="https://opentutorials.org/course/2598">https://opentutorials.org/course/2598</a></p>

<p>​   ​</p>

<h2 id="section">패키지 매니저</h2>

<p>리눅스는 패키지 매니저를 통해 설치되어 있지 않은 프로그램을 설치한다.
맥에서 사용하는 Brew를 떠올리면 이해하기 쉽다.</p>

<ul>
  <li>Ubuntu : apt-get</li>
  <li>CentOS : yum</li>
  <li>OS X : brew</li>
</ul>

<p>위와 같이 리눅스 배포판에 따라 패키지 매니저가 조금씩 다르지만, 사용법은 대체로 비슷한 편이다.
예를 들어 패키지를 설치할 때는 <code class="highlighter-rouge">apt-get install "package name"</code> 이런 식이다.
모든 패키지 매니저가 설치/업데이트/삭제 명령어를 가지고 있으며,
설치된 패키지를 관리하기 위한 명령어도 존재한다.</p>

<p>​   ​</p>

<h2 id="alias-">alias 명령어</h2>

<p>한번 설정해놓으면 이것만큼 편한게 없다.
바로 예시를 드는게 더 이해하기 편할거 같다.</p>

<p>예를 들어, 서버의 원격주소로 매일 접속해야 하는 상황이라고 가정해보자.
보통은 매번 <code class="highlighter-rouge">ssh username@address -p port</code> 이런식으로 입력해야 할 것이다.
하지만, alias를 설정해놓으면 커스텀 명령어로 지정하여 간단히 접속할 수 있다.</p>

<ol>
  <li>먼저 ~/.bashrc로 들어간다. (zsh를 사용한다면, ~/.zshrc로 들어가자)</li>
  <li><code class="highlighter-rouge">alias login = 'ssh username@address -p port'</code> 한 줄을 추가한다.</li>
  <li>source ~/.bashrc로 업데이트 해준다.</li>
</ol>

<p>이후에는 접속할 때 <code class="highlighter-rouge">login</code> 이라는 명령어만 입력하면 된다.
​</p>

<p>​   ​</p>

<h2 id="section-1">명령어 순차실행과 파이프라인</h2>

<p>사용하다보면 여러 명령어를 연속적으로 실행해야하는 경우가 많다.</p>

<p>이럴 때는 Sequence와 Pipeline 개념을 알아두면 편하다.
예를 들어, commit과 push 명령어를 연속적으로 실행하고 싶다고 가정해보자.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">git add -A;git push</code></pre></figure>

<p>위와 같이 중간에 세미콜론만 추가하면 된다.</p>

<p>이번에는 실행중인 특정 프로세스 번호를 찾아야 한다고 가정해보자.
처음이라면 <code class="highlighter-rouge">ps -ef</code> 로 프로세스를 직접 확인할 것이다.
하지만 파이프라인과 grep 명령어를 사용한다면 다음과 같이 한줄로 끝난다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">ps -ef | grep process_name</code></pre></figure>

<p>​
​   ​</p>

<h2 id="nohup">백그라운드 실행 - nohup</h2>

<p>어떤 작업을 백그라운드로 실행을 하면 별도의 창으로 켜놓지 않아도
하나의 프로세스로 계속 돌아가는 것을 확인할 수 있다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">nohup name &amp;</code></pre></figure>

<p>리눅스에서는 <code class="highlighter-rouge">nohup</code> 이라는 명령어로 실행할 수 있다.
실행하고 나면 <code class="highlighter-rouge">nohup.out</code> 이라는 파일이 생기는데
cat 명령어로 확인해보면 로그가 찍혀있는 것을 볼 수 있다.
실행중지 시킬 때는 <code class="highlighter-rouge">kill</code> 명령어로 프로세스를 죽이면 된다.</p>

<p>​   ​</p>

<h2 id="cron-crontab">스케줄링을 통한 주기적인 실행 - cron, crontab</h2>

<p>crontab은 일종의 리눅스 작업 스케줄러이다.
이 명령어를 사용하면 특정 시간에 내가 원하는 특정 명령어나 스크립트를 실행시킬 수 있다.
보통 주기적인 크롤링에 사용하기도 한다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">*</span> <span class="k">*</span> <span class="k">*</span> <span class="k">*</span> <span class="k">*</span> /root/script.sh</code></pre></figure>

<p>이렇게 설정하면 1분마다 script.sh를 실행한다.
앞의 별 다섯개는 순서대로 <code class="highlighter-rouge">"분,시,일,월,요일"</code>을 뜻한다.
내가 실행중인 스케줄러를 관리하기 위한 명령어는 다음과 같다.</p>

<ul>
  <li>crontab -l : 실행중인 cron 확인</li>
  <li>crontab -r : 사용자의 예약작업을 모두 삭제</li>
</ul>

<p>​   ​</p>

	  ]]></description>
	</item>

	<item>
	  <title>OS X에서 Jenkins 설치하기</title>
	  <link>//jenkins-install</link>
	  <author>Swalloow</author>
	  <pubDate>2017-02-13T19:18:00+09:00</pubDate>
	  <guid>//jenkins-install</guid>
	  <description><![CDATA[
	     <p>​</p>

<p>이번 포스팅에서는 CI 도구인 Jenkins를 설치하고 실행하는 방법에 대해 정리해보겠습니다.</p>

<p>​</p>

<h2 id="jenkins-">Jenkins 설치하기</h2>

<p>홈페이지에서 패키지 파일로 설치해도 되지만 관리를 편하게 하기 위해 brew로 설치하겠습니다.</p>

<p><code class="highlighter-rouge">brew install jenkins</code> 설치가 되었다면, <code class="highlighter-rouge">brew services start jenkins</code> 명령어로 실행시킵니다.</p>

<p><img src="https://t1.daumcdn.net/thumb/R1280x0/?fname=http://t1.daumcdn.net/brunch/service/user/wRr/image/7QdE6zFXW0HQurosFv56loRGGpY.JPG" alt="jenkins" /></p>

<p>처음에 사용자 등록을 진행하고 필요한 플러그인을 설치하면 홈 화면으로 이동합니다.</p>

<p>서버를 종료시킬때는 <code class="highlighter-rouge">brew services stop jenkins</code> 명령어를 실행시키면 됩니다.</p>

<p>​</p>

	  ]]></description>
	</item>


</channel>
</rss>
