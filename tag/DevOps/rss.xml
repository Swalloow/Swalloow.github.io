<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>swalloow.github.io/</title>
   
   <link>http://swalloow.github.io/</link>
   <description>About Data Science, Data Engineering</description>
   <language>ko-KO</language>
   <managingEditor> Swalloow</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Docker와 Gitlab CI를 활용한 빌드, 테스트 자동화</title>
	  <link>//gitlabci-docker</link>
	  <author>Swalloow</author>
	  <pubDate>2017-03-31T19:18:00+09:00</pubDate>
	  <guid>//gitlabci-docker</guid>
	  <description><![CDATA[
	     <p>​   ​</p>

<p>Gitlab은 설치형 GitHub이라고 이해하시면 편합니다.
무료로 private repository와 CI 서버를 제공해줍니다.
심지어 Docker Registry도 무료로 제공하고 있습니다.
아직 많은 분들이 Gitlab CI의 여러 장점들을 잘 모르시는 것 같아 정리해보았습니다.</p>

<p>​</p>

<h3 id="gitlab-ci">Gitlab CI</h3>

<p>Gitlab CI는 Gitlab에서 무료로 제공하는 CI 툴 입니다.
Gitlab과 완벽하게 연동되며 CI를 위해 <strong>CI linter, pipeline, cycle analytics</strong> 등 다양한 서비스를 제공합니다.</p>

<p><img src="/assets/images/gitlab-ci.png" alt="Gitlab-CI" /></p>

<p>travis, circle CI와 마찬가지로 Gitlab CI는 <code class="highlighter-rouge">gitlab-ci.yml</code> 파일로 설정할 수 있습니다.
Gitlab은 DigitalOcean과 제휴하여 CI 서버(Runner)를 따로 제공합니다.
따라서 <code class="highlighter-rouge">Runner</code>에 job을 할당하여 돌아가도록 설정할 수 있습니다.</p>

<p><img src="/assets/images/gitlab-pipe.png" alt="Gitlab-Pipe" /></p>

<p>그리고 Runner는 <strong>Docker 컨테이너</strong> 를 기반으로 돌아갑니다.
Gitlab CI를 실행해보면 처음에 Ruby 이미지를 받아와서 컨테이너를 실행시키는 것을 볼 수 있습니다.
따라서, <strong>Base Image를 내 어플리케이션 이미지로 바꾸면 빌드 및 테스트 속도가 빠르게 향상됩니다</strong>.</p>

<p>​</p>

<h3 id="gitlab-registry">Gitlab Registry</h3>

<p><img src="/assets/images/gitlab-registry.png" alt="Gitlab-Registry" /></p>

<p>Docker 친화적인 Gitlab은 Docker Registry도 무료로 제공해줍니다.
<code class="highlighter-rouge">Gitlab Registry</code> 탭에 들어가면 Docker Registry의 주소가 적혀있고 친절하게 명령어까지 써있습니다.</p>

<p>아마 많은 분들이 DockerHub를 결제하거나, AWS S3를 이용하여 Docker Registry를 구축하셨을 겁니다.
하지만 Gitlab에서는 그럴 필요가 없습니다.</p>

<p>​</p>

<h3 id="docker-with-gitlab-ci">Docker with Gitlab CI</h3>

<p>gitlab-ci 설정파일은 대략 다음과 같습니다.</p>

<figure class="highlight"><pre><code class="language-markdown" data-lang="markdown">image: gitlab-registry
stages:
<span class="p">  -</span> build
<span class="p">  -</span> test
<span class="p">  -</span> deploy

job-build:
  stage: build
  script:
<span class="p">  -</span> pip install -r requirements.txt
<span class="p">  -</span> python -m py_compile run.py

job-test:
  stage: test
  script:
<span class="p">  -</span> pytest --pep8 -m pep8 backend/

job-deploy:
  stage: deploy
  script:
<span class="p">  -</span> deployment</code></pre></figure>

<p>Gitlab CI와 Docker를 활용한 빌드 테스트 자동화는 위의 그림과 같이 이루어집니다.</p>

<p><img src="/assets/images/ci-process.png" alt="CI" /></p>

<ol>
  <li>사용자가 Gitlab 저장소에 push를 하면, Gitlab CI Runner로 전달됩니다.</li>
  <li>Gitlab CI는 Gitlab Registry로부터 Docker 이미지를 받아옵니다. Docker 이미지에는 어플리케이션 환경이 설정되어 있습니다.</li>
  <li>Docker 컨테이너가 실행되면 첫번째 job에 정의된 대로 필요한 패키지를 설치하고 빌드를 수행합니다.</li>
  <li>빌드가 통과되면 두번째 job에 정의된 대로 테스트를 수행합니다.</li>
  <li>테스트가 통과되면 세번째 job에 정의된 대로 배포 과정을 수행합니다.</li>
  <li>각 과정은 모두 Slack 알림으로 확인할 수 있습니다.</li>
</ol>

<p><img src="/assets/images/gitlab-pipeline.png" alt="Gitlab" /></p>

<p>위와 같이 모든 과정을 <code class="highlighter-rouge">Gitlab Pipeline</code>을 통해 확인하실 수 있습니다.</p>

<p>Gitlab의 단점이라면 Community 버전의 서버가 조금 불안정하다는 점입니다.
물론 설치형 Gitlab을 사용하신다면 이런 단점마저 존재하지 않습니다.
소규모의 팀이라면 충분히 도입을 검토해볼만 하다고 생각합니다.</p>

<p>​   ​</p>

	  ]]></description>
	</item>

	<item>
	  <title>올바른 Dockerfile 작성을 위한 가이드라인</title>
	  <link>//dockerfile-ignore</link>
	  <author>Swalloow</author>
	  <pubDate>2017-03-28T19:18:00+09:00</pubDate>
	  <guid>//dockerfile-ignore</guid>
	  <description><![CDATA[
	     <p>​   ​</p>

<p>Docker가 처음이라면, 이전 포스팅을 참고하시기 바랍니다.</p>

<ul>
  <li><a href="https://swalloow.github.io/docker-install">Docker 간편한 설치부터 실행까지</a></li>
  <li><a href="https://swalloow.github.io/docker-command">Docker, DockerHub 명령어 정리</a></li>
  <li><a href="https://swalloow.github.io/dockerfile">파이썬을 위한 Dockerfile 작성하기</a></li>
  <li>
    <p><a href="https://swalloow.github.io/dockerfile-ignore">올바른 Dockerfile 작성은 위한 가이드라인</a></p>

    <p>​</p>
  </li>
</ul>

<h2 id="dockerfile">Dockerfile</h2>

<p>Dockerfile은 일종의 이미지 설정파일입니다.
생긴 모양새는 쉘 스크립트와 유사하지만 자체의 문법을 가지고 있습니다.
이렇게 작성된 Dockerfile은 <code class="highlighter-rouge">build</code> 명령어를 통해 이미지를 생성할 수 있습니다.</p>

<p>이 포스팅에서는 Dockerfile 레퍼런스에 나와 있는 가이드라인을 정리해보도록 하겠습니다.
<a href="https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/">https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/</a>에 자세한 내용이 설명되어 있습니다.</p>

<p>​</p>

<h4 id="section">컨테이너는 일시적이어야 한다</h4>

<p>일시적이라는 말은 가능한 최소한의 설정 및 구성으로 이루어져있어야 한다는 것을 의미합니다.
이에 대한 내용은 <a href="https://12factor.net/">Twelve Factors Application</a>을 참고하시면 좋습니다.</p>

<p>​   ​</p>

<h4 id="dockerignore-">.dockerignore을 활용하자</h4>

<p>대부분의 경우 각 Docker 파일을 빈 디렉토리에 저장하는 것이 가장 좋습니다.
그런 다음 Dockerfile을 빌드하는 데 필요한 파일만 해당 디렉토리에 추가하시면 됩니다.
빌드의 성능을 높이려면 해당 디렉토리에 <code class="highlighter-rouge">.dockerignore</code> 파일을 추가하여 파일 및 디렉토리를 제외 할 수 있습니다.
<code class="highlighter-rouge">.dockerignore</code> 파일은 <code class="highlighter-rouge">.gitignore</code> 파일과 유사하게 동작한다고 보시면 됩니다.</p>

<figure class="highlight"><pre><code class="language-markdown" data-lang="markdown"><span class="err">*</span>.md
!README.md</code></pre></figure>

<p>위와 같은 <code class="highlighter-rouge">.dockerignore</code> 파일은 <em>README.md</em> 파일을 제외한 모든 마크다운 파일을 제외시킵니다.
이런식으로 원하지 않는 파일 및 디렉토리를 제외시켜 이미지의 용량을 줄일 수 있습니다.</p>

<p>​</p>

<h4 id="section-1">불필요한 패키지를 설치하지 말자</h4>

<p>복잡성, 의존성, 파일 크기 및 빌드 시간을 줄이기 위해서는 불필요한 패키지를 설치하지 말아야 합니다.
예를 들어, 데이터베이스 이미지에 텍스트 편집기를 포함시킨다거나 하는 일은 없어야 합니다.</p>

<p>​</p>

<h4 id="section-2">컨테이너는 오직 하나의 관심사만 갖는다</h4>

<p>애플리케이션을 여러 컨테이너로 분리하면 컨테이너를 확장하고 재사용하는 것이 훨씬 쉬워집니다.
예를 들어, 일반적인 어플리케이션은 웹 어플리케이션, 데이터베이스, 인메모리-캐시와 같이 세 개의 컨테이너로 구성 될 수 있습니다.</p>

<p><strong>컨테이너 당 하나의 프로세스</strong> 가 있어야한다는 말을 들어 보셨을 겁니다.
하지만, 언제나 컨테이너 당 하나의 운영 체제 프로세스만 있어야 하는 것은 아닙니다.
컨테이너가 init 프로세스로 생성 될 수 있다는 사실 외에도 일부 프로그램은 자체적으로 추가 프로세스를 생성 할 수 있습니다.
예를 들어 Celery는 여러 작업자 프로세스를 생성하거나 Apache 스스로 요청에 따른 프로세스를 생성 할 수 있습니다.
컨테이너를 깔끔한 모듈 형식으로 유지하기 위해 신중히 선택해야 합니다.
컨테이너에 서로 의존성이 생기는 경우 Docker 컨테이너 네트워크를 사용하여 서로 통신 할 수 있습니다.</p>

<p>​</p>

<h4 id="section-3">레이어의 수를 최소화하자</h4>

<p>사용하는 레이어의 수에 대해 전략적이고 신중해야합니다.
장기적인 관점에서 보았을 때 유지보수를 위해서는 레이어의 수를 최소화하는 것이 현명한 선택이 될 수 있습니다.</p>

<p>​</p>

<h4 id="section-4">줄바꿈을 사용하여 정렬하자</h4>

<figure class="highlight"><pre><code class="language-markdown" data-lang="markdown">RUN apt-get update &amp;&amp; apt-get install -y <span class="err">\</span>
  bzr <span class="err">\</span>
  cvs <span class="err">\</span>
  git</code></pre></figure>

<p>위와 같이 줄바꿈을 사용하면, 패키지의 중복을 피하고 목록을 훨씬 쉽게 업데이트 할 수 있습니다.
백 슬래시 (<code class="highlighter-rouge">\</code>) 앞에 공백을 추가하면 가독성을 높이는 데에 도움이됩니다.</p>

<p>​</p>

<h4 id="section-5">캐시를 활용하여 빌드하자</h4>

<p>이미지를 작성하는 과정에서 Docker는 지정한 순서대로 Dockerfile을 단계 별로 실행합니다.
각 명령을 실행할 때 Docker는 매번 새로운 이미지를 만드는 대신 캐시에서 기존 이미지를 찾아 재사용 할 수 있습니다.
캐시를 전혀 사용하지 않으려는 경우 docker 빌드 명령에서 <code class="highlighter-rouge">--no-cache = true</code> 옵션을 사용하시면 됩니다.</p>

<p>Docker가 캐시를 사용하게하려면 일치하는 이미지를 찾을 때와 그렇지 않을 때를 이해하는 것이 매우 중요합니다.
Docker cache의 기본 규칙은 다음과 같습니다.</p>

<ul>
  <li>
    <p>이미 캐시에 있는 기본 이미지로 시작하여 다음 명령어가 해당 기본 이미지에서 파생된 모든 하위 이미지와 비교되어 그 중 하나가 정확히 동일한 명령어를 사용하여 빌드되었는지 확인합니다. 그렇지 않으면 캐시가 무효화됩니다.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">ADD, COPY</code> 명령을 제외하고 캐시 검사는 컨테이너의 파일을보고 캐시 일치를 판별하지 않습니다. 예를 들어 <code class="highlighter-rouge">RUN apt-get -y update</code> 명령을 처리 할 때 컨테이너에서 업데이트 된 파일은 캐시 히트가 있는지 여부를 확인하기 위해 검사되지 않습니다. 이 경우 명령 문자열 자체만 일치하는지 확인합니다.</p>
  </li>
  <li>
    <p>캐시가 무효화되면 이후의 모든 Dockerfile 명령은 새로운 이미지를 생성하고 캐시는 사용되지 않습니다.</p>
  </li>
</ul>

<p>​   ​</p>

	  ]]></description>
	</item>

	<item>
	  <title>파이썬을 위한 Dockerfile 작성하기</title>
	  <link>//dockerfile</link>
	  <author>Swalloow</author>
	  <pubDate>2017-03-27T19:18:00+09:00</pubDate>
	  <guid>//dockerfile</guid>
	  <description><![CDATA[
	     <p>​   ​</p>

<p>Docker가 처음이라면, 이전 포스팅을 참고하시기 바랍니다.</p>

<ul>
  <li><a href="https://swalloow.github.io/docker-install">Docker 간편한 설치부터 실행까지</a></li>
  <li><a href="https://swalloow.github.io/docker-command">Docker, DockerHub 명령어 정리</a></li>
  <li>
    <p><a href="https://swalloow.github.io/dockerfile">파이썬을 위한 Dockerfile 작성하기</a></p>

    <p>​</p>
  </li>
</ul>

<h3 id="flask-application">Flask Application</h3>

<p>Dockerfile은 일종의 이미지 설정파일입니다. <code class="highlighter-rouge">build</code> 명령어를 통해 이미지를 생성할 수 있습니다.
파이썬 웹 어플리케이션을 Docker로 실행시키는 예제를 통해 천천히 정리해보겠습니다.</p>

<script src="https://gist.github.com/Swalloow/deef1f6d161198ad65d74db54466b921.js"></script>

<p>먼저 위와 같이 간단한 플라스크 웹 어플리케이션을 작성합니다.
필요한 패키지는 requirements.txt로 관리합니다.
<code class="highlighter-rouge">pip freeze &gt; requirements.txt</code> 명령어를 통해 파일을 생성할 수 있습니다.</p>

<figure class="highlight"><pre><code class="language-markdown" data-lang="markdown">Flask==0.12</code></pre></figure>

<p>​   ​</p>

<h3 id="dockerfile-">Dockerfile 작성하기</h3>

<figure class="highlight"><pre><code class="language-markdown" data-lang="markdown">FROM ubuntu:latest
MAINTAINER your_name "email@gmail.com"
RUN apt-get update -y
RUN apt-get install -y python-pip python-dev build-essential
COPY . /app
WORKDIR /app
RUN pip install -r requirements.txt
ENTRYPOINT <span class="p">[</span><span class="nv">"python"</span><span class="p">]</span>
CMD <span class="p">[</span><span class="nv">"app.py"</span><span class="p">]</span></code></pre></figure>

<p>위와 같이 Dockerfile을 작성하시면 됩니다.
간단히 설명하자면, ubuntu 이미지를 받아와서 파이썬 환경설정을 하고
현재 경로에 있는 폴더를 복사해서 파이썬 패키지를 설치하고 앱을 실행시키는 이미지입니다.</p>

<p>​   ​</p>

<h3 id="dockerfile---">Dockerfile 빌드 및 실행하기</h3>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>docker build -t flask-application:latest .
<span class="gp">$ </span>docker run -d -p 5000:5000 flask-application</code></pre></figure>

<p><code class="highlighter-rouge">docker build [name]</code> 명령어를 통해 이미지를 빌드합니다.
그리고 <code class="highlighter-rouge">docker run [image]</code> 명령어를 통해 컨테이너를 실행시킵니다.
<code class="highlighter-rouge">-p</code> 옵션은 포트를 지정하며, <code class="highlighter-rouge">-d</code> 옵션은 백그라운드로 실행시키는 옵션입니다.
5000번 포트를 확인해보면 플라스크 어플리케이션이 실행된 것을 확인할 수 있습니다.</p>

<p>​   ​</p>

	  ]]></description>
	</item>

	<item>
	  <title>리눅스 시스템 모니터링 명령어 정리</title>
	  <link>//system-monitoring</link>
	  <author>Swalloow</author>
	  <pubDate>2017-03-24T19:18:00+09:00</pubDate>
	  <guid>//system-monitoring</guid>
	  <description><![CDATA[
	     <p>​   ​</p>

<p>리눅스 시스템 모니터링을 위한 명령어에 대해 정리해보았습니다.</p>

<p>​   ​</p>

<h2 id="top">프로세스 모니터링 명령어 - top</h2>

<p><img src="/assets/images/linux_top.png" alt="top" /></p>

<p><strong>top</strong> 명령어는 커널을 통하여 관리되는 프로세스들의 정보(메모리 사용률, CPU 사용률, 상태정보 등)를 확인할 수 있는 명령어입니다.
응용프로그램을 강제로 종료시키고 싶을 때, 실행중인 프로세스를 찾아 <code class="highlighter-rouge">kill</code> 명령어를 통해 강제종료시킬 수도 있습니다.</p>

<p>OS X에서는 <code class="highlighter-rouge">-o</code> 옵션을 통해, 리눅스에서는 <code class="highlighter-rouge">shift + f</code> 명령어를 통해 프로세스를 key에 따라 정렬할 수 있습니다.</p>

<p>​   ​</p>

<h2 id="vmstat-iostat-sar">시스템 리소스 정보 - vmstat, iostat, sar</h2>

<p><img src="/assets/images/linux_vmstat.png" alt="vmstat" /></p>

<p><strong>vmstat</strong> 명령어는 <em>virtual memory statistics</em> 의 줄임말로 가상메모리 등 다양한 리소스 정보를 제공합니다.
OS X에서는 <code class="highlighter-rouge">vm_stat</code> 명령어로, 리눅스에서는 <code class="highlighter-rouge">vmstat</code> 명령어로 확인하실 수 있습니다.</p>

<p><img src="/assets/images/linux_iostat.png" alt="iostat" /></p>

<p><strong>iostat</strong> 명령어는 sysstat에서 가장 기본적인 명령어로 CPU 및 디스크 입출력에 대한 기본정보를 제공합니다.</p>

<p><img src="/assets/images/linux_sar.png" alt="sar" /></p>

<p><strong>sar</strong> 명령어는 시스템 활동 모니터링에 유용합니다.
특히 <code class="highlighter-rouge">-r, -f</code> 옵션을 통해 CPU, 메모리 사용률을 날짜, 시간 대 별로 확인할 수 있습니다.</p>

<p>​   ​</p>

<h2 id="linux-sysstat--">Linux sysstat 패키지 설치</h2>

<p>CentOS, Ubuntu에서는 앞서 말씀드린 <code class="highlighter-rouge">sar, vmstat</code> 등의 명령어를 사용하기 위해서 <code class="highlighter-rouge">sysstat</code> 패키지를 설치해야 합니다.
아래의 명령어를 통해 설치할 수 있습니다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">// CentOS, Ubuntu
<span class="gp">$ </span>yum install sysstat -y
<span class="gp">$ </span>apt install sysstat -y</code></pre></figure>

<p>만일 권한 오류나 명령어를 찾을 수 없다는 오류가 나타난다면 아래의 설정을 통해 해결할 수 있습니다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>sudo vi /etc/default/sysstat
<span class="gp">$ </span><span class="nv">ENABLED</span><span class="o">=</span>”true”</code></pre></figure>

<p>​   ​</p>

	  ]]></description>
	</item>

	<item>
	  <title>SSH 프로토콜과 Tunneling 이해하기</title>
	  <link>//ssh-tunneling</link>
	  <author>Swalloow</author>
	  <pubDate>2017-03-20T19:18:00+09:00</pubDate>
	  <guid>//ssh-tunneling</guid>
	  <description><![CDATA[
	     <p>​   ​</p>

<p>지금까지 아무 생각없이 SSH를 사용하다가 한번 정리해보았습니다.</p>

<p>​   ​</p>

<h2 id="ssh-protocol">SSH Protocol</h2>

<p>SSH는 Secure Shell의 약자입니다. SSH는 한마디로 정의하면,
네트워크 상의 다른 컴퓨터에 로그인하거나 원격 시스템에서 명령을 실행하고
다른 시스템으로 파일을 복사할 수 있도록 해 주는 프로토콜입니다.
VPN을 구성하는 것보다 가격이 저렴하고 쉽게 연결할 수 있어 많이 사용됩니다.</p>

<p>MacOS에는 <strong>OpenSSH</strong> 클라이언트와 서버가 내장되어 있기 때문에 바로 사용할 수 있습니다.
SSH는 <strong>22번 포트</strong> 를 사용하며, 크게 다음의 3가지를 제공합니다.</p>

<p>​   ​</p>

<h4 id="authentication">1. Authentication</h4>

<p><img src="/assets/images/ssh-key-auth-flow.png" alt="SSH-Auth" /></p>

<p>SSH는 public key와 private key를 사용하는 비대칭 암호방식을 사용합니다.
간단히 설명하면, <code class="highlighter-rouge">public key</code>와 <code class="highlighter-rouge">private key</code>가 모두 있어야 인증이 되는 방식입니다.
각자 private key는 외부 유출없이 가지고 있고, public key만 네트워크를 통해 전달합니다.
SSH는 RSA, DSA 등 다양한 인증 방식을 지원합니다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>ssh-keygen
<span class="gp">$ </span>cat ~/.ssh/id_rsa.pub</code></pre></figure>

<p><code class="highlighter-rouge">ssh-keygen</code> 명령어를 통해 ssh 키를 생성하고
<code class="highlighter-rouge">~/.ssh/id_rsa.pub</code>에서 public key를 확인할 수 있습니다.</p>

<p>​   ​</p>

<h4 id="encryption--integrity">2. Encryption &amp; Integrity</h4>

<p>SSH는 네트워크를 통해 전달되는 데이터를 암호화합니다.
<code class="highlighter-rouge">3DES, blowfish</code> 등 여러 가지 암호화 방식을 제공하며,
새로운 암호화 기법을 추가할 수도 있습니다.</p>

<p>그리고 SSH는 네트워크를 통해 받은 데이터가 변경되지 않았음(무결성)을 보장해줍니다.
이를 위해 <strong>MAC(Message Authentication Code)</strong> 이라는 알고리즘을 사용합니다.</p>

<p><img src="/assets/images/mac-algo.jpg" alt="MAC-Algo" /></p>

<p>MAC 알고리즘은 다음과 같이 동작합니다.
SSH 클라이언트가 서버로 메세지를 보내면,
MAC 알고리즘을 통해 <code class="highlighter-rouge">secret key</code>를 입력받아 MAC 코드를 생성합니다.
그리고, 임의 길이의 암호화 된 메시지와 MAC 코드를 SSH 서버로 보냅니다.</p>

<p>서버에서는 다시 메세지와 서버의 <code class="highlighter-rouge">secret key</code>를 조합하여 MAC 코드를 만들고,
클라이언트로부터 받은 MAC 코드와 비교하여 인증을 진행하게 됩니다.</p>

<p>​   ​</p>

<h4 id="compression">4. Compression</h4>

<p>SSH는 네트워크 상에서 데이터를 전송하고 수신할 때 압축 과정을 거칩니다.
이를 통해 전송 데이터의 크기를 줄여 네트워크 비용을 낮출 수 있습니다.</p>

<p>​   ​</p>

<h2 id="ssh-tunneling">SSH Tunneling</h2>

<p>SSH Tunneling은 터널을 통해 데이터를 주고받는다 해서 붙여진 이름입니다.
앞서 얘기했던 것처럼 연결, 통신은 모두 암호화되며 <code class="highlighter-rouge">SMTP, IMAP</code> 등 여러 가지로 사용될 수 있습니다.</p>

<p>Direct로 보내면 네트워크 층에서 수 많은 공격을 받을 수 있기 때문에
SSH를 통해 다른 Application에 연결하는 것이 안전합니다.
SSH Tunneling에는 다음과 같이 두 가지 방법이 있습니다.</p>

<p>​   ​</p>

<h4 id="local-port-forwarding">Local port forwarding</h4>

<p><img src="/assets/images/ssh-local.png" alt="SSH-Local" /></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>ssh -L port1:host_name:port2 server_name</code></pre></figure>

<p>로컬에서 서버에 있는 MySQL과 SSH 연결을 한다고 가정해보겠습니다.
<code class="highlighter-rouge">Local port forwarding</code>은
로컬에 설치된 MySQL 클라이언트의 3306 포트가
연결된 SSH Tunnel을 거쳐 서버에 있는 MySQL 서버의 3306 포트와 연결됩니다.
이를 통해 직접 서버의 데이터베이스에 안전하게 접근할 수 있으며
요청을 보내서 서로 데이터를 주고 받을 수 있습니다.</p>

<p>​   ​</p>

<h4 id="remote-port-forwarding">Remote port forwarding</h4>

<p><img src="/assets/images/ssh-remote.png" alt="SSH-Remote" /></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>ssh -R port1:host_name:port2 server_name</code></pre></figure>

<p>이번에는 로컬에서 파이썬 웹 애플리케이션을 개발 중인데 친구에게 보여주고 싶다고 가정 해보겠습니다.
아직 공개 IP 주소를 제공하지 않기 때문에 인터넷을 통해 직접 기기에 연결할 수 없을 겁니다.
라우터에서 NAT를 구성하여 해결할 수 있지만 라우터의 구성을 변경해야하므로 번거롭습니다.
이럴때 <code class="highlighter-rouge">Remote port forwarding</code>을 통해 쉽게 해결할 수 있습니다.</p>

<p>먼저 port1의 서버에서 port2로 로컬 트래픽을 전달하는 SSH 터널을 생성합니다.
이후 로컬에서 port2의 서버에 연결하면 실제로 SSH 터널을 통해 데이터를 요청하는 것을 확인할 수 있습니다.</p>

<p>OSI 7계층에서 생각해보면 SSH는 <code class="highlighter-rouge">Application - Transport - Network</code> 계층에 걸쳐있습니다.
Application 계층에서 포트를 연결하면 Transport 계층의 TCP 통신을 통해 전달되고,
Network 계층을 통해 목적지로 이동하게 됩니다.</p>

<p>​   ​</p>

	  ]]></description>
	</item>

	<item>
	  <title>AWS EC2 인스턴스 SSH 접속을 위한 초기설정 그리고 주의사항</title>
	  <link>//aws-config</link>
	  <author>Swalloow</author>
	  <pubDate>2017-03-10T19:18:00+09:00</pubDate>
	  <guid>//aws-config</guid>
	  <description><![CDATA[
	     <p>​   ​</p>

<p>이 포스팅의 모든 내용은 OS X에 최적화되어 있습니다.
그리고, 정리한 내용은 AWS 공식문서에 아주 잘 소개되어 있습니다.</p>

<p>​   ​</p>

<h2 id="aws-cli">AWS CLI</h2>

<p>AWS CLI는 여러 AWS 서비스를 명령줄에서 제어하고 스크립트를 통해 자동화할 수 있는 커멘드라인 인터페이스입니다.
이를 사용하기 전에 먼저, brew를 통해 <code class="highlighter-rouge">awscli</code>를 설치해야 합니다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>brew install awscli</code></pre></figure>

<p>설치하고 나면 이제 aws 명령어를 사용할 수 있습니다.
가장 먼저 configure 명령어를 통해 Access key를 입력해야합니다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>aws configure
AWS Access Key ID <span class="o">[</span>None]: AKIAIOSFODNN7EXAMPLE
AWS Secret Access Key <span class="o">[</span>None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
Default region name <span class="o">[</span>None]: us-west-2
Default output format <span class="o">[</span>None]: ENTER</code></pre></figure>

<p>여기에서 Access Key ID는 <code class="highlighter-rouge">[IAM - Security credentials]</code>에서 확인할 수 있습니다.</p>

<p>​   ​</p>

<h2 id="aws-ec2-">AWS EC2 접속</h2>

<p>EC2 인스턴스를 만들면 .pem이라는 파일을 발급받게 됩니다.
이 파일은 절대 외부로 유출되면 안되기 때문에 조심해야합니다.
.pem 파일이 있는 경로로 이동한 다음 아래의 명령어를 통해 접속하면 됩니다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="gp">$ </span>chmod 400 /path/my-key-pair.pem
<span class="gp">$ </span>ssh -i /path/my-key-pair.pem ec2-user@ec2-198-51-100-1.compute-1.amazonaws.com</code></pre></figure>

<p>“Permission denied” 에러가 발생하면 <code class="highlighter-rouge">-vvv</code> 옵션을 통해 디버깅 할 수 있습니다.
(가장 많이 하는 실수가 user_id에 ubuntu를 안적어주는 경우)</p>

<p>​   ​</p>

<h2 id="aws---">AWS를 사용하면서 조심해야할 사항</h2>

<p>​   ​</p>

<h4 id="section">1.인스턴스 관리</h4>

<p>프리티어를 사용하는 경우, 다 사용하고 나서 인스턴스를 항상 꺼주는 습관을 들여 과도한 요금이 과금되지 않도록 해야합니다.
특히 여러 개의 인스턴스를 돌리는 경우 순식간에 청구서가 날아올 수 있습니다.</p>

<h4 id="root---">2. ROOT 계정 사용 자제</h4>

<p>많은 경우에 ROOT 계정의 키가 털려서 과금이 발생됩니다. IAM을 통해 Admin 계정을 만들어서 사용하고,
GitHub 같은 곳에 설정파일을 올리지 말아야합니다.</p>

<h4 id="cloudwatch--">3. CloudWatch로 요금 확인</h4>

<p>CloudWatch를 통해 Billing Cost가 일정 금액을 넘어가면 메일이나 Slack 메세지로 보내도록 설정해두면 편합니다.</p>

<h4 id="section-1">4. 네트워크 확인</h4>

<p>네트워크에서 모든 포트를 여는 것도 위험합니다. 이렇게 되면 DDoS 공격을 받을 위험이 있습니다.</p>

<p>​   ​</p>

<h2 id="section-2">참고링크</h2>
<ul>
  <li><a href="http://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html">SSH를 사용하여 Linux 인스턴스에 연결</a></li>
  <li><a href="http://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/TroubleshootingInstancesConnecting.html#TroubleshootingInstancesConnectingMindTerm">인스턴스 연결문제 해결방법</a></li>
</ul>

<p>​   ​</p>

	  ]]></description>
	</item>

	<item>
	  <title>Docker, DockerHub 명령어 정리</title>
	  <link>//docker-command</link>
	  <author>Swalloow</author>
	  <pubDate>2017-02-22T19:18:00+09:00</pubDate>
	  <guid>//docker-command</guid>
	  <description><![CDATA[
	     <p>​   ​</p>

<p><img src="/assets/images/docker-architect.png" alt="docker-architect" /></p>

<p>명령어를 정리하기 전에 Docker 시스템 아키텍처를 보면 이해하기 쉽습니다.
Docker는 크게 <strong>클라이언트-서버 아키텍처</strong> 로 구성되어 있습니다.
그림처럼 우리가 명령어를 입력하면 클라이언트는 데몬과 통신하고 데몬이 컨테이너를 빌드, 실행합니다.</p>

<p>DockerHub는 도커 컨테이너를 관리하고 공유하기 위한 SAAS로
GitHub 처럼 이미지를 올려서 공유하거나 내려받을 수 있습니다.</p>

<p><a href="https://swalloow.github.io/docker-install">지난 번 포스팅</a>에 이어서
이제 Docker 명령어를 정리하고, 더 나아가 DockerHub에 이미지를 올리는 방법까지 알아보겠습니다.</p>

<p>​</p>

<h4 id="section">상태 확인하기</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker ps
docker images</code></pre></figure>

<p><code class="highlighter-rouge">docker ps</code>는 실행 중인 컨테이너 목록을 확인할 때 사용합니다.
<code class="highlighter-rouge">-a</code> 옵션을 사용하면 전체 목록을 확인할 수 있습니다.
<code class="highlighter-rouge">docker images</code>는 설치된 이미지 목록을 확인할 때 사용합니다.</p>

<p>​   ​</p>

<h4 id="section-1">이미지 받아오기</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker search nginx
docker pull nginx</code></pre></figure>

<p>다음은 Dockerhub로 부터 이미지를 받아오기 위한 명령어입니다.
<code class="highlighter-rouge">docker search [image]</code>로 이미지를 검색할 수 있습니다.
<code class="highlighter-rouge">docker pull [image]</code>을 사용하여 이미지를 받아올 수 있습니다.</p>

<p>​   ​</p>

<h4 id="section-2">컨테이너 실행하기</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker run -d -p 80:80 --name webserver nginx</code></pre></figure>

<p><code class="highlighter-rouge">docker run [image]</code> 명령어를 통해 컨테이너를 실행할 수 있습니다.
<code class="highlighter-rouge">-p</code> 옵션을 통해 포트를 지정할 수 있고, <code class="highlighter-rouge">-d</code> 옵션을 통해 백그라운드로 실행시킬 수 있습니다.
그리고 <code class="highlighter-rouge">--name</code>을 통해 컨테이너 이름을 지정할 수 있습니다.</p>

<p>​   ​</p>

<h4 id="section-3">컨테이너 중지/재시작하기</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker stop webserver
docker restart webserver
docker start webserver</code></pre></figure>

<p><code class="highlighter-rouge">docker stop/restart/start [container]</code> 명령어를 통해 컨테이너를 중지/재시작/시작할 수 있습니다.</p>

<p>​   ​</p>

<h4 id="section-4">컨테이너/이미지 삭제하기</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker rm -f webserver
docker rmi webserver</code></pre></figure>

<p><code class="highlighter-rouge">docker rm -f [container]</code> 명령어를 통해 컨테이너를 삭제할 수 있습니다.
<code class="highlighter-rouge">docker rmi [image]</code> 명령어를 통해 이미지를 삭제할 수 있습니다.</p>

<p>​   ​</p>

<h4 id="dockerhub--">DockerHub 관련 명령어</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker build <span class="o">[</span>PATH]
docker commit
docker push</code></pre></figure>

<p>DockerHub를 사용하기 위해서는 먼저 로그인이 되어 있어야 합니다.
아이디가 없다면, <a href="https://hub.docker.com/">https://hub.docker.com/</a>에서 가입하시면 됩니다.
이후 <code class="highlighter-rouge">docker login</code> 명령어를 통해 연결할 수 있습니다.</p>

<p><code class="highlighter-rouge">docker build [PATH]</code>는 지정된 경로에 Dockerfile로 이미지를 만드는 명령어 입니다.
<code class="highlighter-rouge">docker commit</code> 명령어를 통해 변경사항을 저장할 수 있습니다.
<code class="highlighter-rouge">docker push</code> 명령어를 통해 DockerHub 저장소에 이미지를 올릴 수 있습니다.</p>

<p>​   ​</p>

<h4 id="section-5">이외에도 자주 사용하는 명령어</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker <span class="nb">history
</span>docker inspect
docker cp <span class="o">[</span>PATH]</code></pre></figure>

<p><code class="highlighter-rouge">docker history [container/image]</code> 명령어를 통해 히스토리를 확인할 수 있습니다.
<code class="highlighter-rouge">docker inspect [container/image]</code> 명령어를 통해 상세정보를 확인할 수 있습니다.
<code class="highlighter-rouge">docker cp [PATH]</code> 명령어를 통해 파일을 지정한 경로로 꺼내올 수 있습니다.</p>

<p>​   ​</p>

	  ]]></description>
	</item>

	<item>
	  <title>Docker 간편한 설치부터 실행까지</title>
	  <link>//docker-install</link>
	  <author>Swalloow</author>
	  <pubDate>2017-02-21T19:18:00+09:00</pubDate>
	  <guid>//docker-install</guid>
	  <description><![CDATA[
	     <p>​   ​</p>

<p>Docker는 오픈소스 컨테이너입니다. 기존의 가상머신과 비슷하면서도 훨씬 가벼운 형태라고 볼 수 있습니다. 그렇다면 VMWare, VirtualBox와 같은 기존의 가상머신과 Docker Container가 어떻게 다른지 살펴보겠습니다.</p>

<p><img src="/assets/images/vm-docker.png" alt="vm-docker" /></p>

<p>먼저 기존의 가상머신(Virtual Machine)을 보면 Hypervisor(VMWare, VirtualBox…) 위에 GuestOS가 올라간 형태임을 알 수 있습니다. OS가 올라갔다는 것은 말 그대로 x86 하드웨어가 그대로 가상화 된 것입니다. 가상머신을 설치하고 메모리 영역을 확인해보면 호스트 메모리와 게스트 메모리를 볼 수 있는데, 게스트 메모리를 얼마나 할당할 것인지에 따라 가상머신의 성능이 변하기도 합니다.</p>

<p>반면에 Docker는 Docker Engine 위에 Application이 올라간 것을 볼 수 있습니다. 즉, Docker Engine을 통해 Host OS 위에서 컨테이너가 생성되는 것입니다. 여기서 컨테이너는 리눅스 커널의 <code class="highlighter-rouge">cgroups, namespaces</code> 등의 기능을 사용해 가상공간을 생성할 수 있도록 하는 기능입니다.</p>

<p>​   ​</p>

<h4 id="section">컨테이너가 가상머신보다 뛰어난 점은?</h4>

<p>기본적으로 가상머신을 사용하게 되면 상세 설정을 해주지 않는 한 메모리, CPU 코어, 프로세스 등 각종 성능 손실이 발생합니다. 반면에 컨테이너는 Host OS의 커널은 그대로 사용하고 일부분만 패키징 되기 때문에 용량이 크게 줄어들 뿐만 아니라, 프로세스 영역도 기존의 OS와 공유해서 사용합니다. 정리하자면, <u>컨테이너는 하드웨어를 가상화하는 계층이 없기 때문에 메모리 접근, 파일시스템, 네트워크 속도가 가상 머신에 비해 월등히 빠릅니다</u>.</p>

<p>​   ​</p>

<h4 id="boot2docker">Boot2Docker</h4>

<p>앞서 말했던 것 처럼 Docker는 리눅스 커널의 컨테이너 기능을 기반으로 하기 때문에 Windows나 OS X 환경에서 실행할 수 없습니다. 그래서 이를 지원하기 위해 나온 것이 <strong>Boot2Docker</strong> 입니다. Boot2Docker는 가상머신 안에 리눅스를 설치하고 Docker를 실행하는 방식으로 이를 해결했습니다.</p>

<p>하지만 15년 9월쯤 부터 <strong>boot2docker-cil이 deprecated</strong> 되었습니다. 이제 공식 레퍼런스를 보면 toolbox를 이용하여 설치하는 방법을 권장하고 있으며 기존의 boot2docker에서 이전하는 방법에 대해서도 설명하고 있습니다.</p>

<p>​   ​</p>

<h2 id="os-x-docker-">OS X에서 Docker 설치</h2>

<p>Docker를 설치하는 방법으로는 크게 2가지가 있습니다. 첫번째는 Docker for Mac으로 설치하는 방법이고, 두번째는 Docker Toolbox로 설치하는 방법입니다.</p>

<p>​   ​</p>

<h4 id="docker-for-mac-docker-toolbox-">Docker for Mac과 Docker Toolbox의 차이점은?</h4>

<p>가장 큰 차이점은 사용하는 가상머신이 다르다는 점입니다. Docker Toolbox 같은 경우에는 Boot2Docker에서 사용해왔던 VirtualBox를 그대로 사용합니다. 반면에 Docker for Mac은 <strong>HyperKit</strong> 이라는 macOS를 위한 경량화 가상머신을 사용합니다.</p>

<p><img src="/assets/images/docker-formac.png" alt="docker-formac" /></p>

<p>Docker Toolbox를 사용하는 경우, 위와 같이 <code class="highlighter-rouge">/usr/local/bin</code> 폴더에 docker, docker-compose, docker-machine이 설치됩니다. 그리고 가상화는 VirtualBox를 통해 이루어지게 됩니다.</p>

<p><img src="/assets/images/docker-toolbox.png" alt="docker-toolbox" /></p>

<p>반면에 Docker for Mac은 <code class="highlighter-rouge">Applications</code> 폴더 내에 app으로 관리할 수 있게 됩니다. 그리고 가상화는 오라클의 <strong>VirtualBox</strong> 을 통해 이루어집니다. 따라서, 둘다 설치할 필요가 없습니다.</p>

<p>만일 전부터 Docker를 써왔고, VirtualBox를 꼭 써야한다면, Docker Toolbox를 설치하시면 됩니다. 또는 “나는 App으로 관리하는게 편하다” 라고 한다면 Docker for Mac을 사용하시면 됩니다. 자세한 내용은 다음을 참고하시면 됩니다. <a href="https://docs.docker.com/docker-for-mac/docker-toolbox/">https://docs.docker.com/docker-for-mac/docker-toolbox/</a></p>

<p>만일 둘 다 설치했고, Docker toolbox를 제거하고 싶다면 다음 링크를 참고하시면 됩니다.
<a href="https://docs.docker.com/toolbox/toolbox_install_mac/#how-to-uninstall-toolbox">https://docs.docker.com/toolbox/toolbox_install_mac/#how-to-uninstall-toolbox</a></p>

<p>​   ​</p>

<h2 id="docker-">Docker 실행</h2>

<p>저는 Docker for Mac을 사용하여 설치했습니다.</p>

<p><img src="/assets/images/docker-run.png" alt="docker-run" /></p>

<p>어플리케이션 데몬을 실행시키면 이제 docker 명령어를 사용할 수 있게 됩니다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker version
docker info</code></pre></figure>

<p>이제 한번 테스트 해볼 시간입니다.
아래의 명령어를 통해 nginx 이미지를 만들고 80번 포트에 웹 서버를 띄워 보겠습니다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker run -d -p 80:80 --name webserver nginx</code></pre></figure>

<p><img src="/assets/images/docker-test.png" alt="docker-test" /></p>

<p>실행되고 있는 웹 서버를 중지하고 컨테이너를 삭제해보겠습니다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker ps
docker stop webserver
docker rm -f webserver</code></pre></figure>

<p>아직 이미지는 남아있는 상태입니다. 이미지까지 삭제해줍니다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">docker images
docker rmi nginx</code></pre></figure>

<p>자세한 Docker 사용법이나 명령어는 다음에 정리하도록 하겠습니다.</p>

<p>​   ​</p>

	  ]]></description>
	</item>

	<item>
	  <title>자주 사용하는 리눅스 명령어 정리 (3) - Screen</title>
	  <link>//linux3</link>
	  <author>Swalloow</author>
	  <pubDate>2017-02-18T19:18:00+09:00</pubDate>
	  <guid>//linux3</guid>
	  <description><![CDATA[
	     <p>​   ​</p>

<p>Screen은 여러 프로세스 간에 물리적 콘솔을 다중화하는데 사용할 수있는 전체 화면 소프트웨어 프로그램이다.
하나의 단일 터미널 창 관리자에서 여러 개의 개별 터미널 인스턴스를 열 수 있는 사용자를 제공한다.</p>

<p>사실 다중 터미널이 필요한거라면 tmux나 iTerm이 더 편하다고 생각한다.
하지만, 스크린은 서버에서 백드라운드 데몬을 돌려야 할 때 아주 유용하다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">screen -S pingsession -d -m -L ping localhost</code></pre></figure>

<p>이 명령은 화면에 새로운 세션 (-m)을 만들고, 출력 (-L)을 기록하고, 즉시 분리 (-d) 명령이 실행되도록 지시한다.
로그는 현재 디렉토리의 screenlog.n 에 기록된다.</p>

<p>여기서 n은 화면 세션의 “창” 번호이다. 로깅은 정기적으로 버퍼링되고 플러시되며 로그 파일을 기록 할 수 있다.
화면 세션은 프로세스 제어, 즉 실행중인 데몬 중지 등을 지원한다.
이를 수행하기 위해 화면 세션은 세션 이름 (-S 세션 이름)으로 시작되어야하며 나중에 이름과 함께 종료 될 수 있다.</p>

<p>​   ​</p>

<h2 id="screen--">Screen 명령어 정리</h2>

<ul>
  <li>ctrl + a / d : screen 나갈 때</li>
  <li>ctrl + a / k : screen 죽일 때</li>
  <li>screen -ls : screen 목록 확인</li>
  <li>screen -r “name” : screen 재접속</li>
  <li>screen -S “name” : screen 생성</li>
  <li>~/.screenrc : 설정파일을 확인</li>
</ul>

<p>​   ​</p>

	  ]]></description>
	</item>

	<item>
	  <title>자주 사용하는 리눅스 명령어 정리 (2) - 쉘 스크립트</title>
	  <link>//linux2</link>
	  <author>Swalloow</author>
	  <pubDate>2017-02-16T19:18:00+09:00</pubDate>
	  <guid>//linux2</guid>
	  <description><![CDATA[
	     <p>​   ​</p>

<p>맥북을 사용하면서 가장 좋았던 점은 기본 운영체제가 유닉스 계열이다보니,
모든 것이 커멘드라인으로 해결된다는 점이었다. 특히 쉘 스크립트를 활용하면 간단한 자동화도 구현할 수 있다.
따라서, 이번 포스팅에서는 자동화를 위한 쉘 스크립트 문법을 정리해보려 한다.</p>

<p>​   ​</p>

<h2 id="section">쉘 스크립트란?</h2>

<p>문법에 대해 알기 이전에 쉘 스크립트가 어떤 역할을 하는지 알아야 한다.
기본적으로 우리가 사용하는 운영체제는 하드웨어 제어, CPU 스케줄링 등 많은 역할을 수행한다.
쉘은 운영체제 위에서 다양한 운영 체제 기능과 서비스를 구현하는 인터페이스를 제공하는 프로그램이다.
즉, 사용자와 맞닿아 있기 때문에 우리는 쉘의 명령어를 통해 직접 조작할 수 있는 것이다.</p>

<p>아래는 쉘 스크립트와 관련된 기본 명령어이다.</p>

<ul>
  <li>스크립트 실행 : sh {script.sh}</li>
  <li>스크립트 실행가능 지정 : chmod +x {script.sh}</li>
</ul>

<p>​   ​</p>

<h4 id="section-1">변수의 기본</h4>

<ul>
  <li>변수에 넣는 모든 값은 문자열로 취급한다.</li>
  <li>변수이름은 대소문자 구분, ‘=’ 좌우에는 공백 유지</li>
</ul>

<p>​   ​</p>

<h4 id="section-2">연산자</h4>

<ul>
  <li>OR : <code class="highlighter-rouge">||</code></li>
  <li>AND : <code class="highlighter-rouge">&amp;&amp;</code></li>
  <li>문자열 비교 : “string1”=”string2”</li>
</ul>

<p>​   ​</p>

<h4 id="if-else-">if-else 문</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">if</span> <span class="o">[</span> <span class="k">case</span> <span class="o">]</span>; <span class="k">then
  </span><span class="nb">true
</span><span class="k">else
  </span><span class="nb">false
</span><span class="k">fi</span></code></pre></figure>

<p>​   ​</p>

<h4 id="case-">case 문</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">case</span> <span class="nv">$answer</span> <span class="k">in
  </span>yes<span class="p">)</span>
  	<span class="nb">echo</span> <span class="s2">"yes"</span>
  no<span class="o">)</span>
  	<span class="nb">echo</span> <span class="s2">"no"</span>
<span class="k">esac</span></code></pre></figure>

<p>​   ​</p>

<h4 id="for-in-">for-in 문</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">for </span>fname <span class="k">in</span> <span class="k">$(</span>ls .sh<span class="k">)</span>; <span class="k">do
  </span><span class="nb">echo</span> <span class="s2">"fname"</span>
<span class="k">done</span></code></pre></figure>

<p>​   ​</p>

<h4 id="while-">while 문</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="k">while</span> <span class="o">[</span> 1 <span class="o">]</span>; <span class="k">do
  </span><span class="nb">echo</span> <span class="s2">"fname"</span>
<span class="k">done</span></code></pre></figure>

<p>​</p>

	  ]]></description>
	</item>


</channel>
</rss>
