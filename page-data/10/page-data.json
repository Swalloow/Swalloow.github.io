{"componentChunkName":"component---src-templates-posts-js","path":"/10","result":{"data":{"allContentfulPost":{"edges":[{"node":{"title":"리눅스 시스템 모니터링 명령어 정리","id":"38abc6b0-9a04-58df-8596-85fe34afb5d3","slug":"system-monitoring","publishDate":"March 24, 2017","heroImage":{"id":"f36c235f-3e3e-517d-bd80-697bc6183072","title":"cover-devops","fluid":{"aspectRatio":1.5,"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50 1080w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50&fm=webp 1080w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"12164394-8b44-5e27-92e9-a996808bc19d","childMarkdownRemark":{"id":"d6ca683e-0519-505e-b2af-27047cb2887c","timeToRead":1,"html":"<p>리눅스 시스템 모니터링을 위한 명령어에 대해 정리해보았습니다.</p>\n<br>\n<h2 id=\"프로세스-모니터링-명령어---top\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-%EB%AA%85%EB%A0%B9%EC%96%B4---top\" aria-label=\"프로세스 모니터링 명령어   top permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스 모니터링 명령어 - top</h2>\n<p><img src=\"/assets/images/linux_top.png\" alt=\"top\"></p>\n<p><strong>top</strong> 명령어는 커널을 통하여 관리되는 프로세스들의 정보(메모리 사용률, CPU 사용률, 상태정보 등)를 확인할 수 있는 명령어입니다.\n응용프로그램을 강제로 종료시키고 싶을 때, 실행중인 프로세스를 찾아 <code class=\"language-text\">kill</code> 명령어를 통해 강제종료시킬 수도 있습니다.</p>\n<p>OS X에서는 <code class=\"language-text\">-o</code> 옵션을 통해, 리눅스에서는 <code class=\"language-text\">shift + f</code> 명령어를 통해 프로세스를 key에 따라 정렬할 수 있습니다.</p>\n<br>\n<h2 id=\"시스템-리소스-정보---vmstat-iostat-sar\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EC%A0%95%EB%B3%B4---vmstat-iostat-sar\" aria-label=\"시스템 리소스 정보   vmstat iostat sar permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시스템 리소스 정보 - vmstat, iostat, sar</h2>\n<p><img src=\"/assets/images/linux_vmstat.png\" alt=\"vmstat\"></p>\n<p><strong>vmstat</strong> 명령어는 <em>virtual memory statistics</em> 의 줄임말로 가상메모리 등 다양한 리소스 정보를 제공합니다.\nOS X에서는 <code class=\"language-text\">vm_stat</code> 명령어로, 리눅스에서는 <code class=\"language-text\">vmstat</code> 명령어로 확인하실 수 있습니다.</p>\n<p><img src=\"/assets/images/linux_iostat.png\" alt=\"iostat\"></p>\n<p><strong>iostat</strong> 명령어는 sysstat에서 가장 기본적인 명령어로 CPU 및 디스크 입출력에 대한 기본정보를 제공합니다.</p>\n<p><img src=\"/assets/images/linux_sar.png\" alt=\"sar\"></p>\n<p><strong>sar</strong> 명령어는 시스템 활동 모니터링에 유용합니다.\n특히 <code class=\"language-text\">-r, -f</code> 옵션을 통해 CPU, 메모리 사용률을 날짜, 시간 대 별로 확인할 수 있습니다.</p>\n<br>\n<h2 id=\"linux-sysstat-패키지-설치\" style=\"position:relative;\"><a href=\"#linux-sysstat-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"linux sysstat 패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linux sysstat 패키지 설치</h2>\n<p>CentOS, Ubuntu에서는 앞서 말씀드린 <code class=\"language-text\">sar, vmstat</code> 등의 명령어를 사용하기 위해서 <code class=\"language-text\">sysstat</code> 패키지를 설치해야 합니다.\n아래의 명령어를 통해 설치할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">// CentOS, Ubuntu\n$ yum <span class=\"token function\">install</span> sysstat -y\n$ <span class=\"token function\">apt</span> <span class=\"token function\">install</span> sysstat -y</code></pre></div>\n<p>만일 권한 오류나 명령어를 찾을 수 없다는 오류가 나타난다면 아래의 설정을 통해 해결할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> /etc/default/sysstat\n$ <span class=\"token assign-left variable\">ENABLED</span><span class=\"token operator\">=</span>”true”</code></pre></div>\n<br>","excerpt":"리눅스 시스템 모니터링을 위한 명령어에 대해 정리해보았습니다. 프로세스 모니터링 명령어 - top top top…"}}}},{"node":{"title":"Jupyter에서 Scala로 Spark 사용하는 방법","id":"879c5edc-af79-5354-a513-399c005b86ee","slug":"jupyter-spark","publishDate":"March 22, 2017","heroImage":{"id":"dab22ea8-d54d-52a6-852a-278ba3b19a2b","title":"cover-dataengineering","fluid":{"aspectRatio":1.499531396438613,"src":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=450&h=300&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=900&h=600&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1600&h=1067&q=50 1600w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=450&h=300&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=900&h=600&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1600&h=1067&q=50&fm=webp 1600w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"f064af50-3130-58c7-bd5e-49ce84d97e59","childMarkdownRemark":{"id":"fb7d0e8a-5f23-5f32-a248-cecdc727f5dd","timeToRead":2,"html":"<p>이 글은 평소에 <strong>Jupyter Notebook</strong> 에 익숙해져있는 분들께 유용할 듯 합니다.\nZeppelin Notebook을 설정하는 방법은 <a href=\"http://swalloow.github.io/spark-zeppelin-install\">이전 포스팅</a>을 참고하시면 됩니다.</p>\n<br>\n<h2 id=\"apache-toree\" style=\"position:relative;\"><a href=\"#apache-toree\" aria-label=\"apache toree permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apache Toree</h2>\n<p><img src=\"/assets/images/jupyter-toree.png\" alt=\"Jupyter-Toree\"></p>\n<p><strong>Apache Toree</strong> 는 Jupyter 커널을 통해 Spark에 접속하도록 해주는 아파치 오픈소스 프로젝트입니다.\n기존의 IPython Notebook은 파이썬에 제한되어 있었지만\nJupyter Kernel을 통해 다른 언어까지 확장 가능하도록 바뀌었습니다 (왼쪽 그림 참조).</p>\n<p>여기에서 더 나아가 Apache Toree는 <strong>Toree Kernel</strong> 을 통해 바로 Spark Driver에 연결함으로써,\nJupyter에서 Scala 언어로 Spark Driver/Context를 사용할 수 있게 만들었습니다.</p>\n<p>Toree가 Zeppelin과 다른 점은 <strong>Jupyter protocol</strong> 을 사용할 수 있다는 점 입니다.\n이미 수많은 생태계가 구축되어 있는 Jupyter에서 Spark가 잘 돌아간다면 굳이 Zeppelin을 쓸 필요가 있을까요 (<em>시각화가 어마어마한 강점이긴 합니다</em>).</p>\n<p>GitHub : <a href=\"https://github.com/apache/incubator-toree\">https://github.com/apache/incubator-toree</a></p>\n<br>\n<h2 id=\"jupyter-notebook에-toree-설치하기\" style=\"position:relative;\"><a href=\"#jupyter-notebook%EC%97%90-toree-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-label=\"jupyter notebook에 toree 설치하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jupyter Notebook에 Toree 설치하기</h2>\n<p>Jupyter 노트북 커널 설정하는 방법은 <a href=\"http://swalloow.github.io/jupyter-notebook-kernel\">Jupyter Notebook 다중커널 설정하기</a>를,\nScala와 Spark을 설치하는 방법은 <a href=\"http://swalloow.github.io/spark-zeppelin-install\">OS X에서 Homebrew로 Spark, Zeppelin 설치하기</a>를 참고하시기 바랍니다.</p>\n<p>Toree는 아직 pre 버전만 존재하기 때문에 <code class=\"language-text\">--pre</code> 옵션을 붙여주시거나 파이썬 패키지를 통해 설치해주시면 됩니다.\n설치가 완료되면 jupyter kernel에 toree kernel을 설치해주는 과정이 필요한데 명령어를 통해 이 과정을 자동으로 진행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pip <span class=\"token function\">install</span> https://dist.apache.org/repos/dist/dev/incubator/toree/0.2.0/snapshots/dev1/toree-pip/toree-0.2.0.dev1.tar.gz\n$ jupyter toree <span class=\"token function\">install</span></code></pre></div>\n<p>혹시 <code class=\"language-text\">FileNotFoundError: [Errno 2] No such file or directory: &#39;/usr/local/spark/python/lib&#39;</code>\n이런 오류가 난다면, Spark 경로 환경변수를 읽지 못하는 문제입니다. <strong>Homebrew</strong> 를 통해 설치하셨다면 다음과 같이 환경변수를 등록해주시면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">SPARK_HOME</span><span class=\"token operator\">=</span>/usr/local/Cellar/apache-spark/2.1.0/libexec</code></pre></div>\n<br>\n<h2 id=\"잘-동작하는지-테스트를-해보자\" style=\"position:relative;\"><a href=\"#%EC%9E%98-%EB%8F%99%EC%9E%91%ED%95%98%EB%8A%94%EC%A7%80-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"잘 동작하는지 테스트를 해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>잘 동작하는지 테스트를 해보자</h2>\n<p><img src=\"/assets/images/toree-kernel.png\" alt=\"Toree-Kernel\"></p>\n<p>잘 설치되었다면 <code class=\"language-text\">new</code> 했을 때 <code class=\"language-text\">Apache-Toree Scala</code>가 보이실 겁니다.\n잘 동작하는지 간단한 WordCounter 예제를 실행시켜 보시면 잘 동작하는 것을 확인할 수 있습니다.</p>\n<p><img src=\"/assets/images/toree-tuto.png\" alt=\"Toree-Tuto\"></p>\n<br>\n<h2 id=\"docker를-통해-jupyter-설정하는-방법\" style=\"position:relative;\"><a href=\"#docker%EB%A5%BC-%ED%86%B5%ED%95%B4-jupyter-%EC%84%A4%EC%A0%95%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"docker를 통해 jupyter 설정하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker를 통해 Jupyter 설정하는 방법</h2>\n<p>나는 이 모든 것이 귀찮다! 라면 Docker를 통해 노트북을 실행시키면 됩니다.\n제가 Docker를 통해 Notebook을 사용하지 않는 이유는 딱 한 가지 입니다.\nSpark만 쓰고 싶었는데 기타 등등이 많이 설치되어 있어서 컨테이너 메모리가 무려 <strong>4기가</strong> 나 됩니다...\n그래도 쓰겠다 싶으신 분들은 아래 링크를 참고하시면 됩니다.</p>\n<p><a href=\"https://hub.docker.com/r/jupyter/all-spark-notebook/\">https://hub.docker.com/r/jupyter/all-spark-notebook/</a></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker pull jupyter/all-spark-notebook\n$ docker run -it --rm -p <span class=\"token number\">8888</span>:8888 jupyter/all-spark-notebook</code></pre></div>\n<p>이렇게 실행하고 8888번 포트로 접속하면 노트북을 실행할 수 있습니다.</p>\n<br>","excerpt":"이 글은 평소에 Jupyter Notebook 에 익숙해져있는 분들께 유용할 듯 합니다.\nZeppelin Notebook…"}}}},{"node":{"title":"SSH 프로토콜과 Tunneling 이해하기","id":"be1fecdd-d49e-5a65-a889-c81ed16ca502","slug":"ssh-tunneling","publishDate":"March 20, 2017","heroImage":{"id":"f36c235f-3e3e-517d-bd80-697bc6183072","title":"cover-devops","fluid":{"aspectRatio":1.5,"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50 1080w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50&fm=webp 1080w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"6e667a13-51d5-5a76-84fa-879ab68c2ae1","childMarkdownRemark":{"id":"d2c92ba6-734d-5c6a-aa78-753e72695758","timeToRead":2,"html":"<p>지금까지 아무 생각없이 SSH를 사용하다가 한번 정리해보았습니다.</p>\n<br>\n<h2 id=\"ssh-protocol\" style=\"position:relative;\"><a href=\"#ssh-protocol\" aria-label=\"ssh protocol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SSH Protocol</h2>\n<p>SSH는 Secure Shell의 약자입니다. SSH는 한마디로 정의하면,\n네트워크 상의 다른 컴퓨터에 로그인하거나 원격 시스템에서 명령을 실행하고\n다른 시스템으로 파일을 복사할 수 있도록 해 주는 프로토콜입니다.\nVPN을 구성하는 것보다 가격이 저렴하고 쉽게 연결할 수 있어 많이 사용됩니다.</p>\n<p>MacOS에는 <strong>OpenSSH</strong> 클라이언트와 서버가 내장되어 있기 때문에 바로 사용할 수 있습니다.\nSSH는 <strong>22번 포트</strong> 를 사용하며, 크게 다음의 3가지를 제공합니다.</p>\n<br>\n<h3 id=\"1-authentication\" style=\"position:relative;\"><a href=\"#1-authentication\" aria-label=\"1 authentication permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Authentication</h3>\n<p><img src=\"/assets/images/ssh-key-auth-flow.png\" alt=\"SSH-Auth\"></p>\n<p>SSH는 public key와 private key를 사용하는 비대칭 암호방식을 사용합니다.\n간단히 설명하면, <code class=\"language-text\">public key</code>와 <code class=\"language-text\">private key</code>가 모두 있어야 인증이 되는 방식입니다.\n각자 private key는 외부 유출없이 가지고 있고, public key만 네트워크를 통해 전달합니다.\nSSH는 RSA, DSA 등 다양한 인증 방식을 지원합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ssh-keygen\n$ <span class=\"token function\">cat</span> ~/.ssh/id_rsa.pub</code></pre></div>\n<p><code class=\"language-text\">ssh-keygen</code> 명령어를 통해 ssh 키를 생성하고\n<code class=\"language-text\">~/.ssh/id_rsa.pub</code>에서 public key를 확인할 수 있습니다.</p>\n<br>\n<h3 id=\"2-encryption--integrity\" style=\"position:relative;\"><a href=\"#2-encryption--integrity\" aria-label=\"2 encryption  integrity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Encryption &#x26; Integrity</h3>\n<p>SSH는 네트워크를 통해 전달되는 데이터를 암호화합니다.\n<code class=\"language-text\">3DES, blowfish</code> 등 여러 가지 암호화 방식을 제공하며,\n새로운 암호화 기법을 추가할 수도 있습니다.</p>\n<p>그리고 SSH는 네트워크를 통해 받은 데이터가 변경되지 않았음(무결성)을 보장해줍니다.\n이를 위해 <strong>MAC(Message Authentication Code)</strong> 이라는 알고리즘을 사용합니다.</p>\n<p><img src=\"/assets/images/mac-algo.jpg\" alt=\"MAC-Algo\"></p>\n<p>MAC 알고리즘은 다음과 같이 동작합니다.\nSSH 클라이언트가 서버로 메세지를 보내면,\nMAC 알고리즘을 통해 <code class=\"language-text\">secret key</code>를 입력받아 MAC 코드를 생성합니다.\n그리고, 임의 길이의 암호화 된 메시지와 MAC 코드를 SSH 서버로 보냅니다.</p>\n<p>서버에서는 다시 메세지와 서버의 <code class=\"language-text\">secret key</code>를 조합하여 MAC 코드를 만들고,\n클라이언트로부터 받은 MAC 코드와 비교하여 인증을 진행하게 됩니다.</p>\n<br>\n<h3 id=\"4-compression\" style=\"position:relative;\"><a href=\"#4-compression\" aria-label=\"4 compression permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Compression</h3>\n<p>SSH는 네트워크 상에서 데이터를 전송하고 수신할 때 압축 과정을 거칩니다.\n이를 통해 전송 데이터의 크기를 줄여 네트워크 비용을 낮출 수 있습니다.</p>\n<br>\n<h2 id=\"ssh-tunneling\" style=\"position:relative;\"><a href=\"#ssh-tunneling\" aria-label=\"ssh tunneling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SSH Tunneling</h2>\n<p>SSH Tunneling은 터널을 통해 데이터를 주고받는다 해서 붙여진 이름입니다.\n앞서 얘기했던 것처럼 연결, 통신은 모두 암호화되며 <code class=\"language-text\">SMTP, IMAP</code> 등 여러 가지로 사용될 수 있습니다.</p>\n<p>Direct로 보내면 네트워크 층에서 수 많은 공격을 받을 수 있기 때문에\nSSH를 통해 다른 Application에 연결하는 것이 안전합니다.\nSSH Tunneling에는 다음과 같이 두 가지 방법이 있습니다.</p>\n<br>\n<h3 id=\"local-port-forwarding\" style=\"position:relative;\"><a href=\"#local-port-forwarding\" aria-label=\"local port forwarding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Local port forwarding</h3>\n<p><img src=\"/assets/images/ssh-local.png\" alt=\"SSH-Local\"></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -L port1:host_name:port2 server_name</code></pre></div>\n<p>로컬에서 서버에 있는 MySQL과 SSH 연결을 한다고 가정해보겠습니다.\n<code class=\"language-text\">Local port forwarding</code>은\n로컬에 설치된 MySQL 클라이언트의 3306 포트가\n연결된 SSH Tunnel을 거쳐 서버에 있는 MySQL 서버의 3306 포트와 연결됩니다.\n이를 통해 직접 서버의 데이터베이스에 안전하게 접근할 수 있으며\n요청을 보내서 서로 데이터를 주고 받을 수 있습니다.</p>\n<br>\n<h3 id=\"remote-port-forwarding\" style=\"position:relative;\"><a href=\"#remote-port-forwarding\" aria-label=\"remote port forwarding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Remote port forwarding</h3>\n<p><img src=\"/assets/images/ssh-remote.png\" alt=\"SSH-Remote\"></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -R port1:host_name:port2 server_name</code></pre></div>\n<p>이번에는 로컬에서 파이썬 웹 애플리케이션을 개발 중인데 친구에게 보여주고 싶다고 가정 해보겠습니다.\n아직 공개 IP 주소를 제공하지 않기 때문에 인터넷을 통해 직접 기기에 연결할 수 없을 겁니다.\n라우터에서 NAT를 구성하여 해결할 수 있지만 라우터의 구성을 변경해야하므로 번거롭습니다.\n이럴때 <code class=\"language-text\">Remote port forwarding</code>을 통해 쉽게 해결할 수 있습니다.</p>\n<p>먼저 port1의 서버에서 port2로 로컬 트래픽을 전달하는 SSH 터널을 생성합니다.\n이후 로컬에서 port2의 서버에 연결하면 실제로 SSH 터널을 통해 데이터를 요청하는 것을 확인할 수 있습니다.</p>\n<p>OSI 7계층에서 생각해보면 SSH는 <code class=\"language-text\">Application - Transport - Network</code> 계층에 걸쳐있습니다.\nApplication 계층에서 포트를 연결하면 Transport 계층의 TCP 통신을 통해 전달되고,\nNetwork 계층을 통해 목적지로 이동하게 됩니다.</p>\n<br>","excerpt":"지금까지 아무 생각없이 SSH를 사용하다가 한번 정리해보았습니다. SSH Protocol SSH는 Secure Shell의 약자입니다. SSH…"}}}},{"node":{"title":"빅데이터 처리에 Scala가 필요한 이유","id":"795cadce-4a40-5a62-a2c3-15bbc6f787ac","slug":"scala-for-bigdata","publishDate":"March 17, 2017","heroImage":{"id":"dab22ea8-d54d-52a6-852a-278ba3b19a2b","title":"cover-dataengineering","fluid":{"aspectRatio":1.499531396438613,"src":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=450&h=300&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=900&h=600&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1600&h=1067&q=50 1600w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=450&h=300&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=900&h=600&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1600&h=1067&q=50&fm=webp 1600w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"a22dd3d7-109c-5d37-b360-e3581ff3a188","childMarkdownRemark":{"id":"ee0e0316-13da-5df2-a061-9f89f32f9e5d","timeToRead":4,"html":"<p>StackOverFlow나 Quora를 보면 <strong>Scala has taken over the Big Data world.</strong> 라는 글을 많이 볼 수 있습니다.\n게다가 Spark의 엔진은 Scala로 구현되어 있습니다. 이 포스팅에서는 데이터를 다루는데에 스칼라가 가지는 강점이 무엇인지 알아보고자 합니다.</p>\n<br>\n<h1 id=\"scala가-가지는-강점\" style=\"position:relative;\"><a href=\"#scala%EA%B0%80-%EA%B0%80%EC%A7%80%EB%8A%94-%EA%B0%95%EC%A0%90\" aria-label=\"scala가 가지는 강점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scala가 가지는 강점</h1>\n<h2 id=\"static-typing-type-inference\" style=\"position:relative;\"><a href=\"#static-typing-type-inference\" aria-label=\"static typing type inference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Static Typing, Type Inference</h2>\n<p>스칼라의 <code class=\"language-text\">val</code> 변수는 한번 지정된 값을 바꾸지 않습니다.\n이러한 변수를 <code class=\"language-text\">Immutable variable</code> 이라고 부릅니다. 예를 들면 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello Scala\"</span>\n<span class=\"token builtin\">String</span> <span class=\"token operator\">=</span> Hello Scala\n\n<span class=\"token keyword\">val</span> msg <span class=\"token operator\">=</span> <span class=\"token string\">\"Reassign to val\"</span>\nerror<span class=\"token operator\">:</span> reassignment to <span class=\"token keyword\">val</span></code></pre></div>\n<p>위의 예제를 보면, msg 변수에 문자열을 할당했지만 어디에도 String 이라는 단어는 없습니다.\n스칼라는 알아서 타입을 추론하여 지정해주기 때문입니다.\n따라서, <code class=\"language-text\">val</code> 변수에 재할당을 시도하면 <code class=\"language-text\">reassignment to val</code> 이라는 오류가 발생하게 됩니다.</p>\n<p>이처럼 스칼라는 input 타입을 보고 함수나 출력 값의 타입을 추론해주며 이를 통해 코드를 깔끔하게 유지할 수 있습니다. 또한, 다양하고 많은 데이터가 사용되는 경우 정적변수가 문제를 단순화 해주는 효과가 있습니다.</p>\n<br>\n<h2 id=\"scalable-language\" style=\"position:relative;\"><a href=\"#scalable-language\" aria-label=\"scalable language permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scalable Language</h2>\n<p>기존의 Hadoop 기반의 데이터 인프라는 자바 언어를 통해 MapReduce 연산 그리고 알고리즘을 구현해야했습니다.\n하지만 자바는 코드가 너무 길어 생산성 그리고 가독성이 매우 떨어집니다.</p>\n<p>스칼라는 모든 것들이 일관성있게 그리고 간결하게 구현되도록 설계되었습니다.\n이를 통해 얻을 수 있는 장점은 <strong>\"적은 양의 코드로 방대한 규모의 시스템을 작성할 수 있다\"</strong> 는 것입니다.</p>\n<p>연산자를 예로 들어보겠습니다.\n자바에서는 '==' 와 같은 비교연산자를 제공합니다.\n하지만 비교연산자는 주소값을 비교하기 때문에\nString과 같은 객체를 비교할 때는 <code class=\"language-text\">equal()</code> 메서드를 사용해서 비교해야 했습니다.\n이 또한 스칼라의 Scalable과 거리가 멉니다.\n스칼라에서는 모든 것이 Object이기 때문에 <code class=\"language-text\">==</code> 로 모든 비교가 가능합니다.</p>\n<br>\n<h2 id=\"object-oriented-functional-language\" style=\"position:relative;\"><a href=\"#object-oriented-functional-language\" aria-label=\"object oriented functional language permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Object Oriented, Functional Language</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">y1 = 2x + 5\ny2 = 4(y1) = 4(2x + 5)</code></pre></div>\n<p>함수형 언어를 이해하기 전에 어렸을 때 배웠던 함수식을 떠올려보겠습니다.\n위의 식에서 x는 input, y는 output이 됩니다.\n우리는 어떤 함수에 input을 넣으면 output이 나온다고 이해하고 있습니다.\n그리고 아래의 식처럼 함수를 인자로 넣을 수도 있습니다 (합성함수).\n함수형 언어도 이와 비슷합니다.</p>\n<p>스칼라는 객체지향 프로그래밍과 함수형 프로그래밍을 모두 완벽하게 지원하는 언어입니다.\n스칼라에서는 모든 것이 객체이며 함수가 <code class=\"language-text\">first object</code> 입니다.\n함수를 마치 하나의 값으로 취급하며 이를 변수 또는 파라미터로 넘길 수 있습니다.</p>\n<p>모든 것을 함수로 해결하면 의도하지 않은 동작(Side Effect)이 발생할 일이 없고,\n한번 검증된 함수는 신뢰할 수 있기 때문에 버그가 줄어드는 효과가 있습니다.\n또한, Immutable 변수는 문제를 단순화시켜주기 때문에 데이터 공유, 병렬처리에 강합니다.</p>\n<br>\n<h2 id=\"java와-scala를-비교해보자\" style=\"position:relative;\"><a href=\"#java%EC%99%80-scala%EB%A5%BC-%EB%B9%84%EA%B5%90%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"java와 scala를 비교해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java와 Scala를 비교해보자</h2>\n<p>Scala는 Interactive한 Shell을 제공합니다.\n이렇게 바로 확인할 수 있는 Shell을 통해 데이터의 탐색적 분석이 가능합니다.\nIntelliJ IDEA에서도 <code class=\"language-text\">Worksheet</code>이라는 기능을 통해 사용할 수 있습니다.\n스칼라 개발환경은 <strong>Scala 2.12.1</strong> 이며, IDE는 <strong>IntelliJ IDEA</strong> 를 사용하였습니다.</p>\n<p><img src=\"/assets/images/intellij.png\" alt=\"IntelliJ\"></p>\n<p>간단한 WordCount 예제를 통해 코드를 비교해보곘습니다.</p>\n<h2 id=\"java-hadoop-word-count\" style=\"position:relative;\"><a href=\"#java-hadoop-word-count\" aria-label=\"java hadoop word count permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JAVA Hadoop Word Count</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">//package org.myorg;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>fs</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Path</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>conf</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>mapred</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>apache<span class=\"token punctuation\">.</span>hadoop<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span>*<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">WordCount</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Map</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">MapReduceBase</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Mapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">LongWritable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">IntWritable</span> one <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Text</span> word <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">LongWritable</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Text</span> value<span class=\"token punctuation\">,</span> <span class=\"token class-name\">OutputCollector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">></span></span> output<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Reporter</span> reporter<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">String</span> line <span class=\"token operator\">=</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token class-name\">StringTokenizer</span> tokenizer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringTokenizer</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">hasMoreTokens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tword<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>tokenizer<span class=\"token punctuation\">.</span><span class=\"token function\">nextToken</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\toutput<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> one<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Reduce</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">MapReduceBase</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Reducer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Text</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Text</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">></span></span> values<span class=\"token punctuation\">,</span> <span class=\"token class-name\">OutputCollector</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Text</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">></span></span> output<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Reporter</span> reporter<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t\tsum <span class=\"token operator\">+=</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\toutput<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">JobConf</span> conf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JobConf</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">WordCount</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconf<span class=\"token punctuation\">.</span><span class=\"token function\">setJobName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wordcount\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tconf<span class=\"token punctuation\">.</span><span class=\"token function\">setOutputKeyClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Text</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconf<span class=\"token punctuation\">.</span><span class=\"token function\">setOutputValueClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IntWritable</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tconf<span class=\"token punctuation\">.</span><span class=\"token function\">setMapperClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Map</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//conf.setCombinerClass(Reduce.class);</span>\n\t\tconf<span class=\"token punctuation\">.</span><span class=\"token function\">setReducerClass</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Reduce</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tconf<span class=\"token punctuation\">.</span><span class=\"token function\">setInputFormat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TextInputFormat</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tconf<span class=\"token punctuation\">.</span><span class=\"token function\">setOutputFormat</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">TextOutputFormat</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">FileInputFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">setInputPaths</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Path</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">FileOutputFormat</span><span class=\"token punctuation\">.</span><span class=\"token function\">setOutputPath</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Path</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token class-name\">JobClient</span><span class=\"token punctuation\">.</span><span class=\"token function\">runJob</span><span class=\"token punctuation\">(</span>conf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h2 id=\"scala-spark-word-count\" style=\"position:relative;\"><a href=\"#scala-spark-word-count\" aria-label=\"scala spark word count permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scala Spark Word Count</h2>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">val</span> file <span class=\"token operator\">=</span> spark<span class=\"token punctuation\">.</span>textFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"hdfs://...\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> counts <span class=\"token operator\">=</span> file<span class=\"token punctuation\">.</span>flatMap<span class=\"token punctuation\">(</span>line <span class=\"token keyword\">=></span> line<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span>map<span class=\"token punctuation\">(</span>word <span class=\"token keyword\">=></span> <span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span>reduceByKey<span class=\"token punctuation\">(</span>_ <span class=\"token operator\">+</span> _<span class=\"token punctuation\">)</span>\ncounts<span class=\"token punctuation\">.</span>saveAsTextFile<span class=\"token punctuation\">(</span><span class=\"token string\">\"hdfs://...\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<h2 id=\"정리하자면\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC%ED%95%98%EC%9E%90%EB%A9%B4\" aria-label=\"정리하자면 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리하자면,</h2>\n<ul>\n<li>파이썬과 같이 아주 간결한 문법</li>\n<li>객체지향과 함수형 프로그래밍 모두 가능</li>\n<li>자바와 호환되며 JVM 위에서 실행되기 때문에 좋은 성능</li>\n<li>정적 타입을 지향</li>\n<li>REPL Shell을 활용하여 Scripting</li>\n</ul>\n<br>","excerpt":"StackOverFlow나 Quora를 보면 Scala has taken over the Big Data world…"}}}},{"node":{"title":"GFS, HDFS 그리고 MapReduce","id":"3bda34bf-e581-57bf-aa58-9130c0a3b6b1","slug":"map-reduce","publishDate":"March 14, 2017","heroImage":{"id":"dab22ea8-d54d-52a6-852a-278ba3b19a2b","title":"cover-dataengineering","fluid":{"aspectRatio":1.499531396438613,"src":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=450&h=300&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=900&h=600&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1600&h=1067&q=50 1600w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=450&h=300&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=900&h=600&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1600&h=1067&q=50&fm=webp 1600w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"0c11f5f7-0e00-5786-9808-316f3c842c0f","childMarkdownRemark":{"id":"bbf8d9aa-58a2-57f0-98b1-ee6fd7837dbc","timeToRead":2,"html":"<p>데이터가 급속히 늘어나면서 기존의 방법으로 처리가 힘들어지자,\n빅데이터를 위한 대용량 분산 파일 시스템이 나타나기 시작했습니다.\n여기에서는 GFS, HDFS 그리고 Map Reduce 개념에 대해 정리해보려고 합니다.</p>\n<br>\n<h2 id=\"gfs-google-file-system\" style=\"position:relative;\"><a href=\"#gfs-google-file-system\" aria-label=\"gfs google file system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GFS (Google File System)</h2>\n<p>Google File System은 2003년 논문을 통해 소개되었습니다.\n이전에 구글에서 사용하던 파일 시스템은 Big File 이었는데,\n구글의 데이터가 급격히 늘어남에 따라 핵심 데이터 스토리지와 구글 검색 엔진을 위해\n최적화 된 파일 시스템이 필요하게 된 것 입니다.</p>\n<p><img src=\"/assets/images/GFS.png\" alt=\"Google File System\"></p>\n<p>GFS는 크게 하나의 master node와 여러 개의 slave node로 구성되어 있습니다.\n기능으로 보면 Master, Chunk Server, Client로 이루어져 있습니다.</p>\n<ul>\n<li><strong>Master</strong>: GFS 전체를 관리하고 통제하는 중앙 서버의 역할</li>\n<li><strong>Chunk Server</strong>: 물리적인 서버, 실제 입출력을 처리</li>\n<li><strong>Client</strong>: 파일 입출력을 요청하는 클라이언트 어플리케이션</li>\n</ul>\n<p>수행과정은 다음과 같습니다.\n먼저 Client가 Master에게 파일의 읽기, 쓰기를 요청하게 되면,\nMaster는 Client와 가까운 Chunk Server의 정보를 Client에게 전달합니다.\nClient는 전달받은 Chunk Server와 직접 통신하며 IO 작업을 수행하게 됩니다.</p>\n<p>GFS의 엄청난 강점은 <strong>Failuer Tolerance</strong> 입니다.\n다시 말해서, 물리적으로 서버 중 하나가 고장이 나도 정지하지 않고 잘 돌아가도록 설계되었습니다.\n예를 들어, Chunk Server 중 하나가 고장이 나면 Master는 고장나지 않은 Chunk Server의 정보를 전달하고\nMaster Server가 고장이 나면 다른 서버가 Master를 대체하게 됩니다.\n이러한 이유로 Chunk Server는 가격이 저렴한 범용 컴퓨터들로 구성할 수 있게 되었고, 클러스터 환경에서 잘 동작할 수 있게 되었습니다.</p>\n<br>\n<h2 id=\"mapreduce\" style=\"position:relative;\"><a href=\"#mapreduce\" aria-label=\"mapreduce permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MapReduce</h2>\n<p>Map Reduce는 마찬가지로 2004년 구글의 논문(저자: 구글의 전설 제프 딘)을 통해 소개되었습니다.\n논문의 제목은 <strong>MapReduce: Simplified Data Processing on Large Clusters</strong> 입니다.\n즉, MapReduce는 말 그대로 대용량 분산 클러스터에서 데이터를 간단히 처리하는 방법입니다.</p>\n<p>그는 논문을 통해 2가지 Function을 제시하는데 바로 Map과 Reduce 입니다.\n논문에서 제시한 MapReduce의 예시 수도코드는 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token builtin\">map</span><span class=\"token punctuation\">(</span>String key<span class=\"token punctuation\">,</span> String value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">//</span> key<span class=\"token punctuation\">:</span> document name\n    <span class=\"token operator\">//</span> value<span class=\"token punctuation\">:</span> document contents\n    <span class=\"token keyword\">for</span> each word w <span class=\"token keyword\">in</span> value<span class=\"token punctuation\">:</span>\n        EmitIntermediate<span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">,</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">reduce</span><span class=\"token punctuation\">(</span>String key<span class=\"token punctuation\">,</span> Iterator values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token operator\">//</span> key<span class=\"token punctuation\">:</span> a word\n    <span class=\"token operator\">//</span> values<span class=\"token punctuation\">:</span> a <span class=\"token builtin\">list</span> of counts\n    <span class=\"token builtin\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> each v <span class=\"token keyword\">in</span> values<span class=\"token punctuation\">:</span>\n        result <span class=\"token operator\">+=</span> ParseInt<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n    Emit<span class=\"token punctuation\">(</span>AsString<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>먼저 <strong>Map</strong> 함수는 어떤 key-value를 input으로 받아서 각 단어와 관련 발생 횟수를 출력합니다.\n그리고 <strong>Reduce</strong> 함수는 특정 단어에 대해 생성된 모든 카운트를 합산합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">map(k1, v1) -&gt; list(k2, v2)\nreduce(k2, list(v2)) -&gt; list(v2)</code></pre></div>\n<p><strong>Map</strong> 함수는 key-vale를 읽어서 필터링하거나 다른 값으로 변환시켜주며,\n<strong>Reduce</strong> 함수는 Map을 통해 출력된 리스트에\n새로운 key를 기준으로 Groupping하고 이를 Aggregation한 결과를 출력합니다.</p>\n<p><img src=\"/assets/images/mapreduce.png\" alt=\"MapReduce\"></p>\n<p>MapReduce는 여러 대의 컴퓨터에서 데이터를 처리하는 경우, 병렬처리를 하기 때문에 확장이 쉽습니다.\n스케줄러가 데이터를 분산 배치하면 worker에서 작업을 수행하고 각 중간 결과는 로컬 디스크에 저장되며,\n나중에 Reduce 연산을 할당받으면 중간 결과를 읽어와서 작업을 수행하고 마찬가지로 파일 시스템에 저장합니다.\n위의 그림과 같이 Master 노드에 모든 데이터를 받아서 처리하던 옛날 방식과 통신 처리면에서 확실히 줄어든 것을 알 수 있습니다.</p>\n<p>구글은 MapReduce를 URL 접근빈도, Web-Link Graph를 계산하는데 사용하였고,\n이를 통해 인덱싱, 정렬 등에서 엄청난 성능향상을 보여주었습니다.</p>\n<br>\n<h2 id=\"hdfs-hadoop-distributed-file-system\" style=\"position:relative;\"><a href=\"#hdfs-hadoop-distributed-file-system\" aria-label=\"hdfs hadoop distributed file system permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>HDFS (Hadoop Distributed File System)</h2>\n<p>Hadoop은 2006년 Doug Cutting과 Mike Cafarella가 개발한 분산처리 프레임워크입니다.\n이들은 구글의 GFS를 대체하기 위해 <strong>HDFS</strong> 와 <strong>MapReduce</strong> 를 구현하였습니다.</p>\n<p>GFS가 C++로 구현되었다면, Hadoop은 자바로 개발된 데다가 아파치 재단의 오픈소스로 넘어가면서 인기가 많아졌습니다.\nGFS를 구현한 결과물이기 때문에 크게 달라진 것은 없으나\n<strong>YARN, Hadoop Ecosystem</strong> 등 다른 장점으로 인해 많이 사용됩니다.</p>\n<br>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"http://xpgc.vicp.net/course/svt/TechDoc/storagepaper/gfs-sosp2003.pdf\">논문: The Google File System</a></li>\n<li><a href=\"https://static.googleusercontent.com/media/research.google.com/ko//archive/mapreduce-osdi04.pdf\">논문: MapReduce - Simplified Data Processing on Large Clusters</a></li>\n</ul>\n<br>","excerpt":"…"}}}},{"node":{"title":"OS X에서 Homebrew로 Spark, Zeppelin 설치하기","id":"ec4cd801-966b-58d1-b29f-642aa46efc80","slug":"spark-zeppelin-install","publishDate":"March 13, 2017","heroImage":{"id":"dab22ea8-d54d-52a6-852a-278ba3b19a2b","title":"cover-dataengineering","fluid":{"aspectRatio":1.499531396438613,"src":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=450&h=300&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=900&h=600&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1600&h=1067&q=50 1600w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=450&h=300&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=900&h=600&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1600&h=1067&q=50&fm=webp 1600w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"f45248c6-9caf-5a42-8dac-73586e202581","childMarkdownRemark":{"id":"1bb823f3-0f55-5944-a351-ca8c729d11bf","timeToRead":2,"html":"<blockquote>\n<p><strong>Apache Spark</strong> is a fast and general engine for large-scale data processing.\n<strong>Zeppelin</strong>, a web-based notebook that enables interactive data analytics.\nYou can make beautiful data-driven, interactive and collaborative documents with SQL, Scala and more.</p>\n</blockquote>\n<p>공식 문서에 나와있는 소개 글처럼 Spark는 대용량 데이터 처리를 위한 범용 엔진입니다.\n얼마 전까지는 <strong>범용적 목적의 분산 고성능 클러스터링 플랫폼</strong> 이라고 설명했는데 최근에 쉽게 다가가기 위해 바꾼듯 합니다.</p>\n<p>그리고 Zeppelin은 데이터 분석을 위한 웹 기반의 노트북입니다.\nZeppelin은 작년 말부터 Apache-Top Level project로 승격하면서 인기가 높아지고 있습니다.\nZeppelin이 Jupyter Notebook과 다른 점은 빅데이터 처리를 위해 Spark 등 다양한 아파치 프로젝트를 지원하고,\nJavascript 기반의 데이터 시각화가 내장되어 있어 편리합니다.</p>\n<br>\n<h2 id=\"spark-install\" style=\"position:relative;\"><a href=\"#spark-install\" aria-label=\"spark install permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Spark Install</h2>\n<p>Spark는 Scala로 구현되어 있지만 SDK를 통해 Java, Python API 또한 지원합니다.\n그리고 빅데이터 플랫폼으로 Hadoop, AWS S3, Cassandra 등 다양한 저장소를 지원합니다.\n만약 Hadoop이 필요없다면 홈페이지에서 Hadoop이 제외된 바이너리 파일로 설치하시면 됩니다.\n여기에서는 간단하게 OS X의 Homebrew를 통해 설치하도록 하겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew <span class=\"token function\">install</span> scala\n$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">SCALA_HOME</span><span class=\"token operator\">=</span>/usr/local/bin/scala\n$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$SCALA_HOME</span>/bin</code></pre></div>\n<p>먼저 스칼라를 설치하고 환경변수를 저장합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew <span class=\"token function\">install</span> apache-spark\n$ spark-shell</code></pre></div>\n<p>그리고 Spark을 설치한 다음, <code class=\"language-text\">spark-shell</code> 명령을 통해 실행시키면 됩니다.</p>\n<p><img src=\"/assets/images/spark-shell.png\" alt=\"spark-shell\"></p>\n<p><a href=\"http://172.30.105.117:4040\">http://172.30.105.117:4040</a> 주소로 접속하면 Spark UI를 확인할 수 있습니다.</p>\n<p><img src=\"/assets/images/spark-ui.png\" alt=\"spark-ui\"></p>\n<br>\n<h2 id=\"zeppelin-install\" style=\"position:relative;\"><a href=\"#zeppelin-install\" aria-label=\"zeppelin install permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Zeppelin Install</h2>\n<p>Zeppelin은 GitHub 저장소를 clone하여 설치하는 방법과 홈페이지에서 다운받는 방법이 있습니다.\n여기에서는 위와 마찬가지로 Homebrew를 통해 설치해보려 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ brew <span class=\"token function\">install</span> apache-zeppelin\n$ /usr/local/Cellar/apache-zeppelin/0.7.0/bin/zeppelin-daemon.sh start\n$ /usr/local/Cellar/apache-zeppelin/0.7.0/bin/zeppelin-daemon.sh stop</code></pre></div>\n<p>brew 명령어로 apache-zeppelin을 설치하고\n스크립트를 실행하면 <a href=\"localhost:8080\">localhost:8080</a> 포트에서 Zeppelin을 사용할 수 있게 됩니다.\n명령어가 너무 길다보니 <code class=\"language-text\">~/.zshrc</code>에 등록해서 사용하면 좀 편리합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">vi</span> ~/.zshrc\n$ <span class=\"token builtin class-name\">alias</span> zeppelin-start <span class=\"token operator\">=</span> <span class=\"token string\">\"/usr/.../bin/zeppelin-daemon.sh start\"</span>\n$ <span class=\"token builtin class-name\">alias</span> zeppelin-stop <span class=\"token operator\">=</span> <span class=\"token string\">\"/usr/.../bin/zeppelin-daemon.sh stop\"</span>\n$ <span class=\"token builtin class-name\">source</span> ~/.zshrc</code></pre></div>\n<p>위와 같이 alias로 등록해주면 앞으로 <code class=\"language-text\">zeppelin-start</code> 명령어를 통해 실행할 수 있게 됩니다.\n자세한 환경설정은 <a href=\"https://zeppelin.apache.org/\">Zeppelin 홈페이지</a>에서 확인하실 수 있습니다.</p>\n<br>","excerpt":"Apache Spark is a fast and general engine for large-scale data processing…"}}}}]}},"pageContext":{"basePath":"","paginationPath":"","pageNumber":9,"humanPageNumber":10,"skip":55,"limit":6,"numberOfPages":15,"previousPagePath":"/9","nextPagePath":"/11"}}}