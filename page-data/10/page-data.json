{"componentChunkName":"component---src-templates-posts-js","path":"/10","result":{"data":{"allContentfulPost":{"edges":[{"node":{"title":"Docker와 Gitlab CI를 활용한 빌드, 테스트 자동화","id":"621294a0-8d52-55c7-8faf-4ec046187c06","slug":"gitlabci-docker","publishDate":"March 31, 2017","heroImage":{"id":"f36c235f-3e3e-517d-bd80-697bc6183072","title":"cover-devops","fluid":{"aspectRatio":1.5,"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50 1080w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50&fm=webp 1080w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"8113e868-69c3-58fb-8823-a90d89e5d7aa","childMarkdownRemark":{"id":"89ad52b7-f054-5de5-ba3f-e321a1e1ff2f","timeToRead":2,"html":"<p>Gitlab은 설치형 GitHub이라고 이해하시면 편합니다.\n무료로 private repository와 CI 서버를 제공해줍니다.\n심지어 Docker Registry도 무료로 제공하고 있습니다.\n아직 많은 분들이 Gitlab CI의 여러 장점들을 잘 모르시는 것 같아 정리해보았습니다.</p>\n<br>\n<h2 id=\"gitlab-ci\" style=\"position:relative;\"><a href=\"#gitlab-ci\" aria-label=\"gitlab ci permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gitlab CI</h2>\n<p>Gitlab CI는 Gitlab에서 무료로 제공하는 CI 툴 입니다.\nGitlab과 완벽하게 연동되며 CI를 위해 <strong>CI linter, pipeline, cycle analytics</strong> 등 다양한 서비스를 제공합니다.</p>\n<p><img src=\"/assets/images/gitlab-ci.png\" alt=\"Gitlab-CI\"></p>\n<p>travis, circle CI와 마찬가지로 Gitlab CI는 <code class=\"language-text\">gitlab-ci.yml</code> 파일로 설정할 수 있습니다.\nGitlab은 DigitalOcean과 제휴하여 CI 서버(Runner)를 따로 제공합니다.\n따라서 <code class=\"language-text\">Runner</code>에 job을 할당하여 돌아가도록 설정할 수 있습니다.</p>\n<p><img src=\"/assets/images/gitlab-pipe.png\" alt=\"Gitlab-Pipe\"></p>\n<p>그리고 Runner는 <strong>Docker 컨테이너</strong> 를 기반으로 돌아갑니다.\nGitlab CI를 실행해보면 처음에 Ruby 이미지를 받아와서 컨테이너를 실행시키는 것을 볼 수 있습니다.\n따라서, <strong>Base Image를 내 어플리케이션 이미지로 바꾸면 빌드 및 테스트 속도가 빠르게 향상됩니다</strong>.</p>\n<br>\n<h2 id=\"gitlab-registry\" style=\"position:relative;\"><a href=\"#gitlab-registry\" aria-label=\"gitlab registry permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Gitlab Registry</h2>\n<p><img src=\"/assets/images/gitlab-registry.png\" alt=\"Gitlab-Registry\"></p>\n<p>Docker 친화적인 Gitlab은 Docker Registry도 무료로 제공해줍니다.\n<code class=\"language-text\">Gitlab Registry</code> 탭에 들어가면 Docker Registry의 주소가 적혀있고 친절하게 명령어까지 써있습니다.</p>\n<p>아마 많은 분들이 DockerHub를 결제하거나, AWS S3를 이용하여 Docker Registry를 구축하셨을 겁니다. 하지만 Gitlab에서는 그럴 필요가 없습니다.</p>\n<br>\n<h2 id=\"docker-with-gitlab-ci\" style=\"position:relative;\"><a href=\"#docker-with-gitlab-ci\" aria-label=\"docker with gitlab ci permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker with Gitlab CI</h2>\n<p>gitlab-ci 설정파일은 대략 다음과 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> gitlab<span class=\"token punctuation\">-</span>registry\n<span class=\"token key atrule\">stages</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> build\n  <span class=\"token punctuation\">-</span> test\n  <span class=\"token punctuation\">-</span> deploy\n\n<span class=\"token key atrule\">job-build</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> build\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> pip install <span class=\"token punctuation\">-</span>r requirements.txt\n  <span class=\"token punctuation\">-</span> python <span class=\"token punctuation\">-</span>m py_compile run.py\n\n<span class=\"token key atrule\">job-test</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> test\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> pytest <span class=\"token punctuation\">-</span><span class=\"token punctuation\">-</span>pep8 <span class=\"token punctuation\">-</span>m pep8 backend/\n\n<span class=\"token key atrule\">job-deploy</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">stage</span><span class=\"token punctuation\">:</span> deploy\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span>\n  <span class=\"token punctuation\">-</span> deployment</code></pre></div>\n<p>Gitlab CI와 Docker를 활용한 빌드 테스트 자동화는 위의 그림과 같이 이루어집니다.</p>\n<p><img src=\"/assets/images/ci-process.png\" alt=\"CI\"></p>\n<ol>\n<li>사용자가 Gitlab 저장소에 push를 하면, Gitlab CI Runner로 전달됩니다.</li>\n<li>Gitlab CI는 Gitlab Registry로부터 Docker 이미지를 받아옵니다. Docker 이미지에는 어플리케이션 환경이 설정되어 있습니다.</li>\n<li>Docker 컨테이너가 실행되면 첫번째 job에 정의된 대로 필요한 패키지를 설치하고 빌드를 수행합니다.</li>\n<li>빌드가 통과되면 두번째 job에 정의된 대로 테스트를 수행합니다.</li>\n<li>테스트가 통과되면 세번째 job에 정의된 대로 배포 과정을 수행합니다.</li>\n<li>각 과정은 모두 Slack 알림으로 확인할 수 있습니다.</li>\n</ol>\n<br>\n<p><img src=\"/assets/images/gitlab-pipeline.png\" alt=\"Gitlab\"></p>\n<p>위와 같이 모든 과정을 <code class=\"language-text\">Gitlab Pipeline</code>을 통해 확인하실 수 있습니다.</p>\n<p>Gitlab의 단점이라면 Community 버전의 서버가 조금 불안정하다는 점입니다.\n물론 설치형 Gitlab을 사용하신다면 이런 단점마저 존재하지 않습니다.\n소규모의 팀이라면 충분히 도입을 검토해볼만 하다고 생각합니다.</p>\n<br>","excerpt":"Gitlab은 설치형 GitHub이라고 이해하시면 편합니다.\n무료로 private repository와 CI…"}}}},{"node":{"title":"올바른 Dockerfile 작성을 위한 가이드라인","id":"fcf62a01-b26b-5b75-9e43-760f68050651","slug":"dockerfile-ignore","publishDate":"March 28, 2017","heroImage":{"id":"f36c235f-3e3e-517d-bd80-697bc6183072","title":"cover-devops","fluid":{"aspectRatio":1.5,"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50 1080w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50&fm=webp 1080w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"6f0c74ad-4670-5bde-b044-011f12cb6259","childMarkdownRemark":{"id":"ce177020-c4ad-5b7f-82ec-384c641527f3","timeToRead":4,"html":"<p>Docker가 처음이라면, 이전 포스팅을 참고하시기 바랍니다.</p>\n<ul>\n<li><a href=\"https://swalloow.github.io/docker-install\">Docker 간편한 설치부터 실행까지</a></li>\n<li><a href=\"https://swalloow.github.io/docker-command\">Docker, DockerHub 명령어 정리</a></li>\n<li><a href=\"https://swalloow.github.io/dockerfile\">파이썬을 위한 Dockerfile 작성하기</a></li>\n<li><a href=\"https://swalloow.github.io/dockerfile-ignore\">올바른 Dockerfile 작성은 위한 가이드라인</a></li>\n</ul>\n<br>\n<h2 id=\"dockerfile\" style=\"position:relative;\"><a href=\"#dockerfile\" aria-label=\"dockerfile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dockerfile</h2>\n<p>Dockerfile은 일종의 이미지 설정파일입니다.\n생긴 모양새는 쉘 스크립트와 유사하지만 자체의 문법을 가지고 있습니다.\n이렇게 작성된 Dockerfile은 <code class=\"language-text\">build</code> 명령어를 통해 이미지를 생성할 수 있습니다.</p>\n<p>이 포스팅에서는 Dockerfile 레퍼런스에 나와 있는 가이드라인을 정리해보도록 하겠습니다.\n<a href=\"https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/\">https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/</a>에 자세한 내용이 설명되어 있습니다.</p>\n<br>\n<h2 id=\"컨테이너는-일시적이어야-한다\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EB%8A%94-%EC%9D%BC%EC%8B%9C%EC%A0%81%EC%9D%B4%EC%96%B4%EC%95%BC-%ED%95%9C%EB%8B%A4\" aria-label=\"컨테이너는 일시적이어야 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너는 일시적이어야 한다</h2>\n<p>일시적이라는 말은 가능한 최소한의 설정 및 구성으로 이루어져있어야 한다는 것을 의미합니다.\n이에 대한 내용은 <a href=\"https://12factor.net/\">Twelve Factors Application</a>을 참고하시면 좋습니다.</p>\n<br>\n<h2 id=\"dockerignore을-활용하자\" style=\"position:relative;\"><a href=\"#dockerignore%EC%9D%84-%ED%99%9C%EC%9A%A9%ED%95%98%EC%9E%90\" aria-label=\"dockerignore을 활용하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>.dockerignore을 활용하자</h2>\n<p>대부분의 경우 각 Docker 파일을 빈 디렉토리에 저장하는 것이 가장 좋습니다.\n그런 다음 Dockerfile을 빌드하는 데 필요한 파일만 해당 디렉토리에 추가하시면 됩니다.\n빌드의 성능을 높이려면 해당 디렉토리에 <code class=\"language-text\">.dockerignore</code> 파일을 추가하여 파일 및 디렉토리를 제외 할 수 있습니다.\n<code class=\"language-text\">.dockerignore</code> 파일은 <code class=\"language-text\">.gitignore</code> 파일과 유사하게 동작한다고 보시면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">*.md\n!README.md</code></pre></div>\n<p>위와 같은 <code class=\"language-text\">.dockerignore</code> 파일은 <em>README.md</em> 파일을 제외한 모든 마크다운 파일을 제외시킵니다. 이런식으로 원하지 않는 파일 및 디렉토리를 제외시켜 이미지의 용량을 줄일 수 있습니다.</p>\n<br>\n<h2 id=\"불필요한-패키지를-설치하지-말자\" style=\"position:relative;\"><a href=\"#%EB%B6%88%ED%95%84%EC%9A%94%ED%95%9C-%ED%8C%A8%ED%82%A4%EC%A7%80%EB%A5%BC-%EC%84%A4%EC%B9%98%ED%95%98%EC%A7%80-%EB%A7%90%EC%9E%90\" aria-label=\"불필요한 패키지를 설치하지 말자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>불필요한 패키지를 설치하지 말자</h2>\n<p>복잡성, 의존성, 파일 크기 및 빌드 시간을 줄이기 위해서는 불필요한 패키지를 설치하지 말아야 합니다.\n예를 들어, 데이터베이스 이미지에 텍스트 편집기를 포함시킨다거나 하는 일은 없어야 합니다.</p>\n<br>\n<h2 id=\"컨테이너는-오직-하나의-관심사만-갖는다\" style=\"position:relative;\"><a href=\"#%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88%EB%8A%94-%EC%98%A4%EC%A7%81-%ED%95%98%EB%82%98%EC%9D%98-%EA%B4%80%EC%8B%AC%EC%82%AC%EB%A7%8C-%EA%B0%96%EB%8A%94%EB%8B%A4\" aria-label=\"컨테이너는 오직 하나의 관심사만 갖는다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>컨테이너는 오직 하나의 관심사만 갖는다</h2>\n<p>애플리케이션을 여러 컨테이너로 분리하면 컨테이너를 확장하고 재사용하는 것이 훨씬 쉬워집니다.\n예를 들어, 일반적인 어플리케이션은 웹 어플리케이션, 데이터베이스, 인메모리-캐시와 같이 세 개의 컨테이너로 구성 될 수 있습니다.</p>\n<p><strong>컨테이너 당 하나의 프로세스</strong> 가 있어야한다는 말을 들어 보셨을 겁니다.\n하지만, 언제나 컨테이너 당 하나의 운영 체제 프로세스만 있어야 하는 것은 아닙니다.\n컨테이너가 init 프로세스로 생성 될 수 있다는 사실 외에도 일부 프로그램은 자체적으로 추가 프로세스를 생성 할 수 있습니다.\n예를 들어 Celery는 여러 작업자 프로세스를 생성하거나 Apache 스스로 요청에 따른 프로세스를 생성 할 수 있습니다.\n컨테이너를 깔끔한 모듈 형식으로 유지하기 위해 신중히 선택해야 합니다.\n컨테이너에 서로 의존성이 생기는 경우 Docker 컨테이너 네트워크를 사용하여 서로 통신 할 수 있습니다.</p>\n<br>\n<h2 id=\"레이어의-수를-최소화하자\" style=\"position:relative;\"><a href=\"#%EB%A0%88%EC%9D%B4%EC%96%B4%EC%9D%98-%EC%88%98%EB%A5%BC-%EC%B5%9C%EC%86%8C%ED%99%94%ED%95%98%EC%9E%90\" aria-label=\"레이어의 수를 최소화하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>레이어의 수를 최소화하자</h2>\n<p>사용하는 레이어의 수에 대해 전략적이고 신중해야합니다.\n장기적인 관점에서 보았을 때 유지보수를 위해서는 레이어의 수를 최소화하는 것이 현명한 선택이 될 수 있습니다.</p>\n<br>\n<h2 id=\"줄바꿈을-사용하여-정렬하자\" style=\"position:relative;\"><a href=\"#%EC%A4%84%EB%B0%94%EA%BF%88%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%A0%95%EB%A0%AC%ED%95%98%EC%9E%90\" aria-label=\"줄바꿈을 사용하여 정렬하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>줄바꿈을 사용하여 정렬하자</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">RUN apt-get update &amp;&amp; apt-get install -y \\\n  bzr \\\n  cvs \\\n  git</code></pre></div>\n<p>위와 같이 줄바꿈을 사용하면, 패키지의 중복을 피하고 목록을 훨씬 쉽게 업데이트 할 수 있습니다.\n백 슬래시 (<code class=\"language-text\">\\</code>) 앞에 공백을 추가하면 가독성을 높이는 데에 도움이됩니다.</p>\n<br>\n<h2 id=\"캐시를-활용하여-빌드하자\" style=\"position:relative;\"><a href=\"#%EC%BA%90%EC%8B%9C%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%EB%B9%8C%EB%93%9C%ED%95%98%EC%9E%90\" aria-label=\"캐시를 활용하여 빌드하자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>캐시를 활용하여 빌드하자</h2>\n<p>이미지를 작성하는 과정에서 Docker는 지정한 순서대로 Dockerfile을 단계 별로 실행합니다.\n각 명령을 실행할 때 Docker는 매번 새로운 이미지를 만드는 대신 캐시에서 기존 이미지를 찾아 재사용 할 수 있습니다.\n캐시를 전혀 사용하지 않으려는 경우 docker 빌드 명령에서 <code class=\"language-text\">--no-cache = true</code> 옵션을 사용하시면 됩니다.</p>\n<p>Docker가 캐시를 사용하게하려면 일치하는 이미지를 찾을 때와 그렇지 않을 때를 이해하는 것이 매우 중요합니다.\nDocker cache의 기본 규칙은 다음과 같습니다.</p>\n<ul>\n<li>이미 캐시에 있는 기본 이미지로 시작하여 다음 명령어가 해당 기본 이미지에서 파생된 모든 하위 이미지와 비교되어 그 중 하나가 정확히 동일한 명령어를 사용하여 빌드되었는지 확인합니다. 그렇지 않으면 캐시가 무효화됩니다.</li>\n<li><code class=\"language-text\">ADD, COPY</code> 명령을 제외하고 캐시 검사는 컨테이너의 파일을보고 캐시 일치를 판별하지 않습니다. 예를 들어 <code class=\"language-text\">RUN apt-get -y update</code> 명령을 처리 할 때 컨테이너에서 업데이트 된 파일은 캐시 히트가 있는지 여부를 확인하기 위해 검사되지 않습니다. 이 경우 명령 문자열 자체만 일치하는지 확인합니다.</li>\n<li>캐시가 무효화되면 이후의 모든 Dockerfile 명령은 새로운 이미지를 생성하고 캐시는 사용되지 않습니다.</li>\n</ul>\n<br>","excerpt":"Docker가 처음이라면, 이전 포스팅을 참고하시기 바랍니다. Docker 간편한 설치부터 실행까지 Docker, DockerHub…"}}}},{"node":{"title":"파이썬을 위한 Dockerfile 작성하기","id":"f8a15b46-cef3-5743-a515-4fa97dc12bd1","slug":"dockerfile","publishDate":"March 27, 2017","heroImage":{"id":"f36c235f-3e3e-517d-bd80-697bc6183072","title":"cover-devops","fluid":{"aspectRatio":1.5,"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50 1080w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50&fm=webp 1080w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"e8608c91-8212-567a-9345-3d7665aec585","childMarkdownRemark":{"id":"2bb4e95f-281c-528f-b4e9-05397e7fb772","timeToRead":1,"html":"<p>Docker가 처음이라면, 이전 포스팅을 참고하시기 바랍니다.</p>\n<ul>\n<li><a href=\"https://swalloow.github.io/docker-install\">Docker 간편한 설치부터 실행까지</a></li>\n<li><a href=\"https://swalloow.github.io/docker-command\">Docker, DockerHub 명령어 정리</a></li>\n<li><a href=\"https://swalloow.github.io/dockerfile\">파이썬을 위한 Dockerfile 작성하기</a></li>\n</ul>\n<br>\n<h3 id=\"flask-application\" style=\"position:relative;\"><a href=\"#flask-application\" aria-label=\"flask application permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Flask Application</h3>\n<p>Dockerfile은 일종의 이미지 설정파일입니다. <code class=\"language-text\">build</code> 명령어를 통해 이미지를 생성할 수 있습니다.\n파이썬 웹 어플리케이션을 Docker로 실행시키는 예제를 통해 천천히 정리해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">From flask <span class=\"token keyword\">import</span> Flask\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\n<span class=\"token decorator annotation punctuation\">@app<span class=\"token punctuation\">.</span>route</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello_world</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello, world!'</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span>debug<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span>host<span class=\"token operator\">=</span><span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>먼저 위와 같이 간단한 플라스크 웹 어플리케이션을 작성합니다.\n필요한 패키지는 requirements.txt로 관리합니다.\n<code class=\"language-text\">pip freeze &gt; requirements.txt</code> 명령어를 통해 파일을 생성할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Flask==0.12</code></pre></div>\n<br>\n<h3 id=\"dockerfile-작성하기\" style=\"position:relative;\"><a href=\"#dockerfile-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0\" aria-label=\"dockerfile 작성하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dockerfile 작성하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">FROM ubuntu:latest\nMAINTAINER your_name &quot;email@gmail.com&quot;\nRUN apt-get update -y\nRUN apt-get install -y python-pip python-dev build-essential\nCOPY . /app\nWORKDIR /app\nRUN pip install -r requirements.txt\nENTRYPOINT [&quot;python&quot;]\nCMD [&quot;app.py&quot;]</code></pre></div>\n<p>위와 같이 Dockerfile을 작성하시면 됩니다.\n간단히 설명하자면, ubuntu 이미지를 받아와서 파이썬 환경설정을 하고\n현재 경로에 있는 폴더를 복사해서 파이썬 패키지를 설치하고 앱을 실행시키는 이미지입니다.</p>\n<br>\n<h3 id=\"dockerfile-빌드-및-실행하기\" style=\"position:relative;\"><a href=\"#dockerfile-%EB%B9%8C%EB%93%9C-%EB%B0%8F-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0\" aria-label=\"dockerfile 빌드 및 실행하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Dockerfile 빌드 및 실행하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker build -t flask-application:latest <span class=\"token builtin class-name\">.</span>\n$ docker run -d -p <span class=\"token number\">5000</span>:5000 flask-application</code></pre></div>\n<p><code class=\"language-text\">docker build [name]</code> 명령어를 통해 이미지를 빌드합니다.\n그리고 <code class=\"language-text\">docker run [image]</code> 명령어를 통해 컨테이너를 실행시킵니다.\n<code class=\"language-text\">-p</code> 옵션은 포트를 지정하며, <code class=\"language-text\">-d</code> 옵션은 백그라운드로 실행시키는 옵션입니다.\n5000번 포트를 확인해보면 플라스크 어플리케이션이 실행된 것을 확인할 수 있습니다.</p>\n<br>","excerpt":"Docker가 처음이라면, 이전 포스팅을 참고하시기 바랍니다. Docker 간편한 설치부터 실행까지 Docker, DockerHub…"}}}},{"node":{"title":"폴리글랏 프로그래밍 후기","id":"e09f3beb-acfc-5fcc-ba67-01c19d6eba00","slug":"polyglot-programming","publishDate":"March 25, 2017","heroImage":{"id":"1faaada3-e12b-5548-8532-08b7c04dc7eb","title":"cover-personal","fluid":{"aspectRatio":1.694915254237288,"src":"//images.ctfassets.net/tushy4jlcik7/3ltdJp06NzCExAWz9OF8Ak/d8ca530c80e7c79a7bd7e4c396c0ae00/cover_personal.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/3ltdJp06NzCExAWz9OF8Ak/d8ca530c80e7c79a7bd7e4c396c0ae00/cover_personal.jpg?w=450&h=266&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/3ltdJp06NzCExAWz9OF8Ak/d8ca530c80e7c79a7bd7e4c396c0ae00/cover_personal.jpg?w=900&h=531&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/3ltdJp06NzCExAWz9OF8Ak/d8ca530c80e7c79a7bd7e4c396c0ae00/cover_personal.jpg?w=1400&h=826&q=50 1400w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/3ltdJp06NzCExAWz9OF8Ak/d8ca530c80e7c79a7bd7e4c396c0ae00/cover_personal.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/3ltdJp06NzCExAWz9OF8Ak/d8ca530c80e7c79a7bd7e4c396c0ae00/cover_personal.jpg?w=450&h=266&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/3ltdJp06NzCExAWz9OF8Ak/d8ca530c80e7c79a7bd7e4c396c0ae00/cover_personal.jpg?w=900&h=531&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/3ltdJp06NzCExAWz9OF8Ak/d8ca530c80e7c79a7bd7e4c396c0ae00/cover_personal.jpg?w=1400&h=826&q=50&fm=webp 1400w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/3ltdJp06NzCExAWz9OF8Ak/d8ca530c80e7c79a7bd7e4c396c0ae00/cover_personal.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"1edac4d1-236b-507c-a6a2-eb5324b9328b","childMarkdownRemark":{"id":"b09ae964-4dcf-5892-87d6-2f265832e89e","timeToRead":1,"html":"<p>임백준 작가님의 <strong>폴리글랏 프로그래밍</strong> 을 읽고 핵심내용만 간략하게 정리해보려고 한다.\n시대의 흐름에 따라 재미있게 설명해주기 때문에, 킬링타임 용으로 가볍게 읽기 좋은 책인 것 같다.</p>\n<ul>\n<li>모든 언어의 발전은 추상수준을 상승시켜서 프로그래머가 작성해야 하는 코드의 분량을 줄이는 방향으로 움직인다. (파이썬, 루비가 대표적인 예)</li>\n<li>한 사람이 여러 명의 배우자와 함께 살아가는 것을 <code class=\"language-text\">폴리가미(polygamy)</code> 라고 한다. 이와 비슷하게 여러 언어를 사용하는 것을 <code class=\"language-text\">폴리글랏(polyglot)</code> 이라고 한다.</li>\n<li>사람들은 C언어가 어느 날 갑자기 새롭게 만들어진 언어라고 착각하는 경향이 있다. 하지만 C는 B라는 더 작은 언어로부터 조금씩 성장해서 만들어진 언어다.</li>\n<li>프로그래밍 언어의 구체적인 모습을 떠나서 언어를 개발하는 과정 자체가 공통적인 패턴을 가지고 있다. 우리는 이 본질적인 패턴에 집중해야 한다. 또한, 모든 언어는 나타나게 된 배경이 있다.</li>\n<li>자바가 가진 문제점은 복잡성을 해결하기 위해 수많은 오픈소스 라이브러리를 만들었다는 것이다. 이 때문에 불필요한 코드가 많아 생산성이 떨어지고, 부자연스러운 확장이 이루어진다. 자바는 이미 정점을 지났다. 더 이상 간단해지거나 의미있는 발전을 할 수 없는 언어이다.</li>\n<li>최근 마이크로 아키텍쳐, 멀티코어, 분산처리 등의 복잡한 환경을 커버할 수 있는 언어로 스칼라를 소개한다.</li>\n</ul>\n<p>앞으로 프로그래머는 어느 하나의 언어에 안주할 수 없다.\n폴리그랏 프로그래밍 시대에는 패러다임을 달리하는 여러 개의 언어를 자유롭게 구사하지 않으면 살아남기 힘들다.\n따라서 앞으로 필요에 따라 언어를 빨리 습득하는 능력 또한 중요하다.</p>\n<br>","excerpt":"…"}}}},{"node":{"title":"리눅스 시스템 모니터링 명령어 정리","id":"38abc6b0-9a04-58df-8596-85fe34afb5d3","slug":"system-monitoring","publishDate":"March 24, 2017","heroImage":{"id":"f36c235f-3e3e-517d-bd80-697bc6183072","title":"cover-devops","fluid":{"aspectRatio":1.5,"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50 1080w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50&fm=webp 1080w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"12164394-8b44-5e27-92e9-a996808bc19d","childMarkdownRemark":{"id":"d6ca683e-0519-505e-b2af-27047cb2887c","timeToRead":1,"html":"<p>리눅스 시스템 모니터링을 위한 명령어에 대해 정리해보았습니다.</p>\n<br>\n<h2 id=\"프로세스-모니터링-명령어---top\" style=\"position:relative;\"><a href=\"#%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-%EB%AA%85%EB%A0%B9%EC%96%B4---top\" aria-label=\"프로세스 모니터링 명령어   top permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로세스 모니터링 명령어 - top</h2>\n<p><img src=\"/assets/images/linux_top.png\" alt=\"top\"></p>\n<p><strong>top</strong> 명령어는 커널을 통하여 관리되는 프로세스들의 정보(메모리 사용률, CPU 사용률, 상태정보 등)를 확인할 수 있는 명령어입니다.\n응용프로그램을 강제로 종료시키고 싶을 때, 실행중인 프로세스를 찾아 <code class=\"language-text\">kill</code> 명령어를 통해 강제종료시킬 수도 있습니다.</p>\n<p>OS X에서는 <code class=\"language-text\">-o</code> 옵션을 통해, 리눅스에서는 <code class=\"language-text\">shift + f</code> 명령어를 통해 프로세스를 key에 따라 정렬할 수 있습니다.</p>\n<br>\n<h2 id=\"시스템-리소스-정보---vmstat-iostat-sar\" style=\"position:relative;\"><a href=\"#%EC%8B%9C%EC%8A%A4%ED%85%9C-%EB%A6%AC%EC%86%8C%EC%8A%A4-%EC%A0%95%EB%B3%B4---vmstat-iostat-sar\" aria-label=\"시스템 리소스 정보   vmstat iostat sar permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시스템 리소스 정보 - vmstat, iostat, sar</h2>\n<p><img src=\"/assets/images/linux_vmstat.png\" alt=\"vmstat\"></p>\n<p><strong>vmstat</strong> 명령어는 <em>virtual memory statistics</em> 의 줄임말로 가상메모리 등 다양한 리소스 정보를 제공합니다.\nOS X에서는 <code class=\"language-text\">vm_stat</code> 명령어로, 리눅스에서는 <code class=\"language-text\">vmstat</code> 명령어로 확인하실 수 있습니다.</p>\n<p><img src=\"/assets/images/linux_iostat.png\" alt=\"iostat\"></p>\n<p><strong>iostat</strong> 명령어는 sysstat에서 가장 기본적인 명령어로 CPU 및 디스크 입출력에 대한 기본정보를 제공합니다.</p>\n<p><img src=\"/assets/images/linux_sar.png\" alt=\"sar\"></p>\n<p><strong>sar</strong> 명령어는 시스템 활동 모니터링에 유용합니다.\n특히 <code class=\"language-text\">-r, -f</code> 옵션을 통해 CPU, 메모리 사용률을 날짜, 시간 대 별로 확인할 수 있습니다.</p>\n<br>\n<h2 id=\"linux-sysstat-패키지-설치\" style=\"position:relative;\"><a href=\"#linux-sysstat-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98\" aria-label=\"linux sysstat 패키지 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Linux sysstat 패키지 설치</h2>\n<p>CentOS, Ubuntu에서는 앞서 말씀드린 <code class=\"language-text\">sar, vmstat</code> 등의 명령어를 사용하기 위해서 <code class=\"language-text\">sysstat</code> 패키지를 설치해야 합니다.\n아래의 명령어를 통해 설치할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">// CentOS, Ubuntu\n$ yum <span class=\"token function\">install</span> sysstat -y\n$ <span class=\"token function\">apt</span> <span class=\"token function\">install</span> sysstat -y</code></pre></div>\n<p>만일 권한 오류나 명령어를 찾을 수 없다는 오류가 나타난다면 아래의 설정을 통해 해결할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">sudo</span> <span class=\"token function\">vi</span> /etc/default/sysstat\n$ <span class=\"token assign-left variable\">ENABLED</span><span class=\"token operator\">=</span>”true”</code></pre></div>\n<br>","excerpt":"리눅스 시스템 모니터링을 위한 명령어에 대해 정리해보았습니다. 프로세스 모니터링 명령어 - top top top…"}}}},{"node":{"title":"Jupyter에서 Scala로 Spark 사용하는 방법","id":"879c5edc-af79-5354-a513-399c005b86ee","slug":"jupyter-spark","publishDate":"March 22, 2017","heroImage":{"id":"dab22ea8-d54d-52a6-852a-278ba3b19a2b","title":"cover-dataengineering","fluid":{"aspectRatio":1.499531396438613,"src":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=450&h=300&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=900&h=600&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1600&h=1067&q=50 1600w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=450&h=300&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=900&h=600&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1600&h=1067&q=50&fm=webp 1600w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"f064af50-3130-58c7-bd5e-49ce84d97e59","childMarkdownRemark":{"id":"fb7d0e8a-5f23-5f32-a248-cecdc727f5dd","timeToRead":2,"html":"<p>이 글은 평소에 <strong>Jupyter Notebook</strong> 에 익숙해져있는 분들께 유용할 듯 합니다.\nZeppelin Notebook을 설정하는 방법은 <a href=\"http://swalloow.github.io/spark-zeppelin-install\">이전 포스팅</a>을 참고하시면 됩니다.</p>\n<br>\n<h2 id=\"apache-toree\" style=\"position:relative;\"><a href=\"#apache-toree\" aria-label=\"apache toree permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Apache Toree</h2>\n<p><img src=\"/assets/images/jupyter-toree.png\" alt=\"Jupyter-Toree\"></p>\n<p><strong>Apache Toree</strong> 는 Jupyter 커널을 통해 Spark에 접속하도록 해주는 아파치 오픈소스 프로젝트입니다.\n기존의 IPython Notebook은 파이썬에 제한되어 있었지만\nJupyter Kernel을 통해 다른 언어까지 확장 가능하도록 바뀌었습니다 (왼쪽 그림 참조).</p>\n<p>여기에서 더 나아가 Apache Toree는 <strong>Toree Kernel</strong> 을 통해 바로 Spark Driver에 연결함으로써,\nJupyter에서 Scala 언어로 Spark Driver/Context를 사용할 수 있게 만들었습니다.</p>\n<p>Toree가 Zeppelin과 다른 점은 <strong>Jupyter protocol</strong> 을 사용할 수 있다는 점 입니다.\n이미 수많은 생태계가 구축되어 있는 Jupyter에서 Spark가 잘 돌아간다면 굳이 Zeppelin을 쓸 필요가 있을까요 (<em>시각화가 어마어마한 강점이긴 합니다</em>).</p>\n<p>GitHub : <a href=\"https://github.com/apache/incubator-toree\">https://github.com/apache/incubator-toree</a></p>\n<br>\n<h2 id=\"jupyter-notebook에-toree-설치하기\" style=\"position:relative;\"><a href=\"#jupyter-notebook%EC%97%90-toree-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-label=\"jupyter notebook에 toree 설치하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jupyter Notebook에 Toree 설치하기</h2>\n<p>Jupyter 노트북 커널 설정하는 방법은 <a href=\"http://swalloow.github.io/jupyter-notebook-kernel\">Jupyter Notebook 다중커널 설정하기</a>를,\nScala와 Spark을 설치하는 방법은 <a href=\"http://swalloow.github.io/spark-zeppelin-install\">OS X에서 Homebrew로 Spark, Zeppelin 설치하기</a>를 참고하시기 바랍니다.</p>\n<p>Toree는 아직 pre 버전만 존재하기 때문에 <code class=\"language-text\">--pre</code> 옵션을 붙여주시거나 파이썬 패키지를 통해 설치해주시면 됩니다.\n설치가 완료되면 jupyter kernel에 toree kernel을 설치해주는 과정이 필요한데 명령어를 통해 이 과정을 자동으로 진행합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ pip <span class=\"token function\">install</span> https://dist.apache.org/repos/dist/dev/incubator/toree/0.2.0/snapshots/dev1/toree-pip/toree-0.2.0.dev1.tar.gz\n$ jupyter toree <span class=\"token function\">install</span></code></pre></div>\n<p>혹시 <code class=\"language-text\">FileNotFoundError: [Errno 2] No such file or directory: &#39;/usr/local/spark/python/lib&#39;</code>\n이런 오류가 난다면, Spark 경로 환경변수를 읽지 못하는 문제입니다. <strong>Homebrew</strong> 를 통해 설치하셨다면 다음과 같이 환경변수를 등록해주시면 됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">SPARK_HOME</span><span class=\"token operator\">=</span>/usr/local/Cellar/apache-spark/2.1.0/libexec</code></pre></div>\n<br>\n<h2 id=\"잘-동작하는지-테스트를-해보자\" style=\"position:relative;\"><a href=\"#%EC%9E%98-%EB%8F%99%EC%9E%91%ED%95%98%EB%8A%94%EC%A7%80-%ED%85%8C%EC%8A%A4%ED%8A%B8%EB%A5%BC-%ED%95%B4%EB%B3%B4%EC%9E%90\" aria-label=\"잘 동작하는지 테스트를 해보자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>잘 동작하는지 테스트를 해보자</h2>\n<p><img src=\"/assets/images/toree-kernel.png\" alt=\"Toree-Kernel\"></p>\n<p>잘 설치되었다면 <code class=\"language-text\">new</code> 했을 때 <code class=\"language-text\">Apache-Toree Scala</code>가 보이실 겁니다.\n잘 동작하는지 간단한 WordCounter 예제를 실행시켜 보시면 잘 동작하는 것을 확인할 수 있습니다.</p>\n<p><img src=\"/assets/images/toree-tuto.png\" alt=\"Toree-Tuto\"></p>\n<br>\n<h2 id=\"docker를-통해-jupyter-설정하는-방법\" style=\"position:relative;\"><a href=\"#docker%EB%A5%BC-%ED%86%B5%ED%95%B4-jupyter-%EC%84%A4%EC%A0%95%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95\" aria-label=\"docker를 통해 jupyter 설정하는 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Docker를 통해 Jupyter 설정하는 방법</h2>\n<p>나는 이 모든 것이 귀찮다! 라면 Docker를 통해 노트북을 실행시키면 됩니다.\n제가 Docker를 통해 Notebook을 사용하지 않는 이유는 딱 한 가지 입니다.\nSpark만 쓰고 싶었는데 기타 등등이 많이 설치되어 있어서 컨테이너 메모리가 무려 <strong>4기가</strong> 나 됩니다...\n그래도 쓰겠다 싶으신 분들은 아래 링크를 참고하시면 됩니다.</p>\n<p><a href=\"https://hub.docker.com/r/jupyter/all-spark-notebook/\">https://hub.docker.com/r/jupyter/all-spark-notebook/</a></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ docker pull jupyter/all-spark-notebook\n$ docker run -it --rm -p <span class=\"token number\">8888</span>:8888 jupyter/all-spark-notebook</code></pre></div>\n<p>이렇게 실행하고 8888번 포트로 접속하면 노트북을 실행할 수 있습니다.</p>\n<br>","excerpt":"이 글은 평소에 Jupyter Notebook 에 익숙해져있는 분들께 유용할 듯 합니다.\nZeppelin Notebook…"}}}}]}},"pageContext":{"basePath":"","paginationPath":"","pageNumber":9,"humanPageNumber":10,"skip":55,"limit":6,"numberOfPages":15,"previousPagePath":"/9","nextPagePath":"/11"}}}