{"componentChunkName":"component---src-templates-post-js","path":"/tf-tips/","result":{"data":{"contentfulPost":{"id":"55e8cd2b-8af7-5898-8ae2-7fd85a1eb16d","title":"Terraform 입문자를 위한 미세 팁","slug":"tf-tips","metaDescription":null,"publishDate":"September 20, 2019","publishDateISO":"2019-09-20","tags":[{"title":"DevOps","id":"701ee587-d6e3-5391-af93-e295765b6f45","slug":"devops"}],"heroImage":{"id":"f36c235f-3e3e-517d-bd80-697bc6183072","title":"cover-devops","fluid":{"aspectRatio":1.5,"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50 1080w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50&fm=webp 1080w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"d9406a85-5ecf-5113-b8fe-00de88f9d53a","childMarkdownRemark":{"id":"c5be4fed-a43d-5b90-81b6-954d1b950c59","timeToRead":3,"html":"<p>클라우드를 활용하는 경우, 인프라 구성 관리 도구로 테라폼을 많이 사용합니다.\n오늘은 처음 테라폼을 도입하려고 할때 알아두면 좋은 점들에 대해 정리해보려 합니다.</p>\n<br>\n<h2 id=\"procedural-vs-declarative\" style=\"position:relative;\"><a href=\"#procedural-vs-declarative\" aria-label=\"procedural vs declarative permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Procedural vs Declarative</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Ansible</span>\n- ec2:\n  count: <span class=\"token number\">10</span>\n  image: ami-v1\n  instance_type: t2.micro\n\n<span class=\"token comment\"># Terraform</span>\nresource <span class=\"token string\">\"aws_instance\"</span> <span class=\"token string\">\"example\"</span> <span class=\"token punctuation\">{</span>\n  count <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n  ami <span class=\"token operator\">=</span> <span class=\"token string\">\"ami-v1\"</span>\n  instance_type <span class=\"token operator\">=</span> <span class=\"token string\">\"t2.micro\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위에 나와있는 코드는 Ansible과 Terraform으로 EC2 인스턴스를 구성하는 코드입니다.\n만일 여기서 둘의 count 값을 15로 변경한다면 어떻게 변할까요?</p>\n<p>먼저 Ansible의 경우, procedural이며 mutable infrastructure를 지향합니다.\n따라서 이미 생성된 10개의 인스턴스에 15개의 인스턴스가 추가로 생성되어 총 25개의 인스턴스가 떠있게 됩니다.\n반면에 Terraform의 경우, declarative이며 immutable infrastructure를 지향합니다.\ncount를 15로 선언했기 때문에 Terraform은 이전 상태와 비교한다음, 5만큼의 변경에 대해 교체를 수행합니다.\n결과적으로 총 15개의 인스턴스가 떠있게 됩니다.</p>\n<p>서로 지향하는 성격이 다르다보니 적절한 상황에 사용하거나 함께 사용하면 좋습니다.\n예를 들어 Provisioning 단계에서 Terraform을 사용하고\nConfiguration, Dependency 설정 단계에서 Ansible을 사용하실 수 있습니다.</p>\n<br>\n<h2 id=\"terraform-vs-cloudformation\" style=\"position:relative;\"><a href=\"#terraform-vs-cloudformation\" aria-label=\"terraform vs cloudformation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terraform vs CloudFormation</h2>\n<p>AWS를 사용하는 경우, 클라우드 내에서 CloudFormation이라는 서비스를 제공합니다.\nCloudFormation 역시 Terraform과 같은 기능을 제공하다보니 도입하기 전에 비교를 많이 합니다.\n우선 모듈화, 개발, 문서 측면에서는 Terraform이 더 편했습니다.\n이외의 큰 차이를 정리하자면 아래와 같습니다.</p>\n<p><strong>CloudFormation은 AWS 지원이 빠릅니다.</strong>\n신규 릴리즈된 서비스나 설정들은 Terraform AWS 모듈에 반영되기까지 시간이 좀 걸립니다.\n반면에 CloudFormation은 대부분 바로 지원해주다보니 더 편할 수 있습니다.</p>\n<p><strong>Terraform은 다른 클라우드 서비스도 지원합니다(Azure, Google Cloud).</strong>\n만일 멀티클라우드 이슈에 대한 대응까지 고려하고 있다면 Terraform을 추천드립니다.</p>\n<br>\n<h2 id=\"terraform-remote-backend\" style=\"position:relative;\"><a href=\"#terraform-remote-backend\" aria-label=\"terraform remote backend permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terraform Remote Backend</h2>\n<p><img src=\"http://drive.google.com/uc?export=view&#x26;id=1NRXR-axT-hjEycpr3SigMI3x6e5m8Utx\"></p>\n<p>Terraform은 상태를 <code class=\"language-text\">Consul, S3, Enterprise</code> 등의 원격 스토리지에 저장할 수 있습니다.\n여러 명이 팀으로 일하는 경우, 인프라 변경 상태에 대한 동기화가 필요합니다.\n이 경우 Remote Backend를 고려하시면 좋습니다.\nstate 파일은 workspace, env에 따라 서로 다른 파일로 관리할 수 있습니다.</p>\n<br>\n<h2 id=\"terraform-migration\" style=\"position:relative;\"><a href=\"#terraform-migration\" aria-label=\"terraform migration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terraform Migration</h2>\n<p>이미 생성되어 있는 수 많은 인프라를 한번에 Terraform으로 옮기는 일은 정말 어렵습니다.\n우선 모듈마다 점진적으로 마이그레이션 하는 방법을 추천드립니다.\nTerraform은 아래의 코드처럼 이미 생성되어 있는 리소스를 불러올 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">resource <span class=\"token string\">\"aws_vpc\"</span> <span class=\"token string\">\"default\"</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\"># resource configuration...</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># update remote state</span>\n\n<span class=\"token punctuation\">\\</span>$ terraform <span class=\"token function\">import</span> aws_vpc.default vpc-abc12345</code></pre></div>\n<p>또는 data 블럭을 이용해서 id, arn 등의 값을 불러올 수 있습니다.\n예를 들어 아래는 Packer로 생성된 가장 최근 버전의 AMI를 불러오는 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">data <span class=\"token string\">\"aws_ami\"</span> <span class=\"token string\">\"app\"</span> <span class=\"token punctuation\">{</span>\n  most_recent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  name_regex <span class=\"token operator\">=</span> <span class=\"token string\">\"app-<span class=\"token entity\" title=\"\\\\\">\\\\</span>d{10}\"</span>\n  owners <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"account_number\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h2 id=\"terraform-module\" style=\"position:relative;\"><a href=\"#terraform-module\" aria-label=\"terraform module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terraform Module</h2>\n<p>Terraform은 모듈화를 통해 인프라를 재사용할 수 있습니다.\n하지만 먼저 기존의 인프라를 어떻게 모듈화할지 많은 고민이 필요합니다.\n자주 변경되어야 하는 일부분은 Terraform 관리 대상에서 제외시키는 방법도 있습니다.\n또한 인프라 장애 대응이 필요한 부분은 쉽게 HA를 구성할 수 있도록 작성해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">module <span class=\"token string\">\"network\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">source</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"./network\"</span>\n  name <span class=\"token operator\">=</span> <span class=\"token string\">\"default\"</span>\n  cidr <span class=\"token operator\">=</span> <span class=\"token string\">\"000.0.0.0/16\"</span>\n\n  azs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ap-northeast-2a\"</span>, <span class=\"token string\">\"ap-northeast-2c\"</span><span class=\"token punctuation\">]</span>\n  public_subnets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"000.0.0.0/22\"</span>, <span class=\"token string\">\"111.1.1.1/22\"</span><span class=\"token punctuation\">]</span>\n\n  tags <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    dept <span class=\"token operator\">=</span> <span class=\"token string\">\"mydept\"</span>\n    <span class=\"token function\">service</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"app\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># common tags</span>\n\ntags <span class=\"token operator\">=</span> <span class=\"token string\">\"\\${merge(var.tags, map(\"</span>Name<span class=\"token string\">\", format(\"</span>%s-public-%s<span class=\"token string\">\", var.name, var.azs[count.index])))}\"</span></code></pre></div>\n<p>각 모듈은 Input과 Output Variable을 가집니다.\n위의 예시는 네트워크에 관련된 모듈입니다.\n모듈을 통해 생성된 모든 리소스는 공통된 태그를 통해 관리할 수 있으며\n만일 네트워크 구성을 변경해야하는 경우, CIDR 값만 수정하면 됩니다.</p>\n<br>\n<h2 id=\"terraform-loop-conditionls-012\" style=\"position:relative;\"><a href=\"#terraform-loop-conditionls-012\" aria-label=\"terraform loop conditionls 012 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terraform Loop, Conditionls (0.12)</h2>\n<p>Terraform은 0.12 버전을 기점으로 더 효율적인 코드를 작성할 수 있게 되었습니다.\n따라서 새로 시작하신다면 0.12+ 버전 사용을 권장드립니다.\n예시를 통해 Terraform에서 루프를 어떻게 정의하는지 설명드리겠습니다.\n아래의 예시는 IAM Role에 Policy를 연결하는 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">locals <span class=\"token punctuation\">{</span>\n  lambda_backend_policy_arns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"arn:aws:iam::aws:policy/AmazonRDSFullAccess\"</span>,\n    <span class=\"token string\">\"arn:aws:iam::aws:policy/CloudWatchFullAccess\"</span>,\n    <span class=\"token string\">\"arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess\"</span>,\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\nresource <span class=\"token string\">\"aws_iam_role_policy_attachment\"</span> <span class=\"token string\">\"attach\"</span> <span class=\"token punctuation\">{</span>\n  count <span class=\"token operator\">=</span> <span class=\"token string\">\"\\<span class=\"token variable\">${length(local.lambda_backend_policy_arns)}</span>\"</span>\n\n  role <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">${aws_iam_role.lambda_backend.name}</span>\"</span>\n  policy_arn <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">${local.lambda_backend_arns<span class=\"token punctuation\">[</span>count.index<span class=\"token punctuation\">]</span>}</span>\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이전에는 위와 같이 Array 타입의 인덱스를 통해 Loop를 정의해야 했습니다.\n하지만 0.12 버전부터 for-loop, for-each 구문을 지원하기 시작했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">variable <span class=\"token string\">\"subnet_numbers\"</span> <span class=\"token punctuation\">{</span>\n  default <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"ap-northeast-2a\"</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token string\">\"ap-northeast-2b\"</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    <span class=\"token string\">\"ap-northeast-2c\"</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nresource <span class=\"token string\">\"aws_subnet\"</span> <span class=\"token string\">\"example\"</span> <span class=\"token punctuation\">{</span>\n  for_each <span class=\"token operator\">=</span> var.subnet_numbers\n\n  vpc_id <span class=\"token operator\">=</span> aws_vpc.example.id\n  availability_zone <span class=\"token operator\">=</span> each.key\n  cidr_block <span class=\"token operator\">=</span> cidrsubset<span class=\"token punctuation\">(</span>\n    aws_vpc.example.cidr_block, each.value\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이외에도 찾아보시면 다양한 타입과 연산을 지원합니다.\n이 글이 처음 입문하시는데 조금 도움이 되셨으면 좋겠습니다!</p>\n<br>","excerpt":"클라우드를 활용하는 경우, 인프라 구성 관리 도구로 테라폼을 많이 사용합니다.\n오늘은 처음 테라폼을 도입하려고 할때 알아두면 좋은 점들에 대해 정리해보려 합니다. Procedural vs Declarative 위에 나와있는 코드는 Ansible과 Terraform으로 EC2 인스턴스를 구성하는 코드입니다.\n만일 여기서 둘의 count 값을 15로 변경한다면 어떻게 변할까요? 먼저 Ansible의 경우, procedural이며 mutable infrastructure를 지향합니다.\n따라서 이미 생성된 10개의 인스턴스에 15개의 인스턴스가 추가로 생성되어 총 2…"}}}},"pageContext":{"slug":"tf-tips","basePath":"","prev":{"slug":"aws-cli-mfa","publishDate":"2019-10-03"},"next":{"slug":"serverless-etl","publishDate":"2019-08-23"}}}}