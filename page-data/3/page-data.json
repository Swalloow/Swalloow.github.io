{"componentChunkName":"component---src-templates-posts-js","path":"/3","result":{"data":{"allContentfulPost":{"edges":[{"node":{"title":"EKS의 AutoScaling 이해하기","id":"777ba93e-b22c-5e74-9f0f-03d3290551b1","slug":"eks-autoscale","publishDate":"November 23, 2019","heroImage":{"id":"f36c235f-3e3e-517d-bd80-697bc6183072","title":"cover-devops","fluid":{"aspectRatio":1.5,"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50 1080w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50&fm=webp 1080w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"93814292-477d-5d50-b6f9-361473d42214","childMarkdownRemark":{"id":"2d86dba3-5c08-57c1-b59b-1a0ef1266b99","timeToRead":2,"html":"<p>오늘은 Kubernetes의 Cluster AutoScaling에 대해 정리해보려 합니다.\n그 다음 EKS에서는 어떻게 적용할 수 있는지, 어떤 효과를 볼 수 있는지 알아보겠습니다.</p>\n<br>\n<h2 id=\"kubernetes-cluster-autoscaling\" style=\"position:relative;\"><a href=\"#kubernetes-cluster-autoscaling\" aria-label=\"kubernetes cluster autoscaling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kubernetes Cluster AutoScaling</h2>\n<p>Kubernetes는 Cluster AutoScaler를 통해 동적으로 인프라를 확장할 수 있습니다.\nCluster AutoScaler는 Pod의 리소스 요청에 따라 클러스터의 노드를 추가하거나 제거합니다.\n만약 리소스 부족으로 인해 스케줄링 대기 상태의 Pod가 존재하는 경우 Cluster AutoScaler가 노드를 추가합니다.\n추가 시 설정한 Min, Max 값을 넘어가지 않도록 구성 할 수 있습니다.</p>\n<p><img src=\"http://drive.google.com/uc?export=view&#x26;id=1XDum_t6J_lEt88o0X776XUxCHB-Ry_rW\"></p>\n<p>먼저 AutoScaler를 설정하면 대기 상태의 Pod을 주기적으로 확인합니다.\n클러스터 리소스가 부족하면서 사용자가 정의한 최대 노드 수에 도달하지 않은 경우 노드 프로비저닝을 요청합니다.\n노드가 추가되면 스케줄러에 의해 대기 상태의 Pod들이 새로운 노드로 할당됩니다.</p>\n<p>노드를 축소하는 프로세스는 사용자가 정의한 메트릭에 의해 시작됩니다.\n예를 들어 CPU Utilization이 50% 이하로 설정했다고 가정해보겠습니다.\nCluster AutoScaler는 삭제할 노드에서 실행 중인 Pod를 다른 노드로 안전하게 이동시킬 수 있는지 확인합니다.\n이때 Pod가 로컬 스토리지를 사용하고 있었다면 데이터 유실이 발생할 수 있으니 <strong>PV 사용</strong>을 권장합니다.\n이러한 확인 프로세스를 노드 또는 Pod 단위로 수행하고 Pod이 모두 이동하게 되면 노드를 제거합니다.</p>\n<br>\n<h2 id=\"eks-autoscaler\" style=\"position:relative;\"><a href=\"#eks-autoscaler\" aria-label=\"eks autoscaler permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EKS AutoScaler</h2>\n<p>EKS의 AutoScaler는 AWS의 Auto Scaling Group을 활용하고 있습니다.\nASG는 주기적으로 현재 상태를 확인하고 <strong>Desired State</strong>로 변화하는 방식으로 동작합니다.\n사용자는 클러스터 노드 수를 제한하는 Min, Max 값을 지정할 수 있습니다.</p>\n<p><img src=\"http://drive.google.com/uc?export=view&#x26;id=1qZRhnghSiYRTzKTFJat2594-mv3hdPKS\"></p>\n<p>위와 같이 목적에 따라 여러 종류의 ASG를 설정하고 서로 다른 <strong>AutoScaling Policy</strong>를 적용할 수 있습니다.\n<strong>Spot Instance Group</strong>을 설정하면 저렴하지만 입찰 가격에 의해 언제든지 인스턴스가 내려갈 수 있습니다.\n하지만 EKS의 <strong>Spot Interrupt Handler (DeamonSet)</strong> 에 의해 정상적으로 실행 중인 Pod들을 재배치할 수 있습니다.</p>\n<p><img src=\"http://drive.google.com/uc?export=view&#x26;id=1jErnWXOdrtMQU0o1Aa504yZGMqSy8dbf\"></p>\n<p>그리고 위 그림과 같이 앞서 설정한 Cluster AutoScaler에 의해 새로운 Spot Instance가 추가됩니다.\n분석용 클러스터 같은 경우, 주말과 야간 시간에 사용량이 낮다는 사실을 이미 알고 있기 때문에\n<strong>CloudWatch Scheduled Policy</strong>를 통해 노드를 축소하면 비용을 절감할 수 있습니다.</p>\n<br>\n<h2 id=\"eks-autoscaler-설정\" style=\"position:relative;\"><a href=\"#eks-autoscaler-%EC%84%A4%EC%A0%95\" aria-label=\"eks autoscaler 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EKS AutoScaler 설정</h2>\n<p>먼저 EKS에 ASG 권한을 가지는 IAM Role을 만들어서 Worker Node 보안 그룹에 추가합니다.\n다음으로 ASG 그룹 태그를 설정하고 yaml 파일을 클러스터에 배포합니다.\n자세한 내용은 <a href=\"https://docs.aws.amazon.com/ko_kr/eks/latest/userguide/cluster-autoscaler.html\">공식 문서</a>를 통해 진행하실 수 있습니다.\n만약 Policy로 메모리 지표를 사용하고 싶다면 각 노드에 <strong>CloudWatch Agent</strong>를 배포해야 합니다.</p>\n<br>","excerpt":"오늘은 Kubernetes의 Cluster AutoScaling에 대해 정리해보려 합니다.\n그 다음 EKS…"}}}},{"node":{"title":"EKS의 VPC 네트워크 구성 이해하기","id":"6afb959a-b207-515c-89ff-0da71e2551fa","slug":"eks-vpc-cni","publishDate":"November 04, 2019","heroImage":{"id":"f36c235f-3e3e-517d-bd80-697bc6183072","title":"cover-devops","fluid":{"aspectRatio":1.5,"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50 1080w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50&fm=webp 1080w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"56442f16-a8c2-5f6a-89d3-868424f31087","childMarkdownRemark":{"id":"ae453983-e66b-52a7-8aa1-e8540834cc2c","timeToRead":3,"html":"<p>모든 Kubernetes as a Service가 그렇듯 EKS 역시 빠르게 변화하고 있습니다.\n오늘의 주제는 EKS의 VPC 네트워크 구성과 CNI 플러그인 입니다.</p>\n<br>\n<h2 id=\"aws-vpc\" style=\"position:relative;\"><a href=\"#aws-vpc\" aria-label=\"aws vpc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS VPC</h2>\n<p><img src=\"http://drive.google.com/uc?export=view&#x26;id=1YFGsyvNbctia5Q3dPrRT8KxtirnkII71\"></p>\n<p>아마 AWS를 production 환경에서 사용하고 있다면 VPC 구성은 이미 잘 이해하고 계시리라 생각합니다.\nVPC 내에 생성한 인스턴스는 eth0이라는 기본 네트워크 인터페이스를 가지게 됩니다.\n그리고 네트워크 인터페이스에 하나 이상의 IPv4 또는 IPv6 주소를 할당할 수 있습니다.\n또한 각 Subnet에 존재하는 인스턴스는 Route Table을 통해 통신을 할 수 있습니다.\n여기까지가 우리가 알고 있는 VPC 내의 Host 간 통신입니다.</p>\n<p>그렇다면 EKS는 어떤 점이 다를까요?\n쿠버네티스의 Pod은 <strong>한 개 이상의 컨테이너를 구성</strong>하고 같은 Host와 Network 스택을 공유합니다.\n그리고 여러 Host에 사이에 걸쳐 생성된 Pod은 <strong>Overlay Network</strong>를 통해 서로 통신하게 됩니다.\n기존 VPC 환경에서는 Pod 네트워크 통신을 기존 방식처럼 지원하기 어려웠습니다.</p>\n<p>하지만 대부분의 사용자들이 VPC 기반의 인프라를 구성하고 있었기 때문에\nEKS는 VPC를 지원할 수 있어야 했습니다.\n예를 들어 사용자는 Security Group, VPC Flow 로그 등의 기능을 그대로 사용하면서,\nPrivateLink를 통해 다른 AWS 서비스와 통신할 수 있어야 합니다.\n이 문제를 해결하기 위해 AWS는 CNI 라는 네트워크 플러그인을 지원하기 시작했습니다.</p>\n<br>\n<h2 id=\"eks-cni\" style=\"position:relative;\"><a href=\"#eks-cni\" aria-label=\"eks cni permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EKS CNI</h2>\n<p><img src=\"http://drive.google.com/uc?export=view&#x26;id=1pMXq0s4jrnvwLjoUGwfTfj4HQBsf2NiB\"></p>\n<p>CNI 는 다음과 같은 통신을 지원합니다.</p>\n<ul>\n<li>단일 Host 내에 존재하는 Pod 간의 통신</li>\n<li>서로 다른 Host 내에 존재하는 Pod 간의 통신</li>\n<li>Pod 과 다른 AWS 서비스 간의 통신</li>\n<li>Pod 과 온프레미스 데이터 센터 간의 통신</li>\n<li>Pod 과 인터넷 간의 통신</li>\n</ul>\n<p>앞서 말했듯 VPC 내의 EC2는 여러 개의 ENI 를 가질 수 있으며,\nENI 는 여러 개의 IP 주소를 가질 수 있습니다.\n하지만 인스턴스 유형 별 가질 수 있는 ENI 와 주소의 최대 수에는 제한이 있습니다.\n만약 EC2 인스턴스가 N개의 ENI와 M개의 주소를 가질 수 있다면 최대 IP는 아래와 같이 계산됩니다.</p>\n<p><code class=\"language-text\">Max IPs = min((N * M - N), subnet&#39;s free IP)</code></p>\n<p>처음 Worker Node가 추가되면 하나의 ENI 가 인스턴스에 할당됩니다.\n하지만 실행되는 Pod의 수가 단일 ENI 에서 허용하는 주소를 초과하면 CNI는 노드에 새로운 ENI 를 추가합니다.\nENI 에 secondary IP 할당과 Pod에 할당할 노드의 IP 주소 풀 관리는 <strong>L-IPAM</strong> 데몬을 통해 이루어집니다.\nL-IPAM 데몬은 모든 노드에 DeamonSet으로 배포되며 gRPC를 통해 CNI 플러그인과 통신합니다.</p>\n<p>사용하고 있는 인스턴스 유형이 m5.xlarge라고 가정하고 예시를 들어보겠습니다.\n우선 m5.xlarge 유형은 4 ENI 와 ENI 당 15 개의 IP 주소를 가질 수 있습니다.\n배포된 Pod의 수가 0에서 14 사이라면 IPAM 데몬은 2개의 Warm Pool을 유지하기 위해 ENI를 하나 더 할당합니다.\n이때 사용가능한 IP 수는 <code class=\"language-text\">2 * (15 - 1) = 28</code> 개가 됩니다.\n이런식으로 Warm Pool을 늘려가면서 최대 <code class=\"language-text\">4 * (15 - 1) = 56</code> 개의 IP를 가질 수 있습니다.\n물론 이 부분은 <code class=\"language-text\">WARM_ENI_TARGET</code> 과 같은 CNI 옵션을 통해 수정할 수 있습니다.</p>\n<br>\n<p><img src=\"http://drive.google.com/uc?export=view&#x26;id=1YctEii4hpUFN5ajMU0j0LSEv6AjGS3PU\"></p>\n<p>구체적으로 CNI를 통해 Pod1 과 Pod2가 어떻게 통신하는지 다이어그램으로 표현하면 위와 같습니다.\n각 Pod의 eth0에는 secondary IP address가 할당되며 Pod Side Route Table를 가지고 있습니다.\n노드의 네트워크 인터페이스까지 도달한 패킷은 EC2-VPC fabric에 의해 포워딩 됩니다.</p>\n<p>따라서 EKS 노드를 결정할 때 ENI 제한 관련 부분도 중요하게 생각하셔야 합니다.\n노드 당 ENI, IP 주소 제한은 <a href=\"https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/using-eni.html\">해당 공식 문서</a>에서 확인하실 수 있습니다.\n물론 CNI를 사용하지 않고 기존의 Calico와 같은 Overlay Network를 사용할 수도 있습니다.\n하지만 이를 사용하게 되면 네트워크까지 관리해야하며 새로운 장애 포인트로 이어질 수 있습니다.</p>\n<p>​<br></p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://github.com/aws/amazon-vpc-cni-k8s/blob/master/docs/cni-proposal.md\">https://github.com/aws/amazon-vpc-cni-k8s/blob/master/docs/cni-proposal.md</a></li>\n<li><a href=\"https://medium.com/google-cloud/understanding-kubernetes-networking-pods-7117dd28727\">https://medium.com/google-cloud/understanding-kubernetes-networking-pods-7117dd28727</a></li>\n</ul>\n<br>","excerpt":"모든 Kubernetes as a Service가 그렇듯 EKS 역시 빠르게 변화하고 있습니다.\n오늘의 주제는 EKS의 VPC…"}}}},{"node":{"title":"AWS MFA CLI 설정 변경 자동화하기","id":"0281d9ec-989b-5d76-83e6-17dbd339a401","slug":"aws-cli-mfa","publishDate":"October 03, 2019","heroImage":{"id":"f36c235f-3e3e-517d-bd80-697bc6183072","title":"cover-devops","fluid":{"aspectRatio":1.5,"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50 1080w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50&fm=webp 1080w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"7ac3472c-5592-59a3-a44e-93e0c7cc9351","childMarkdownRemark":{"id":"75823e04-fa87-5c91-b69f-14ba1eb90edf","timeToRead":3,"html":"<p>클라우드 인프라를 관리하는 경우 여러 계정에 걸친 CLI를 사용하는 경우가 빈번합니다.\n만일 CLI 사용 시 MFA 인증을 요구하는 계정과 아닌 계정이 혼재되어 있다면 설정이 정말 귀찮아집니다.\n이 글에서는 간단한 스크립트를 통해 AWS CLI 설정 변경을 자동화해보려 합니다.</p>\n<br>\n<h2 id=\"aws-credential-설정\" style=\"position:relative;\"><a href=\"#aws-credential-%EC%84%A4%EC%A0%95\" aria-label=\"aws credential 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS Credential 설정</h2>\n<p>먼저 사용하는 프로필의 credential 정보를 설정해줍니다.\nMFA인 프로필과 MFA가 아닌 프로필을 구분하기 위해 아래와 같은 구조로 저장하겠습니다.\n<code class=\"language-text\">-default</code>가 붙은 프로필이 MFA를 사용하는 프로필입니다.\n스크립트 실행을 통해 autogen 값이 자동생성됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[test]\naws_access_key_id = mykey\naws_secret_access_key = mykey\n \n[dev-default]\naws_access_key_id = mykey\naws_secret_access_key = mykey\n \n[prod-default]\naws_access_key_id = mykey\naws_secret_access_key = mykey\n \n[dev]\naws_arn_mfa = arn:aws:iam::myaccount:mfa/myaccount\naws_access_key_id = autogen\naws_secret_access_key = autogen\naws_session_token = autogen\n \n[prod]\naws_arn_mfa = arn:aws:iam::myaccount:mfa/myaccount\naws_access_key_id = autogen\naws_secret_access_key = autogen\naws_session_token = autogen</code></pre></div>\n<ul>\n<li><code class=\"language-text\">aws_arn_mfa</code> : MFA 에 대한 ARN 값 입니다. 콘솔의 security credentials 메뉴에서 확인하실 수 있습니다.</li>\n<li><code class=\"language-text\">aws_session_token</code>: MFA 인증을 거치게 되면 생성되는 STS 토큰 값 입니다. 스크립트를 통해 자동생성 됩니다.</li>\n</ul>\n<br>\n<h2 id=\"mfa-설정-스크립트\" style=\"position:relative;\"><a href=\"#mfa-%EC%84%A4%EC%A0%95-%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8\" aria-label=\"mfa 설정 스크립트 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>MFA 설정 스크립트</h2>\n<p>다음으로 아래의 스크립트를 각 <code class=\"language-text\">awsp.sh</code>, <code class=\"language-text\">mfa.py</code> 이름으로 <code class=\"language-text\">~/.aws/</code> 경로에 추가해줍니다.\n이후에 <code class=\"language-text\">~/.zshrc</code> 또는 <code class=\"language-text\">~/.bashrc</code> 경로에 <code class=\"language-text\">source ~/.aws/awsp.sh</code>를 추가해줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token shebang important\">#! /bin/bash</span>\n\n<span class=\"token function-name function\">setProfile</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">AWS_PROFILE</span><span class=\"token operator\">=</span><span class=\"token variable\">$1</span>\n  <span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">AWS_DEFAULT_PROFILE</span><span class=\"token operator\">=</span><span class=\"token variable\">$1</span>\n\n  python ~/.aws/mfa.py --profile <span class=\"token variable\">$1</span> <span class=\"token variable\">$2</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token builtin class-name\">alias</span> <span class=\"token assign-left variable\">awsp</span><span class=\"token operator\">=</span>setProfile</code></pre></div>\n<br>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> os\n<span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> sys\n<span class=\"token keyword\">import</span> argparse\n<span class=\"token keyword\">import</span> subprocess\n<span class=\"token keyword\">import</span> configparser\n\nparser <span class=\"token operator\">=</span> argparse<span class=\"token punctuation\">.</span>ArgumentParser<span class=\"token punctuation\">(</span>description<span class=\"token operator\">=</span><span class=\"token string\">'Update your AWS CLI Token'</span><span class=\"token punctuation\">)</span>\nparser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'token'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'token from your MFA device'</span><span class=\"token punctuation\">)</span>\nparser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--profile'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'aws profile to store the session token'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>getenv<span class=\"token punctuation\">(</span><span class=\"token string\">'AWS_PROFILE'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nparser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--arn'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'AWS ARN from the IAM console (Security credentials -> Assigned MFA device). This is saved to your .aws/credentials file'</span><span class=\"token punctuation\">)</span>\nparser<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">'--credential-path'</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">help</span><span class=\"token operator\">=</span><span class=\"token string\">'path to the aws credentials file'</span><span class=\"token punctuation\">,</span> default<span class=\"token operator\">=</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>expanduser<span class=\"token punctuation\">(</span><span class=\"token string\">'~/.aws/credentials'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nargs <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>parse_args<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> args<span class=\"token punctuation\">.</span>profile <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    parser<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">'Expecting --profile or profile set in environment AWS_PROFILE. e.g. \"stage\"'</span><span class=\"token punctuation\">)</span>\n\nconfig <span class=\"token operator\">=</span> configparser<span class=\"token punctuation\">.</span>ConfigParser<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconfig<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>credential_path<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> args<span class=\"token punctuation\">.</span>profile <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> config<span class=\"token punctuation\">.</span>sections<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    parser<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid profile. Section not found in ~/.aws/credentails'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> args<span class=\"token punctuation\">.</span>arn <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> <span class=\"token string\">'aws_arn_mfa'</span> <span class=\"token keyword\">not</span> <span class=\"token keyword\">in</span> config<span class=\"token punctuation\">[</span>args<span class=\"token punctuation\">.</span>profile<span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span>\n        sys<span class=\"token punctuation\">.</span>exit<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># parser.error('ARN is not provided. Specify via --arn')</span>\n\n    args<span class=\"token punctuation\">.</span>arn <span class=\"token operator\">=</span> config<span class=\"token punctuation\">[</span>args<span class=\"token punctuation\">.</span>profile<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'aws_arn_mfa'</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\"># Update the arn with user supplied one</span>\n    config<span class=\"token punctuation\">[</span>args<span class=\"token punctuation\">.</span>profile<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'aws_arn_mfa'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span>arn\n\n<span class=\"token comment\"># Generate the session token from the profile</span>\nresult <span class=\"token operator\">=</span> subprocess<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'aws'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'sts'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'get-session-token'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--profile'</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">.</span>profile <span class=\"token operator\">+</span> <span class=\"token string\">'-default'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'--serial-number'</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">.</span>arn<span class=\"token punctuation\">,</span> <span class=\"token string\">'--token-code'</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">.</span>token<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> stdout<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>PIPE<span class=\"token punctuation\">,</span> stderr<span class=\"token operator\">=</span>subprocess<span class=\"token punctuation\">.</span>PIPE<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> result<span class=\"token punctuation\">.</span>returncode <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n    parser<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>stderr<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ncredentials <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span><span class=\"token string\">'utf-8'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Credentials'</span><span class=\"token punctuation\">]</span>\n\nconfig<span class=\"token punctuation\">[</span>args<span class=\"token punctuation\">.</span>profile<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'aws_access_key_id'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> credentials<span class=\"token punctuation\">[</span><span class=\"token string\">'AccessKeyId'</span><span class=\"token punctuation\">]</span>\nconfig<span class=\"token punctuation\">[</span>args<span class=\"token punctuation\">.</span>profile<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'aws_secret_access_key'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> credentials<span class=\"token punctuation\">[</span><span class=\"token string\">'SecretAccessKey'</span><span class=\"token punctuation\">]</span>\nconfig<span class=\"token punctuation\">[</span>args<span class=\"token punctuation\">.</span>profile<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token string\">'aws_session_token'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> credentials<span class=\"token punctuation\">[</span><span class=\"token string\">'SessionToken'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token comment\"># Save the changes back to the file</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>credential_path<span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> configFile<span class=\"token punctuation\">:</span>\n    config<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span>configFile<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Saved {} credentials to {}'</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>profile<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">.</span>credential_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<br>\n<p>이제 <code class=\"language-text\">awsp [프로필명] [mfa code]</code>과 같은 명령어로 사용하실 수 있습니다.\n예를 들어 dev 프로필의 경우 <code class=\"language-text\">awsp dev 012345</code>와 같이 실행합니다.\nMFA 조건이 없는 프로필의 경우 <code class=\"language-text\">awsp test 0</code>과 같이 실행하시면 됩니다.</p>\n<br>","excerpt":"클라우드 인프라를 관리하는 경우 여러 계정에 걸친 CLI를 사용하는 경우가 빈번합니다.\n만일 CLI 사용 시 MFA…"}}}},{"node":{"title":"Terraform 입문자를 위한 미세 팁","id":"55e8cd2b-8af7-5898-8ae2-7fd85a1eb16d","slug":"tf-tips","publishDate":"September 20, 2019","heroImage":{"id":"f36c235f-3e3e-517d-bd80-697bc6183072","title":"cover-devops","fluid":{"aspectRatio":1.5,"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50 1080w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50&fm=webp 1080w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"d9406a85-5ecf-5113-b8fe-00de88f9d53a","childMarkdownRemark":{"id":"c5be4fed-a43d-5b90-81b6-954d1b950c59","timeToRead":3,"html":"<p>클라우드를 활용하는 경우, 인프라 구성 관리 도구로 테라폼을 많이 사용합니다.\n오늘은 처음 테라폼을 도입하려고 할때 알아두면 좋은 점들에 대해 정리해보려 합니다.</p>\n<br>\n<h2 id=\"procedural-vs-declarative\" style=\"position:relative;\"><a href=\"#procedural-vs-declarative\" aria-label=\"procedural vs declarative permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Procedural vs Declarative</h2>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token comment\"># Ansible</span>\n- ec2:\n  count: <span class=\"token number\">10</span>\n  image: ami-v1\n  instance_type: t2.micro\n\n<span class=\"token comment\"># Terraform</span>\nresource <span class=\"token string\">\"aws_instance\"</span> <span class=\"token string\">\"example\"</span> <span class=\"token punctuation\">{</span>\n  count <span class=\"token operator\">=</span> <span class=\"token number\">10</span>\n  ami <span class=\"token operator\">=</span> <span class=\"token string\">\"ami-v1\"</span>\n  instance_type <span class=\"token operator\">=</span> <span class=\"token string\">\"t2.micro\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위에 나와있는 코드는 Ansible과 Terraform으로 EC2 인스턴스를 구성하는 코드입니다.\n만일 여기서 둘의 count 값을 15로 변경한다면 어떻게 변할까요?</p>\n<p>먼저 Ansible의 경우, procedural이며 mutable infrastructure를 지향합니다.\n따라서 이미 생성된 10개의 인스턴스에 15개의 인스턴스가 추가로 생성되어 총 25개의 인스턴스가 떠있게 됩니다.\n반면에 Terraform의 경우, declarative이며 immutable infrastructure를 지향합니다.\ncount를 15로 선언했기 때문에 Terraform은 이전 상태와 비교한다음, 5만큼의 변경에 대해 교체를 수행합니다.\n결과적으로 총 15개의 인스턴스가 떠있게 됩니다.</p>\n<p>서로 지향하는 성격이 다르다보니 적절한 상황에 사용하거나 함께 사용하면 좋습니다.\n예를 들어 Provisioning 단계에서 Terraform을 사용하고\nConfiguration, Dependency 설정 단계에서 Ansible을 사용하실 수 있습니다.</p>\n<br>\n<h2 id=\"terraform-vs-cloudformation\" style=\"position:relative;\"><a href=\"#terraform-vs-cloudformation\" aria-label=\"terraform vs cloudformation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terraform vs CloudFormation</h2>\n<p>AWS를 사용하는 경우, 클라우드 내에서 CloudFormation이라는 서비스를 제공합니다.\nCloudFormation 역시 Terraform과 같은 기능을 제공하다보니 도입하기 전에 비교를 많이 합니다.\n우선 모듈화, 개발, 문서 측면에서는 Terraform이 더 편했습니다.\n이외의 큰 차이를 정리하자면 아래와 같습니다.</p>\n<p><strong>CloudFormation은 AWS 지원이 빠릅니다.</strong>\n신규 릴리즈된 서비스나 설정들은 Terraform AWS 모듈에 반영되기까지 시간이 좀 걸립니다.\n반면에 CloudFormation은 대부분 바로 지원해주다보니 더 편할 수 있습니다.</p>\n<p><strong>Terraform은 다른 클라우드 서비스도 지원합니다(Azure, Google Cloud).</strong>\n만일 멀티클라우드 이슈에 대한 대응까지 고려하고 있다면 Terraform을 추천드립니다.</p>\n<br>\n<h2 id=\"terraform-remote-backend\" style=\"position:relative;\"><a href=\"#terraform-remote-backend\" aria-label=\"terraform remote backend permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terraform Remote Backend</h2>\n<p><img src=\"http://drive.google.com/uc?export=view&#x26;id=1NRXR-axT-hjEycpr3SigMI3x6e5m8Utx\"></p>\n<p>Terraform은 상태를 <code class=\"language-text\">Consul, S3, Enterprise</code> 등의 원격 스토리지에 저장할 수 있습니다.\n여러 명이 팀으로 일하는 경우, 인프라 변경 상태에 대한 동기화가 필요합니다.\n이 경우 Remote Backend를 고려하시면 좋습니다.\nstate 파일은 workspace, env에 따라 서로 다른 파일로 관리할 수 있습니다.</p>\n<br>\n<h2 id=\"terraform-migration\" style=\"position:relative;\"><a href=\"#terraform-migration\" aria-label=\"terraform migration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terraform Migration</h2>\n<p>이미 생성되어 있는 수 많은 인프라를 한번에 Terraform으로 옮기는 일은 정말 어렵습니다.\n우선 모듈마다 점진적으로 마이그레이션 하는 방법을 추천드립니다.\nTerraform은 아래의 코드처럼 이미 생성되어 있는 리소스를 불러올 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">resource <span class=\"token string\">\"aws_vpc\"</span> <span class=\"token string\">\"default\"</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\"># resource configuration...</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># update remote state</span>\n\n<span class=\"token punctuation\">\\</span>$ terraform <span class=\"token function\">import</span> aws_vpc.default vpc-abc12345</code></pre></div>\n<p>또는 data 블럭을 이용해서 id, arn 등의 값을 불러올 수 있습니다.\n예를 들어 아래는 Packer로 생성된 가장 최근 버전의 AMI를 불러오는 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">data <span class=\"token string\">\"aws_ami\"</span> <span class=\"token string\">\"app\"</span> <span class=\"token punctuation\">{</span>\n  most_recent <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  name_regex <span class=\"token operator\">=</span> <span class=\"token string\">\"app-<span class=\"token entity\" title=\"\\\\\">\\\\</span>d{10}\"</span>\n  owners <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"account_number\"</span><span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<br>\n<h2 id=\"terraform-module\" style=\"position:relative;\"><a href=\"#terraform-module\" aria-label=\"terraform module permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terraform Module</h2>\n<p>Terraform은 모듈화를 통해 인프라를 재사용할 수 있습니다.\n하지만 먼저 기존의 인프라를 어떻게 모듈화할지 많은 고민이 필요합니다.\n자주 변경되어야 하는 일부분은 Terraform 관리 대상에서 제외시키는 방법도 있습니다.\n또한 인프라 장애 대응이 필요한 부분은 쉽게 HA를 구성할 수 있도록 작성해야 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">module <span class=\"token string\">\"network\"</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin class-name\">source</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"./network\"</span>\n  name <span class=\"token operator\">=</span> <span class=\"token string\">\"default\"</span>\n  cidr <span class=\"token operator\">=</span> <span class=\"token string\">\"000.0.0.0/16\"</span>\n\n  azs <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"ap-northeast-2a\"</span>, <span class=\"token string\">\"ap-northeast-2c\"</span><span class=\"token punctuation\">]</span>\n  public_subnets <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"000.0.0.0/22\"</span>, <span class=\"token string\">\"111.1.1.1/22\"</span><span class=\"token punctuation\">]</span>\n\n  tags <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    dept <span class=\"token operator\">=</span> <span class=\"token string\">\"mydept\"</span>\n    <span class=\"token function\">service</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"app\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\"># common tags</span>\n\ntags <span class=\"token operator\">=</span> <span class=\"token string\">\"\\${merge(var.tags, map(\"</span>Name<span class=\"token string\">\", format(\"</span>%s-public-%s<span class=\"token string\">\", var.name, var.azs[count.index])))}\"</span></code></pre></div>\n<p>각 모듈은 Input과 Output Variable을 가집니다.\n위의 예시는 네트워크에 관련된 모듈입니다.\n모듈을 통해 생성된 모든 리소스는 공통된 태그를 통해 관리할 수 있으며\n만일 네트워크 구성을 변경해야하는 경우, CIDR 값만 수정하면 됩니다.</p>\n<br>\n<h2 id=\"terraform-loop-conditionls-012\" style=\"position:relative;\"><a href=\"#terraform-loop-conditionls-012\" aria-label=\"terraform loop conditionls 012 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Terraform Loop, Conditionls (0.12)</h2>\n<p>Terraform은 0.12 버전을 기점으로 더 효율적인 코드를 작성할 수 있게 되었습니다.\n따라서 새로 시작하신다면 0.12+ 버전 사용을 권장드립니다.\n예시를 통해 Terraform에서 루프를 어떻게 정의하는지 설명드리겠습니다.\n아래의 예시는 IAM Role에 Policy를 연결하는 코드입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">locals <span class=\"token punctuation\">{</span>\n  lambda_backend_policy_arns <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"arn:aws:iam::aws:policy/AmazonRDSFullAccess\"</span>,\n    <span class=\"token string\">\"arn:aws:iam::aws:policy/CloudWatchFullAccess\"</span>,\n    <span class=\"token string\">\"arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess\"</span>,\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n\nresource <span class=\"token string\">\"aws_iam_role_policy_attachment\"</span> <span class=\"token string\">\"attach\"</span> <span class=\"token punctuation\">{</span>\n  count <span class=\"token operator\">=</span> <span class=\"token string\">\"\\<span class=\"token variable\">${length(local.lambda_backend_policy_arns)}</span>\"</span>\n\n  role <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">${aws_iam_role.lambda_backend.name}</span>\"</span>\n  policy_arn <span class=\"token operator\">=</span> <span class=\"token string\">\"<span class=\"token variable\">${local.lambda_backend_arns<span class=\"token punctuation\">[</span>count.index<span class=\"token punctuation\">]</span>}</span>\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이전에는 위와 같이 Array 타입의 인덱스를 통해 Loop를 정의해야 했습니다.\n하지만 0.12 버전부터 for-loop, for-each 구문을 지원하기 시작했습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">variable <span class=\"token string\">\"subnet_numbers\"</span> <span class=\"token punctuation\">{</span>\n  default <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"ap-northeast-2a\"</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token string\">\"ap-northeast-2b\"</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n    <span class=\"token string\">\"ap-northeast-2c\"</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nresource <span class=\"token string\">\"aws_subnet\"</span> <span class=\"token string\">\"example\"</span> <span class=\"token punctuation\">{</span>\n  for_each <span class=\"token operator\">=</span> var.subnet_numbers\n\n  vpc_id <span class=\"token operator\">=</span> aws_vpc.example.id\n  availability_zone <span class=\"token operator\">=</span> each.key\n  cidr_block <span class=\"token operator\">=</span> cidrsubset<span class=\"token punctuation\">(</span>\n    aws_vpc.example.cidr_block, each.value\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이외에도 찾아보시면 다양한 타입과 연산을 지원합니다.\n이 글이 처음 입문하시는데 조금 도움이 되셨으면 좋겠습니다!</p>\n<br>","excerpt":"…"}}}},{"node":{"title":"Serverless ETL 서비스들에 대한 리뷰","id":"c9c22c87-26a0-5eef-b26b-689b1f9b3819","slug":"serverless-etl","publishDate":"August 23, 2019","heroImage":{"id":"dab22ea8-d54d-52a6-852a-278ba3b19a2b","title":"cover-dataengineering","fluid":{"aspectRatio":1.499531396438613,"src":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=450&h=300&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=900&h=600&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1600&h=1067&q=50 1600w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=450&h=300&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=900&h=600&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1600&h=1067&q=50&fm=webp 1600w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"a5384ea3-80c9-5139-9665-b747d4894123","childMarkdownRemark":{"id":"30e59fb2-d022-54b7-9e6c-a50bdeeba8f1","timeToRead":5,"html":"<p>15년 AWS Lambda가 출시된 이후, 뜨거운 반응을 보이며 다양한 서버리스 서비스들이 출시되었다.\n그 중 ETL에 관련되어 있는 서비스들을 사용해보면서 느낀 점에 대해 정리해보려 한다.</p>\n<br>\n<h1 id=\"lambda와-athena를-활용한-쿼리\" style=\"position:relative;\"><a href=\"#lambda%EC%99%80-athena%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-%EC%BF%BC%EB%A6%AC\" aria-label=\"lambda와 athena를 활용한 쿼리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Lambda와 Athena를 활용한 쿼리</h1>\n<p>Athena는 Presto를 기반으로 만든 대화형 쿼리 서비스이다.\n쿼리 당 스캔한 데이터의 TB당 5 USD 만 내면 된다.\n보통 분석용 쿼리를 위한 클러스터는 리소스 요청이 불규칙적인 경우가 많다.\n운영을 위한 비용까지 고려한다면 정말 좋은 서비스라고 볼 수 있다.\n하지만 모든 서비스가 그렇듯 장점만 있는 것은 아니다.\n특히 Athena를 분석용 쿼리가 아닌 다른 용도로 사용한다면 몇 가지 제한사항을 마주칠 수도 있다.</p>\n<p><img src=\"http://drive.google.com/uc?export=view&#x26;id=13Q_Ke3ZJuJxwR3Ahy479hT5nPJcNiSRV\"></p>\n<p>Athena를 ETL 용도로 사용하고 싶다면 위 그림과 같이 Lambda, CloudWatch를 통해 트리거할 수 있다.\nAthena 뿐만 아니라 Glue, EMR 등 다른 서비스도 모두 Lambda를 통해 실행할 수 있기 때문에\n정말 온디멘드로 띄워놓는 인스턴스 하나도 없이 ETL을 구성할 수도 있다.\n하지만 정말 데이터가 많고 복잡한 작업이라면 아래와 같은 제약사항들을 잘 이해하고 선택해야 한다.</p>\n<br>\n<h2 id=\"구글의-빅쿼리와-달리-쿼리-비용을-추정하는-기능이-없다\" style=\"position:relative;\"><a href=\"#%EA%B5%AC%EA%B8%80%EC%9D%98-%EB%B9%85%EC%BF%BC%EB%A6%AC%EC%99%80-%EB%8B%AC%EB%A6%AC-%EC%BF%BC%EB%A6%AC-%EB%B9%84%EC%9A%A9%EC%9D%84-%EC%B6%94%EC%A0%95%ED%95%98%EB%8A%94-%EA%B8%B0%EB%8A%A5%EC%9D%B4-%EC%97%86%EB%8B%A4\" aria-label=\"구글의 빅쿼리와 달리 쿼리 비용을 추정하는 기능이 없다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구글의 빅쿼리와 달리 쿼리 비용을 추정하는 기능이 없다</h2>\n<p>Athena는 쿼리 비용을 추정하는 기능이 없기 때문에 잘 모르고 쿼리를 막 날린다면 과금 폭탄을 맞이할 수 있다.\n물론 처음 사용하는 경우, AWS에 실수한 상황을 설명하면 어느정도 과금을 물러주기도 한다.</p>\n<br>\n<h2 id=\"athena에는-동시-쿼리-제한과-시간-제한이-존재한다\" style=\"position:relative;\"><a href=\"#athena%EC%97%90%EB%8A%94-%EB%8F%99%EC%8B%9C-%EC%BF%BC%EB%A6%AC-%EC%A0%9C%ED%95%9C%EA%B3%BC-%EC%8B%9C%EA%B0%84-%EC%A0%9C%ED%95%9C%EC%9D%B4-%EC%A1%B4%EC%9E%AC%ED%95%9C%EB%8B%A4\" aria-label=\"athena에는 동시 쿼리 제한과 시간 제한이 존재한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Athena에는 동시 쿼리 제한과 시간 제한이 존재한다</h2>\n<p>Athena의 기본 계정 당 쿼리 한도는 20개이다. Support에 요청하면 늘려주기도 하지만 이 역시 제한이 있다. 또한 30분이라는 쿼리 제한 시간이 존재한다.\n따라서 오래걸리거나 무거운 작업에 Athena 쿼리를 활용하는 경우, 앞단에 큐를 두는 경우가 많다.</p>\n<br>\n<h2 id=\"athena는-udf를-지원하지-않는다\" style=\"position:relative;\"><a href=\"#athena%EB%8A%94-udf%EB%A5%BC-%EC%A7%80%EC%9B%90%ED%95%98%EC%A7%80-%EC%95%8A%EB%8A%94%EB%8B%A4\" aria-label=\"athena는 udf를 지원하지 않는다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Athena는 UDF를 지원하지 않는다</h2>\n<p>어쩌면 크게 다가올 수 있는 제한사항 중에 하나이다.\nUDF를 많이 등록하고 사용했다면 사용자 입장에서 불편할 수 있다.</p>\n<br>\n<h2 id=\"athena의-ctas-쿼리에는-파티션-한도가-존재한다\" style=\"position:relative;\"><a href=\"#athena%EC%9D%98-ctas-%EC%BF%BC%EB%A6%AC%EC%97%90%EB%8A%94-%ED%8C%8C%ED%8B%B0%EC%85%98-%ED%95%9C%EB%8F%84%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%9C%EB%8B%A4\" aria-label=\"athena의 ctas 쿼리에는 파티션 한도가 존재한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Athena의 CTAS 쿼리에는 파티션 한도가 존재한다</h2>\n<p>CTAS 쿼리란 SELECT의 결과로 채워지는 새 테이블을 생성하는 쿼리를 말한다.\nCTAS 쿼리를 사용하는 경우, WITH 절의 external_location을 통해 저장될 위치를 지정한다.\n이 때 Athena가 생성하는 쿼리 결과 파티션이 100개를 넘어가는 경우 오류가 발생한다.</p>\n<br>\n<h1 id=\"glue-etl-data-catalog\" style=\"position:relative;\"><a href=\"#glue-etl-data-catalog\" aria-label=\"glue etl data catalog permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Glue ETL, Data Catalog</h1>\n<p>Glue와 S3 Batch는 Athena와 달리 태생부터 ETL을 위해 만들어진 서버리스 서비스이다.\n특히 Hive Metastore를 대체할 수 있는 Glue Data Catalog와\n자동으로 스키마를 생성해주는 Glue Crawler는 정말 편하게 사용할 수 있다.\nGlue Data Catalog를 사용한다면 Athena, EMR 내에서 Glue를 중심으로 데이터 소스를 통합할 수 있다.</p>\n<p><img src=\"http://drive.google.com/uc?export=view&#x26;id=1rN1-SFqxqljQNQXhEqv0uTpC1ymrVXbo\"></p>\n<p>하지만 Glue ETL와 S3 Batch 서비스는 요금에 비해 활용도가 낮다고 생각한다.\n먼저 Glue ETL은 위 그림과 같이 input과 output을 정의하고 그 사이에 transform 작업을 정의할 수 있다.\nSpark의 DataFrame을 기반으로 하며 DynamicFrame, Built-In Transform 등을 사용하여 스크립트를 작성한다.\n서비스 중간에 추가되는 간단한 ETL Batch에 사용하기는 무난해보이지만 그게 아니라면 아래와 같은 사항들을 고려해야 한다.</p>\n<br>\n<h2 id=\"glue-etl은-dpu를-기준으로-요금이-계산된다\" style=\"position:relative;\"><a href=\"#glue-etl%EC%9D%80-dpu%EB%A5%BC-%EA%B8%B0%EC%A4%80%EC%9C%BC%EB%A1%9C-%EC%9A%94%EA%B8%88%EC%9D%B4-%EA%B3%84%EC%82%B0%EB%90%9C%EB%8B%A4\" aria-label=\"glue etl은 dpu를 기준으로 요금이 계산된다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Glue ETL은 DPU를 기준으로 요금이 계산된다</h2>\n<p>Glue ETL의 요금은 DPU라는 하나의 처리 단위를 기준으로 산정되는데 1 DPU는 4CPU와 16GB의 메모리를 가진다.\nDPU 시간당 0.44 USD, 초 단위로 청구되며 Apache Spark 유형 ETL 작업당 최소 시간은 10분이다.\nSpark 기반의 ETL에서는 Executor에 대한 설정이 중요하다.\n작업에 따라 CPU가 많이 필요할 수도 있고 메모리가 많이 필요할 수도 있다.\n하지만 Glue는 DPU라는 단위로 고정되어 있다보니 비용 효율적으로 사용하기 어려웠다.\n만일 자체 클러스터를 사용하고 전체 파이프라인 내에서 리소스를 효율적으로 사용할 수 있다면\nGlueContext가 뜨는 시간까지 고려했을때 정말 저렴한 서비스인지 잘 모르겠다.</p>\n<br>\n<h2 id=\"glue-etl은-디버깅-모니터링-기능이-아직-부족하다\" style=\"position:relative;\"><a href=\"#glue-etl%EC%9D%80-%EB%94%94%EB%B2%84%EA%B9%85-%EB%AA%A8%EB%8B%88%ED%84%B0%EB%A7%81-%EA%B8%B0%EB%8A%A5%EC%9D%B4-%EC%95%84%EC%A7%81-%EB%B6%80%EC%A1%B1%ED%95%98%EB%8B%A4\" aria-label=\"glue etl은 디버깅 모니터링 기능이 아직 부족하다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Glue ETL은 디버깅, 모니터링 기능이 아직 부족하다</h2>\n<p>Spark에는 Spark UI 라는 휼륭한 모니터링 대시보드가 존재하지만 Glue에서는 아직 이를 지원하지 않는다.\n대신 자체적으로 CloudWatch를 통해 메모리, 로그를 제공하는데 아직 지표가 많이 부족해보였다.\nDAG가 어떻게 구성되는지와 Shuffle 관련 지표도 볼 수가 없어 무거운 작업이라면 많은 노력이 필요하다. 아직 오픈한지 얼마 지나지 않은 서비스라 이 부분은 앞으로 많이 개선될거라 생각한다.</p>\n<br>\n<h1 id=\"step-function을-사용한-etl-workflow-관리\" style=\"position:relative;\"><a href=\"#step-function%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%9C-etl-workflow-%EA%B4%80%EB%A6%AC\" aria-label=\"step function을 사용한 etl workflow 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step Function을 사용한 ETL Workflow 관리</h1>\n<p>Step Function은 Serverless 기반의 Workflow 서비스다.\n여기에서는 가장 많이 사용하는 Airflow와 비교해가며 Serverless ETL이 가지는 특징을 설명해보려 한다.</p>\n<br>\n<h2 id=\"step-function은-asl이라는-언어로-정의된다\" style=\"position:relative;\"><a href=\"#step-function%EC%9D%80-asl%EC%9D%B4%EB%9D%BC%EB%8A%94-%EC%96%B8%EC%96%B4%EB%A1%9C-%EC%A0%95%EC%9D%98%EB%90%9C%EB%8B%A4\" aria-label=\"step function은 asl이라는 언어로 정의된다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step Function은 ASL이라는 언어로 정의된다</h2>\n<p>Step Function에 들어가는 각 단계에는 Lambda, Fargate 등의 서버리스 서비스가 들어갈 수 있다.\n그리고 각 단계는 Amazon States Language 라는 json 기반의 구조화된 언어로 정의된다.\nAirflow가 많이 사용되는 이유 중에 하나가 파이썬으로 DAG를 구성할 수 있다는 점인데\n이에 비해 json 기반의 Step Function은 너무 복잡하게 느껴졌다.</p>\n<br>\n<h2 id=\"step-function에는-operator-sensor가-없다\" style=\"position:relative;\"><a href=\"#step-function%EC%97%90%EB%8A%94-operator-sensor%EA%B0%80-%EC%97%86%EB%8B%A4\" aria-label=\"step function에는 operator sensor가 없다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Step Function에는 Operator, Sensor가 없다</h2>\n<p><img src=\"http://drive.google.com/uc?export=view&#x26;id=1u8wxsTHUK_TMh8ZUfuuY5d7OMbJSur4R\"></p>\n<p>Lambda와 같은 서버리스 서비스는 수행에 대한 제한 시간이 존재한다.\n각 단계가 대부분 람다 기반이다 보니 위 그림과 같이 Loop를 돌며 체크하는 패턴으로 Sensor를 구현한다. Airflow에는 리소스마다 미리 정의된 Operator, Sensor가 많지만 Step Function에서는 이를 다 구현해야 한다.\n만일 Loop를 피하고 싶다면 Fargate로 Sensor를 구현할 수 있지만 Fargate는 요금이 많이 나온다.</p>\n<br>\n<h2 id=\"정리하면서\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC%ED%95%98%EB%A9%B4%EC%84%9C\" aria-label=\"정리하면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리하면서</h2>\n<p>쓰다보니 단점만 나열한 것 같아 보이지만 AWS 서비스와 요금은 지속적으로 업데이트 되기 때문에\n나중에는 이러한 제한사항들이 해결될지도 모른다. 그리고 상황에 따라 적절히 사용한다면 장점이 많다.\n그리고 서버리스가 아니라 언급하지 않았지만 Managed Cluster 서비스인 EMR을 사용해서 모두 해결하는 방법도 있다.\n만일 Event 기반의 간단한 ETL 이라면 Serverless ETL이 가지는 장점을 크게 활용해보길 추천한다.</p>","excerpt":"15년 AWS Lambda가 출시된 이후, 뜨거운 반응을 보이며 다양한 서버리스 서비스들이 출시되었다.\n그 중 ETL…"}}}},{"node":{"title":"Open Infra Days 2019 후기","id":"861cfb94-32ad-584a-b524-ff3f3f1f1883","slug":"openinfra","publishDate":"July 20, 2019","heroImage":{"id":"1faaada3-e12b-5548-8532-08b7c04dc7eb","title":"cover-personal","fluid":{"aspectRatio":1.694915254237288,"src":"//images.ctfassets.net/tushy4jlcik7/3ltdJp06NzCExAWz9OF8Ak/d8ca530c80e7c79a7bd7e4c396c0ae00/cover_personal.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/3ltdJp06NzCExAWz9OF8Ak/d8ca530c80e7c79a7bd7e4c396c0ae00/cover_personal.jpg?w=450&h=266&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/3ltdJp06NzCExAWz9OF8Ak/d8ca530c80e7c79a7bd7e4c396c0ae00/cover_personal.jpg?w=900&h=531&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/3ltdJp06NzCExAWz9OF8Ak/d8ca530c80e7c79a7bd7e4c396c0ae00/cover_personal.jpg?w=1400&h=826&q=50 1400w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/3ltdJp06NzCExAWz9OF8Ak/d8ca530c80e7c79a7bd7e4c396c0ae00/cover_personal.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/3ltdJp06NzCExAWz9OF8Ak/d8ca530c80e7c79a7bd7e4c396c0ae00/cover_personal.jpg?w=450&h=266&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/3ltdJp06NzCExAWz9OF8Ak/d8ca530c80e7c79a7bd7e4c396c0ae00/cover_personal.jpg?w=900&h=531&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/3ltdJp06NzCExAWz9OF8Ak/d8ca530c80e7c79a7bd7e4c396c0ae00/cover_personal.jpg?w=1400&h=826&q=50&fm=webp 1400w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/3ltdJp06NzCExAWz9OF8Ak/d8ca530c80e7c79a7bd7e4c396c0ae00/cover_personal.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"2cb0611e-2304-59aa-9e9e-33e66b24004a","childMarkdownRemark":{"id":"6d6b40fc-069f-5368-84b9-91a48d436fe4","timeToRead":4,"html":"<p>19일부터 진행했던 <a href=\"https://openinfradays.kr/#schedule\">Open Infra Days 2019</a>에 참여하면서\n배운 점들을 간단히 정리해보고자 한다. 해외의 CNCF 컨퍼런스처럼 사람들의 관심이 높아지고 있다는걸 느낄 수 있었다.\n그리고 돈 많은 후원사가 많아서 그런지 먹거리와 경품이 풍성했다. 하지만 내 번호는 한번도 당첨되지 않았다.</p>\n<p>내가 들었던 세션들은 주로 Kubernetes Scheduler, Controller, Kubernetes 기반의 ML Workflow에 대한 내용이었다.</p>\n<br>\n<h2 id=\"kubernetes-scheduler-deep-dive\" style=\"position:relative;\"><a href=\"#kubernetes-scheduler-deep-dive\" aria-label=\"kubernetes scheduler deep dive permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>kubernetes scheduler deep dive</h2>\n<p><img src=\"http://drive.google.com/uc?export=view&#x26;id=1yIIsllw24U7pTsytGg38t1OapYsLo0UT\"></p>\n<ul>\n<li>kube default 스케줄러가 어떻게 동작하는지, custom 스케줄러를 어떻게 적용시킬 수 있는지에 대한 내용</li>\n<li>어려운 내용을 단계 별로 도식화하여 쉽게 설명해주셔서 좋았음</li>\n<li><a href=\"https://drive.google.com/file/d/1bqkUrXOEUvNZxf0iXghlPZ5DSJhRZ85t/view?fbclid=IwAR34JIei_4nzEgZfZkk8knwLQN-ldyRI5t1x-VQN9dVSq4b1CjAcZQ_LTpk\">발표자료 링크</a></li>\n</ul>\n<br>\n<h2 id=\"kubernetes에서-kafka와-flink를-사용하여-실시간-스트리밍-구현하기\" style=\"position:relative;\"><a href=\"#kubernetes%EC%97%90%EC%84%9C-kafka%EC%99%80-flink%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EC%8B%A4%EC%8B%9C%EA%B0%84-%EC%8A%A4%ED%8A%B8%EB%A6%AC%EB%B0%8D-%EA%B5%AC%ED%98%84%ED%95%98%EA%B8%B0\" aria-label=\"kubernetes에서 kafka와 flink를 사용하여 실시간 스트리밍 구현하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kubernetes에서 kafka와 flink를 사용하여 실시간 스트리밍 구현하기</h2>\n<ul>\n<li>주로 적용하면서 겪었던 문제들에 대한 내용을 공유</li>\n<li>kafka, flink의 state가 크게 증가하는 경우 이슈 발생 가능 (retension으로 정리)</li>\n<li><a href=\"https://www.slideshare.net/secret/xLiHQcuZoRWhZd?fbclid=IwAR34j570PitRo3lwwDpU1LvJ5CI5MmsJky3pYXE5PVRyY29J5XBmqXKQt3I\">발표자료 링크</a></li>\n<li><a href=\"https://github.com/protess/k3a-f3k-k8s\">핸즈온 링크</a></li>\n</ul>\n<br>\n<h2 id=\"line에서-kubernetes를-쓰는-방법-배운-것들\" style=\"position:relative;\"><a href=\"#line%EC%97%90%EC%84%9C-kubernetes%EB%A5%BC-%EC%93%B0%EB%8A%94-%EB%B0%A9%EB%B2%95-%EB%B0%B0%EC%9A%B4-%EA%B2%83%EB%93%A4\" aria-label=\"line에서 kubernetes를 쓰는 방법 배운 것들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LINE에서 Kubernetes를 쓰는 방법, 배운 것들</h2>\n<p><img src=\"http://drive.google.com/uc?export=view&#x26;id=1RXRMOZYuyVSOvXGcZwFb9l5yTiW5I_aX\"></p>\n<ul>\n<li>사내 프라이빗 클라우드 Verda에 Kubernetes 기반의 서비스를 올리면서 겪은 이슈</li>\n<li>Kubernetes as a Service를 개발하면서 겪은 이슈</li>\n<li>Kube Custom Controller를 구현하는 방법</li>\n</ul>\n<br>\n<h2 id=\"카카오-t택시를-통해-살펴보는-카카오의-kubernetes-as-a-service\" style=\"position:relative;\"><a href=\"#%EC%B9%B4%EC%B9%B4%EC%98%A4-t%ED%83%9D%EC%8B%9C%EB%A5%BC-%ED%86%B5%ED%95%B4-%EC%82%B4%ED%8E%B4%EB%B3%B4%EB%8A%94-%EC%B9%B4%EC%B9%B4%EC%98%A4%EC%9D%98-kubernetes-as-a-service\" aria-label=\"카카오 t택시를 통해 살펴보는 카카오의 kubernetes as a service permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>카카오 T택시를 통해 살펴보는 카카오의 kubernetes as a service</h2>\n<ul>\n<li>사내 프라이빗 클라우드에 Kubernetes as a Service 개발하면서 이슈 공유</li>\n<li>기존 LDAP 통합 인증을 위해 kubectl login plugin 개발</li>\n<li>In-House Custom DNS Controller 개발 과정 (Operator SDK 사용)</li>\n<li>카카오 T 택시를 Kubernetes 기반으로 마이그레이션 했던 과정 공유</li>\n</ul>\n<br>\n<h2 id=\"kakao-automatic-k8s-monitoring\" style=\"position:relative;\"><a href=\"#kakao-automatic-k8s-monitoring\" aria-label=\"kakao automatic k8s monitoring permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Kakao automatic k8s monitoring</h2>\n<ul>\n<li>카카오의 대용량 K8S 클러스터 모니터링 자동화 서비스 개발 공유</li>\n<li>pod, ingress, api-server, system 지표를 자동으로 수집, 알림, 모니터링</li>\n<li>자동으로 리소스 정리, 플러그인을 Helm으로 배포</li>\n<li>EFK + prometheus 기반으로 개발</li>\n<li>OOM 이슈 해결을 위한 불필요 메트릭 제거 (카디널리티 분석)</li>\n</ul>\n<br>\n<h2 id=\"efficient-job-scheduling-for-ml-workloads-in-kube-env\" style=\"position:relative;\"><a href=\"#efficient-job-scheduling-for-ml-workloads-in-kube-env\" aria-label=\"efficient job scheduling for ml workloads in kube env permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Efficient Job scheduling for ML workloads in kube env</h2>\n<ul>\n<li>삼성전자의 ML Workflow 플랫폼 개발하면서 겪은 이슈 공유</li>\n<li>kube default scheduler가 ML Workflow에 안맞는 이유 설명</li>\n<li>Kube 기반의 분산 DL 학습에서 병목이 가능한 지점들 설명</li>\n<li>kube-batch로 스케줄링 최적화하는 과정 (PodGroup을 기준으로 스케줄링)</li>\n<li>기타 ML Job에서 발생할 수 있는 이슈 (GPU Staggler, Locality...)</li>\n</ul>\n<br>\n<h2 id=\"대규모-gpu-기반-k8s-cluster를-활용한-ml-training-이슈\" style=\"position:relative;\"><a href=\"#%EB%8C%80%EA%B7%9C%EB%AA%A8-gpu-%EA%B8%B0%EB%B0%98-k8s-cluster%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%9C-ml-training-%EC%9D%B4%EC%8A%88\" aria-label=\"대규모 gpu 기반 k8s cluster를 활용한 ml training 이슈 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대규모 GPU 기반 k8s cluster를 활용한 ml training 이슈</h2>\n<ul>\n<li>삼성전자의 Kube 기반 GPU 클러스터를 운영하면서 겪은 이슈 공유</li>\n<li>CPU-GPU, GPU-GPU 간의 연결 파이프라인 (NVIDIA/DALI)</li>\n<li>GPGPU 간 데이터 복제 오버헤드 문제, CNI 이슈</li>\n<li>Processing 단계에서 Feeding Bottleneck 문제</li>\n</ul>\n<br>\n<h2 id=\"kubernetes를-활용하여-효율적인-ml-pipeline-만들기\" style=\"position:relative;\"><a href=\"#kubernetes%EB%A5%BC-%ED%99%9C%EC%9A%A9%ED%95%98%EC%97%AC-%ED%9A%A8%EC%9C%A8%EC%A0%81%EC%9D%B8-ml-pipeline-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"kubernetes를 활용하여 효율적인 ml pipeline 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>kubernetes를 활용하여 효율적인 ml pipeline 만들기</h2>\n<ul>\n<li>AWS 에서 ML 플랫폼 개발, 설계 단계에 대해 공유</li>\n<li>학습 데이터를 전달하기 위해 EC2 NFS 서버를 PV로 사용 (S3FS로 했다가 수정)</li>\n<li>Inference 서버는 TensorRT를 활용 (Sync, Async)</li>\n<li><a href=\"https://on-demand.gputechconf.com/gtc/2019/presentation/_/s9264-how-to-build-efficient-ml-pipelines-from-the-startup-perspective.pdf\">발표자료 링크</a></li>\n</ul>\n<br>\n<h2 id=\"정리하면서\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC%ED%95%98%EB%A9%B4%EC%84%9C\" aria-label=\"정리하면서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리하면서</h2>\n<p>발표를 통해 Scheduler, Controller에 대한 내용을 더 잘 이해할 수 있었고, 기술 세션 뿐만 아니라 Kubernetes에 대한 생각과\n향후 개발 방향을 공유하는 발표도 많았던 점이 좋았다.</p>\n<p>여러 세션에서 공유했던 이슈들을 다시 보니 Ingreess/Egress, DNS Controller, RBAC에 대한 내용이 특히 많았다.\n사내에 적용하면서 당연히 마주하게 될 부분일테니 네트워크, 인증 관련 부분은 다시 공부해보려한다.</p>\n<br>","excerpt":"19일부터 진행했던 Open Infra Days 2019에 참여하면서\n배운 점들을 간단히 정리해보고자 한다. 해외의 CNCF…"}}}}]}},"pageContext":{"basePath":"","paginationPath":"","pageNumber":2,"humanPageNumber":3,"skip":13,"limit":6,"numberOfPages":15,"previousPagePath":"/2","nextPagePath":"/4"}}}