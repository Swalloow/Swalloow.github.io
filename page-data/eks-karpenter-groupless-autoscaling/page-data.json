{"componentChunkName":"component---src-templates-post-js","path":"/eks-karpenter-groupless-autoscaling/","result":{"data":{"contentfulPost":{"id":"573e9f5f-beea-54d9-aff8-918f477ae03a","title":"EKS Karpenter를 활용한 Groupless AutoScaling","slug":"eks-karpenter-groupless-autoscaling","metaDescription":null,"publishDate":"May 13, 2022","publishDateISO":"2022-05-13","tags":[{"title":"DevOps","id":"701ee587-d6e3-5391-af93-e295765b6f45","slug":"devops"}],"heroImage":{"id":"f36c235f-3e3e-517d-bd80-697bc6183072","title":"cover-devops","fluid":{"aspectRatio":1.5,"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50 1080w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50&fm=webp 1080w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"ac3a803f-1cdb-5459-9902-a5c10a366151","childMarkdownRemark":{"id":"b1939eae-8e3c-597c-8e20-a18f9cad131d","timeToRead":5,"html":"<p>21년 12월 EKS에서 새로운 쿠버네티스 클러스터 오토스케일러인 <a href=\"https://aws.amazon.com/ko/blogs/korea/introducing-karpenter-an-open-source-high-performance-kubernetes-cluster-autoscaler/\">Karpenter</a>를 발표했습니다.<br>\n이후로 많은 사용자들이 오픈소스에 참여하면서 버전도 많이 올라갔고 안정적으로 사용하고 있습니다. 이 글에서는 Karpenter와 기존에 사용하던 Cluster AutoScaler를 비교하고 이관할 때 알아두면 좋은 내용에 대해 정리해보려 합니다.</p>\n<br>\n<h2 id=\"cluster-autoscaler가-가진-한계점\" style=\"position:relative;\"><a href=\"#cluster-autoscaler%EA%B0%80-%EA%B0%80%EC%A7%84-%ED%95%9C%EA%B3%84%EC%A0%90\" aria-label=\"cluster autoscaler가 가진 한계점 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Cluster AutoScaler가 가진 한계점</h2>\n<p><img src=\"http://drive.google.com/uc?export=view&#x26;id=1qGi_2q3niqMYxOuKSUauMHzDE7JQEB_5\" alt=\"eksasg\"></p>\n<p>그 동안 EKS의 Cluster AutoScaler는 <strong>AWS의 AutoScaling Group(ASG)</strong>을 활용하고 있었습니다. ASG는 주기적으로 현재 상태를 확인하고 Desired State로 변화하는 방식으로 동작합니다. 사용자는 목적에 맞게 노드 그룹을 나누고 ASG의 Min, Max 설정을 통해 클러스터 노드 수를 제한할 수 있습니다. 이를 통해 기존 AWS 사용자가 직관적인 구조를 그대로 활용할 수 있었습니다. 하지만 클러스터의 규모가 커질수록 ASG 활용으로 인해 불편한 점이 존재했습니다.</p>\n<p><strong>1. 번거로운 ASG 노드 그룹 관리</strong><br>\nK8S 클러스터는 여러 조직이 함께 사용할 수 있는 멀티테넌트 구조를 지원합니다. 두 조직이 서비스의 안정적인 운영을 위해 노드 그룹을 격리해야 하는 요구사항이 생기면 EKS 운영자는 새로운 ASG 노드 그룹을 생성하고 관리해주어야 합니다. 많은 운영자가 EKS의 IaC 구현을 위해 <a href=\"https://github.com/terraform-aws-modules/terraform-aws-eks\">terraform-aws-eks</a> 모듈을 사용하는데 여기에 매번 설정을 업데이트하고 반영하는 일은 번거롭고 각 조직에게 역할을 위임하기도 애매합니다.</p>\n<p>또 다른 예시는 리소스 활용 목적에 따라 노드 그룹을 분리할 때 입니다. 많은 CPU가 필요한 워크로드는 컴퓨팅 최적화 인스턴스 유형을 사용하고 메모리가 필요한 워크로드는 메모리 최적화 인스턴스 유형을 사용하는 것이 효율적입니다. 그리고 비용 최적화를 위해 spot 인스턴스 유형을 사용할 수도 있습니다. 이를 구현하기 위해 ASG에서는 c타입, r타입, spot 인스턴스를 가지는 각 노드 그룹을 만들어주어야 합니다.</p>\n<p><strong>2. ASG로 인한 노드 프로비저닝 시간 지연</strong><br>\nEKS Cluster AutoScaler는 K8S의 Cluster AutoScaler에 ASG를 활용하여 AWS cloud provider를 구현한 형태입니다. 클러스터 내에서 어플리케이션 로드를 감지한 이후, 중간에 AWS 리소스 요청을 거치기 때문에 즉시 처리되기가 어렵습니다.</p>\n<br>\n<h2 id=\"karpenter-소개\" style=\"position:relative;\"><a href=\"#karpenter-%EC%86%8C%EA%B0%9C\" aria-label=\"karpenter 소개 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Karpenter 소개</h2>\n<p><img src=\"http://drive.google.com/uc?export=view&#x26;id=1boQKLPL8qFLzZtkTwriGRH00PqjX1f3N\" alt=\"karpenter\"></p>\n<p>Karpenter는 다음과 같이 세 가지 컴포넌트로 구성되어 있습니다.</p>\n<ul>\n<li><strong>Controller</strong>: K8S controller 형태로 구현되어 pod 상태를 감시하고 노드 확장 및 축소</li>\n<li><strong>Webhook</strong>: Provisioner CRD에 대한 유효성 검사 및 기본값을 지정</li>\n<li><strong>Provisioner</strong>: Karpenter에 의해 생성되는 노드와 Pod에 대한 제약조건을 지정</li>\n</ul>\n<p><a href=\"https://github.com/aws/karpenter/tree/main/charts/karpenter\">Karpenter Helm Chart</a>를 통해 설치하면 controller와 webhook pod가 생성됩니다. 이후에 <a href=\"https://karpenter.sh/v0.10.0/provisioner/\">provisioner CRD</a>를 정의하고 클러스터에 배포하면 사용할 수 있습니다. provisioner는 ASG 노드 그룹과 유사한 개념입니다. 따라서 default를 사용하는게 아니라 기존에 사용하던 설정에 맞게 새로 만들어야 합니다. Scale In/Out 관련된 내용은 다음과 같습니다.</p>\n<h3 id=\"scale-out-기준\" style=\"position:relative;\"><a href=\"#scale-out-%EA%B8%B0%EC%A4%80\" aria-label=\"scale out 기준 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scale Out 기준</h3>\n<ul>\n<li>pending 상태의 pod 수, 리소스 요청량에 따라 수행</li>\n<li>신규 노드가 15분 동안 NotReady 상태라면 종료하고 새로 생성</li>\n<li>kubernetes well-known label 설정 가능</li>\n</ul>\n<h3 id=\"scale-in-기준\" style=\"position:relative;\"><a href=\"#scale-in-%EA%B8%B0%EC%A4%80\" aria-label=\"scale in 기준 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scale In 기준</h3>\n<ul>\n<li>노드에 예약된 pod가 없는 경우</li>\n<li>해당 노드에 대해 cordon, drain을 수행하고 삭제</li>\n<li><code class=\"language-text\">karpenter.sh/do-not-evict</code> 설정을 통해 보호 가능</li>\n</ul>\n<br>\n<h2 id=\"karpenter-vs-autoscaler\" style=\"position:relative;\"><a href=\"#karpenter-vs-autoscaler\" aria-label=\"karpenter vs autoscaler permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Karpenter vs AutoScaler</h2>\n<p>앞서 언급했던 Cluster AutoScaler와 Karpenter를 비교해보면 다음과 같습니다.</p>\n<p><strong>1. Provisioner API를 통해 간편한 노드 관리</strong><br></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">requirements:\n  - key: &quot;node.kubernetes.io/instance-type&quot;\n    operator: In\n    values: [&quot;m5.large&quot;, &quot;m5.2xlarge&quot;]\n  - key: &quot;topology.kubernetes.io/zone&quot;\n    operator: In\n    values: [&quot;ap-northeast-2a&quot;, &quot;ap-northeast-2c&quot;]\n  - key: &quot;karpenter.sh/capacity-type&quot;\n    operator: In\n    values: [&quot;spot&quot;, &quot;on-demand&quot;]</code></pre></div>\n<p>Karpenter는 노드 프로비저닝을 위해 ASG 노드 그룹을 생성할 필요가 없습니다. 대신 yaml을 통해 Provisioner CRD만 생성하면 됩니다. 현재 노드 프로비저닝을 위한 instance type, subnet, volume, SG 등 대부분의 설정을 지원하고 있습니다.</p>\n<p><strong>2. 수 많은 인스턴스 유형에 대해 유연하게 처리</strong><br>\nKarpenter는 노드 프로비저닝을 위해 EC2 Fleet API를 사용합니다. 사용자는\n여러 유형의 인스턴스를 지정할 수 있으며 어떤 유형의 인스턴스를 생성할지는 Karpenter가 결정합니다. 예를 들어 pending 상태의 pod가 1CPU, 4GB 리소스를 요청한다면 m5.large 인스턴스를 생성합니다. spot 인스턴스의 경우, Fleet API의 최저 입찰 경쟁에 따라 저렴한 비용으로 사용할 수 있습니다.</p>\n<p><strong>3. 노드 프로비저닝 시간 단축</strong><br>\nKarpenter는 Cluster AutoScaler와 동일한 역할을 하지만 자체 구현된 오픈소스로 JIT(Just-In-Time)을 지원합니다. 적용한 이후 실제로 약 2배 정도 프로비저닝 시간이 단축되었습니다. Karpenter를 통해 생성된 노드는 pre-pulling을 통해 이미지를 미리 받아올 수 있으며 빠른 컨테이너 런타임 준비를 통해 pod를 즉시 바인딩할 수 있습니다.</p>\n<p>두 가지 AutoScaler는 여러 장단점이 존재하기 때문에 적절하게 선택할 필요가 있습니다. 데이터 영역에서 활용하는 클러스터는 다양한 인스턴스 유형을 사용하고 빈번하게 스케일 조정이 일어나는 경우가 많습니다. 따라서 Karpenter가 가지는 장점을 최대로 활용할 수 있습니다.</p>\n<br>\n<h2 id=\"karpenter-이관-가이드\" style=\"position:relative;\"><a href=\"#karpenter-%EC%9D%B4%EA%B4%80-%EA%B0%80%EC%9D%B4%EB%93%9C\" aria-label=\"karpenter 이관 가이드 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Karpenter 이관 가이드</h2>\n<p>최근에 <a href=\"https://karpenter.sh/v0.10.0/getting-started/migrating-from-cas/\">공식 이관 가이드</a>가 나와서 사용했던 이관 방법들과 주의사항에 대해 정리해보았습니다.</p>\n<h3 id=\"이관-방법\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EA%B4%80-%EB%B0%A9%EB%B2%95\" aria-label=\"이관 방법 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이관 방법</h3>\n<ul>\n<li>Cluster AutoScaler의 일부 노드 그룹을 Provisioner로 이관하는 방식으로 진행하면 점진적으로 옮겨갈 수 있습니다.</li>\n<li>기존에 사용하던 설정들과 Scale In/Out에 대한 테스트는 karpenter 문서에서 안내하는 inflate pod을 통해 진행할 수 있습니다.</li>\n<li>Provisioner yaml 설정에 익숙하지 않다면 <a href=\"https://karpenter.sh/v0.10.0/aws/launch-templates/\">launch template을 만들어 정의하는 방법</a>도 있습니다. 하지만 동일 설정이 있다면 Karpenter에서는 Provisioner yaml을 우선시하기 때문에 launch template 사용하는 방법을 권장하지 않습니다.</li>\n<li>Scale In에서 노드가 종료되는 시간을 조정하기 위해 TTL 설정을 사용하는 것이 좋습니다. TTL 설정이 너무 작으면 잠시 재시작하는 상황에서도 Scale In/Out이 빈번하게 발생할 수 있습니다.</li>\n</ul>\n<br>\n<h3 id=\"karpenter가-가지는-제한-사항\" style=\"position:relative;\"><a href=\"#karpenter%EA%B0%80-%EA%B0%80%EC%A7%80%EB%8A%94-%EC%A0%9C%ED%95%9C-%EC%82%AC%ED%95%AD\" aria-label=\"karpenter가 가지는 제한 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Karpenter가 가지는 제한 사항</h3>\n<ul>\n<li>Karpenter에 의해 생성되는 노드는 현재 ASG max 설정과 같은 클러스터 상한선 기준이 없습니다. 따라서 노드에 대한 모니터링과 알림이 필요합니다. Karpenter에서는 프로메테우스 메트릭을 제공하고 있습니다.</li>\n<li>Karpenter의 Binpacking 로직은 VPC CNI 네트워크 사용을 가정하기 때문에 커스텀 CNI를 사용한다면 제대로 동작하지 않을 수 있습니다.</li>\n<li>0.10 이전 버전에서는 <code class=\"language-text\">podAffinity</code>, <code class=\"language-text\">podAntiAffinity</code>를 지원하지 않습니다. 따라서 하위 버전을 사용한다면 <code class=\"language-text\">nodeSelector</code>, <code class=\"language-text\">topologySpreadConstraints</code>를 활용하셔야 합니다.</li>\n</ul>\n<br>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://karpenter.sh/\">https://karpenter.sh/</a></li>\n<li><a href=\"https://aws.github.io/aws-eks-best-practices/karpenter/\">https://aws.github.io/aws-eks-best-practices/karpenter/</a></li>\n</ul>","excerpt":"21년 12월 EKS에서 새로운 쿠버네티스 클러스터 오토스케일러인 Karpenter를 발표했습니다.\n이후로 많은 사용자들이 오픈소스에 참여하면서 버전도 많이 올라갔고 안정적으로 사용하고 있습니다. 이 글에서는 Karpenter와 기존에 사용하던 Cluster AutoScaler를 비교하고 이관할 때 알아두면 좋은 내용에 대해 정리해보려 합니다. Cluster AutoScaler가 가진 한계점 eksasg 그 동안 EKS의 Cluster AutoScaler는 AWS의 AutoScaling Group(ASG)을 활용하고 있었습니다. ASG…"}}}},"pageContext":{"slug":"eks-karpenter-groupless-autoscaling","basePath":"","prev":null,"next":{"slug":"feat-adr","publishDate":"2021-12-04"}}}}