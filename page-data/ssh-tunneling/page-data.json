{"componentChunkName":"component---src-templates-post-js","path":"/ssh-tunneling/","result":{"data":{"contentfulPost":{"id":"be1fecdd-d49e-5a65-a889-c81ed16ca502","title":"SSH 프로토콜과 Tunneling 이해하기","slug":"ssh-tunneling","metaDescription":null,"publishDate":"March 20, 2017","publishDateISO":"2017-03-20","tags":[{"title":"DevOps","id":"701ee587-d6e3-5391-af93-e295765b6f45","slug":"devops"}],"heroImage":{"id":"f36c235f-3e3e-517d-bd80-697bc6183072","title":"cover-devops","fluid":{"aspectRatio":1.5,"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50 1080w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50&fm=webp 1080w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"6e667a13-51d5-5a76-84fa-879ab68c2ae1","childMarkdownRemark":{"id":"d2c92ba6-734d-5c6a-aa78-753e72695758","timeToRead":2,"html":"<p>지금까지 아무 생각없이 SSH를 사용하다가 한번 정리해보았습니다.</p>\n<br>\n<h2 id=\"ssh-protocol\" style=\"position:relative;\"><a href=\"#ssh-protocol\" aria-label=\"ssh protocol permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SSH Protocol</h2>\n<p>SSH는 Secure Shell의 약자입니다. SSH는 한마디로 정의하면,\n네트워크 상의 다른 컴퓨터에 로그인하거나 원격 시스템에서 명령을 실행하고\n다른 시스템으로 파일을 복사할 수 있도록 해 주는 프로토콜입니다.\nVPN을 구성하는 것보다 가격이 저렴하고 쉽게 연결할 수 있어 많이 사용됩니다.</p>\n<p>MacOS에는 <strong>OpenSSH</strong> 클라이언트와 서버가 내장되어 있기 때문에 바로 사용할 수 있습니다.\nSSH는 <strong>22번 포트</strong> 를 사용하며, 크게 다음의 3가지를 제공합니다.</p>\n<br>\n<h3 id=\"1-authentication\" style=\"position:relative;\"><a href=\"#1-authentication\" aria-label=\"1 authentication permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Authentication</h3>\n<p><img src=\"https://drive.google.com/uc?export=view&#x26;id=1v4YYf61a_cXAEuV__dZq6IlUcq9gH7xS\" alt=\"SSH-Auth\"></p>\n<p>SSH는 public key와 private key를 사용하는 비대칭 암호방식을 사용합니다.\n간단히 설명하면, <code class=\"language-text\">public key</code>와 <code class=\"language-text\">private key</code>가 모두 있어야 인증이 되는 방식입니다.\n각자 private key는 외부 유출없이 가지고 있고, public key만 네트워크를 통해 전달합니다.\nSSH는 RSA, DSA 등 다양한 인증 방식을 지원합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ssh-keygen\n$ <span class=\"token function\">cat</span> ~/.ssh/id_rsa.pub</code></pre></div>\n<p><code class=\"language-text\">ssh-keygen</code> 명령어를 통해 ssh 키를 생성하고\n<code class=\"language-text\">~/.ssh/id_rsa.pub</code>에서 public key를 확인할 수 있습니다.</p>\n<br>\n<h3 id=\"2-encryption--integrity\" style=\"position:relative;\"><a href=\"#2-encryption--integrity\" aria-label=\"2 encryption  integrity permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Encryption &#x26; Integrity</h3>\n<p>SSH는 네트워크를 통해 전달되는 데이터를 암호화합니다.\n<code class=\"language-text\">3DES, blowfish</code> 등 여러 가지 암호화 방식을 제공하며,\n새로운 암호화 기법을 추가할 수도 있습니다.</p>\n<p>그리고 SSH는 네트워크를 통해 받은 데이터가 변경되지 않았음(무결성)을 보장해줍니다.\n이를 위해 <strong>MAC(Message Authentication Code)</strong> 이라는 알고리즘을 사용합니다.</p>\n<p><img src=\"https://drive.google.com/uc?export=view&#x26;id=12BSYkFJTGmWRFpj8aRrqPWD71Qt2vtwo\" alt=\"MAC-Algo\"></p>\n<p>MAC 알고리즘은 다음과 같이 동작합니다.\nSSH 클라이언트가 서버로 메세지를 보내면,\nMAC 알고리즘을 통해 <code class=\"language-text\">secret key</code>를 입력받아 MAC 코드를 생성합니다.\n그리고, 임의 길이의 암호화 된 메시지와 MAC 코드를 SSH 서버로 보냅니다.</p>\n<p>서버에서는 다시 메세지와 서버의 <code class=\"language-text\">secret key</code>를 조합하여 MAC 코드를 만들고,\n클라이언트로부터 받은 MAC 코드와 비교하여 인증을 진행하게 됩니다.</p>\n<br>\n<h3 id=\"4-compression\" style=\"position:relative;\"><a href=\"#4-compression\" aria-label=\"4 compression permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Compression</h3>\n<p>SSH는 네트워크 상에서 데이터를 전송하고 수신할 때 압축 과정을 거칩니다.\n이를 통해 전송 데이터의 크기를 줄여 네트워크 비용을 낮출 수 있습니다.</p>\n<br>\n<h2 id=\"ssh-tunneling\" style=\"position:relative;\"><a href=\"#ssh-tunneling\" aria-label=\"ssh tunneling permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SSH Tunneling</h2>\n<p>SSH Tunneling은 터널을 통해 데이터를 주고받는다 해서 붙여진 이름입니다.\n앞서 얘기했던 것처럼 연결, 통신은 모두 암호화되며 <code class=\"language-text\">SMTP, IMAP</code> 등 여러 가지로 사용될 수 있습니다.</p>\n<p>Direct로 보내면 네트워크 층에서 수 많은 공격을 받을 수 있기 때문에\nSSH를 통해 다른 Application에 연결하는 것이 안전합니다.\nSSH Tunneling에는 다음과 같이 두 가지 방법이 있습니다.</p>\n<br>\n<h3 id=\"local-port-forwarding\" style=\"position:relative;\"><a href=\"#local-port-forwarding\" aria-label=\"local port forwarding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Local port forwarding</h3>\n<p><img src=\"https://drive.google.com/uc?export=view&#x26;id=12xVy9uTaBYOEPUN86z_jvmT5gdANavMz\" alt=\"SSH-Local\"></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -L port1:host_name:port2 server_name</code></pre></div>\n<p>로컬에서 서버에 있는 MySQL과 SSH 연결을 한다고 가정해보겠습니다.\n<code class=\"language-text\">Local port forwarding</code>은\n로컬에 설치된 MySQL 클라이언트의 3306 포트가\n연결된 SSH Tunnel을 거쳐 서버에 있는 MySQL 서버의 3306 포트와 연결됩니다.\n이를 통해 직접 서버의 데이터베이스에 안전하게 접근할 수 있으며\n요청을 보내서 서로 데이터를 주고 받을 수 있습니다.</p>\n<br>\n<h3 id=\"remote-port-forwarding\" style=\"position:relative;\"><a href=\"#remote-port-forwarding\" aria-label=\"remote port forwarding permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Remote port forwarding</h3>\n<p><img src=\"https://drive.google.com/uc?export=view&#x26;id=1Rvb6zNQRDAdKBuWaGnSAu1FhRQTfeh42\" alt=\"SSH-Remote\"></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">ssh</span> -R port1:host_name:port2 server_name</code></pre></div>\n<p>이번에는 로컬에서 파이썬 웹 애플리케이션을 개발 중인데 친구에게 보여주고 싶다고 가정 해보겠습니다.\n아직 공개 IP 주소를 제공하지 않기 때문에 인터넷을 통해 직접 기기에 연결할 수 없을 겁니다.\n라우터에서 NAT를 구성하여 해결할 수 있지만 라우터의 구성을 변경해야하므로 번거롭습니다.\n이럴때 <code class=\"language-text\">Remote port forwarding</code>을 통해 쉽게 해결할 수 있습니다.</p>\n<p>먼저 port1의 서버에서 port2로 로컬 트래픽을 전달하는 SSH 터널을 생성합니다.\n이후 로컬에서 port2의 서버에 연결하면 실제로 SSH 터널을 통해 데이터를 요청하는 것을 확인할 수 있습니다.</p>\n<p>OSI 7계층에서 생각해보면 SSH는 <code class=\"language-text\">Application - Transport - Network</code> 계층에 걸쳐있습니다.\nApplication 계층에서 포트를 연결하면 Transport 계층의 TCP 통신을 통해 전달되고,\nNetwork 계층을 통해 목적지로 이동하게 됩니다.</p>\n<br>","excerpt":"지금까지 아무 생각없이 SSH를 사용하다가 한번 정리해보았습니다. SSH Protocol SSH는 Secure Shell의 약자입니다. SSH는 한마디로 정의하면,\n네트워크 상의 다른 컴퓨터에 로그인하거나 원격 시스템에서 명령을 실행하고\n다른 시스템으로 파일을 복사할 수 있도록 해 주는 프로토콜입니다.\nVPN을 구성하는 것보다 가격이 저렴하고 쉽게 연결할 수 있어 많이 사용됩니다. MacOS에는 OpenSSH 클라이언트와 서버가 내장되어 있기 때문에 바로 사용할 수 있습니다.\nSSH는 22번 포트 를 사용하며, 크게 다음의 3가지를 제공합니다.…"}}}},"pageContext":{"slug":"ssh-tunneling","basePath":"","prev":{"slug":"jupyter-spark","publishDate":"2017-03-22"},"next":{"slug":"scala-for-bigdata","publishDate":"2017-03-17"}}}}