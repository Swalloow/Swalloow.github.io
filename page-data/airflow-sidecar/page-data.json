{"componentChunkName":"component---src-templates-post-js","path":"/airflow-sidecar/","result":{"data":{"contentfulPost":{"id":"c97edb01-df3d-53e4-bc7a-47e2e5d6feb2","title":"사이드카 컨테이너로 Airflow 기능 확장하기","slug":"airflow-sidecar","metaDescription":null,"publishDate":"August 01, 2021","publishDateISO":"2021-08-01","tags":[{"title":"DataEngineering","id":"6d3fb203-7cdf-53d7-be6f-12ba3e82d74d","slug":"dataengineering"}],"heroImage":{"id":"dab22ea8-d54d-52a6-852a-278ba3b19a2b","title":"cover-dataengineering","fluid":{"aspectRatio":1.499531396438613,"src":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=450&h=300&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=900&h=600&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1600&h=1067&q=50 1600w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=450&h=300&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=900&h=600&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1600&h=1067&q=50&fm=webp 1600w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/7uo9TsqFN9EBsDBqDJ5vXl/4c58a9f94babb15d8fd996c247737656/cover_dataengineering.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"943e8b84-7c33-5c3d-9d5a-ac780a6c7746","childMarkdownRemark":{"id":"9370d60d-b64f-5b01-9e00-d82e32fe4218","timeToRead":3,"html":"<p>Airflow 2.1 버전부터 공식 Helm Chart가 정식 릴리즈 되었습니다.\n오늘은 공식 차트에서 사용할 수 있는 기능 중 <code class=\"language-text\">extraContainers</code> 옵션을 활용하는 방법에 대해 소개해보려 합니다.</p>\n<br>\n<h2 id=\"sidecar-container\" style=\"position:relative;\"><a href=\"#sidecar-container\" aria-label=\"sidecar container permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Sidecar Container</h2>\n<p>분산 컨테이너 환경에서 사이드카 패턴이란 Pod 안에서 두 개 이상의 컨테이너로 구성되어 있는 형태를 말합니다. 컨테이너들은 서로 네트워크 또는 볼륨을 공유할 수 있습니다. 사이드카 컨테이너를 활용하면 다음과 장점을 가져갈 수 있습니다.</p>\n<p><strong>기존 로직의 변경 없이 새로운 기능 추가</strong>\n가끔 일부 기능 추가를 위해 Airflow 저장소 코드를 수정하는 경우가 생길 수 있습니다.\n하지만 이렇게 한번 수정하고 나면 이후에 버전 업데이트할 때마다 새로운 버전 브랜치와 병합해야 하는 번거로움이 생깁니다. 만약 원하는 기능이 사이드카 컨테이너를 활용할 수 있다면 적용해보는 것이 좋습니다.</p>\n<p><strong>컨테이너 재사용</strong>\n사내에서 개발 환경에 따라 또는 접근 권한에 따라 Airflow 인스턴스를 여러 개 구성하고 운영하는 경우가 많습니다. 사이드카 컨테이너로 구성한 기능은 재사용이 가능하기 때문에 새로 배포한 Airflow 인스턴스에 쉽게 적용할 수 있습니다.</p>\n<br>\n<h2 id=\"airflow-extracontainers\" style=\"position:relative;\"><a href=\"#airflow-extracontainers\" aria-label=\"airflow extracontainers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Airflow extraContainers</h2>\n<p>Airflow Helm Chart에서는 <code class=\"language-text\">extraContainers</code> 옵션을 통해 사이드카 컨테이너를 scheduler, webserver, worker에 정의할 수 있습니다. (<del>제가 기여한 옵션입니다!</del>)</p>\n<p><a href=\"https://github.com/apache/airflow/pull/13735\">https://github.com/apache/airflow/pull/13735</a></p>\n<p>이제 몇 가지 예시를 통해 어떻게 활용할 수 있는지 알아보겠습니다.</p>\n<br>\n<h3 id=\"1-s3-sync-container\" style=\"position:relative;\"><a href=\"#1-s3-sync-container\" aria-label=\"1 s3 sync container permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. S3 Sync Container</h3>\n<p><img src=\"https://drive.google.com/uc?export=view&#x26;id=1Hh0f6l9jDLHHEaH5OyGU7Nhe5nUnnJU1\"></p>\n<p>AWS MWAA 처럼 <strong>S3를 DAG 저장소로 활용하고 싶은 경우</strong>에 S3 Sync 사이드카 컨테이너를 통해 구현할 수 있습니다. S3 Sync 사이드카 컨테이너는 S3 버킷에 올라간 파일을 DAG 경로에 주기적으로 동기화하는 컨테이너입니다. 만약 DAG Serialiaztion 옵션이 활성화되어 있다면 scheduler에만 정의하시면 됩니다. 예시는 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">scheduler</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">extraContainers</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> s3<span class=\"token punctuation\">-</span>sync\n      <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> myrepository/s3<span class=\"token punctuation\">-</span>sync<span class=\"token punctuation\">:</span>latest\n      <span class=\"token key atrule\">imagePullPolicy</span><span class=\"token punctuation\">:</span> Always\n      <span class=\"token key atrule\">volumeMounts</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> dags\n          <span class=\"token key atrule\">mountPath</span><span class=\"token punctuation\">:</span> /opt/airflow/dags\n      <span class=\"token key atrule\">env</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> AWS_BUCKET\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> airflow<span class=\"token punctuation\">-</span>src\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> KEY_PATH\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> dags\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> DEST_PATH\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> /opt/airflow/dags\n        <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> INTERVAL\n          <span class=\"token key atrule\">value</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"10\"</span></code></pre></div>\n<br>\n<p>위와 같이 인스턴스마다 서로 다른 설정이 필요한 값들은 환경변수로 구성할 수 있도록 이미지를 정의합니다. Dockerfile은 <a href=\"https://github.com/Swalloow/s3-sync\">s3sync</a> 저장소를 참고하시면 됩니다. S3 접근 권한은 직접 credential을 사용하는 것보다 EKS의 IRSA를 활용해서 Role 기반으로 제어하는 편이 좋습니다.</p>\n<br>\n<h3 id=\"2-permission-sync-container\" style=\"position:relative;\"><a href=\"#2-permission-sync-container\" aria-label=\"2 permission sync container permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Permission Sync Container</h3>\n<p>2.0 부터 추가된 <strong>DAG level Permission을 사용하는 경우</strong>, airflow sync-perm 명령어를 통해 DAG 권한을 갱신해주어야 Role에 권한제어가 정상적으로 반영됩니다. Permission Sync 컨테이너는 webserver에서 주기적으로 <code class=\"language-text\">sync-perm</code> 명령어를 수행하는 역할을 합니다. 예시는 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">webserver:\n  extraContainers:\n    - name: sync-perm\n      image: apache/airflow:2.1.2-python3.7\n      imagePullPolicy: Always\n      command: [&quot;/bin/sh&quot;]\n      args: [&quot;-c&quot;, &quot;while true; do airflow sync-perm; sleep 60; done&quot;]\n      volumeMounts:\n        - name: dags\n          mountPath: &quot;/opt/airflow/dags&quot;\n      env:\n        - name: AIRFLOW__CORE__SQL_ALCHEMY_CONN\n          valueFrom:\n            secretKeyRef:\n              key: connection\n              name: airflow-dev-airflow-metadata</code></pre></div>\n<br>\n<p>보시면 Airflow 이미지와 정의된 connection을 재활용 합니다. 컴포넌트 컨테이너와 분리되어 있으니 사이드카에서 발생하는 로그만 따로 확인할 수도 있습니다.</p>\n<br>\n<h3 id=\"3-kerberos-container\" style=\"position:relative;\"><a href=\"#3-kerberos-container\" aria-label=\"3 kerberos container permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Kerberos Container</h3>\n<p>클러스터에 접근하기 위해 Kerberos 인증이 필요한 경우, Kerberos 컨테이너를 활용하면 인증 토큰 갱신을 자동화할 수 있습니다. <a href=\"https://airflow.apache.org/docs/apache-airflow/stable/production-deployment.html#kerberos-authenticated-workers\">Airflow 공식 문서</a>의 production-deployment 부분을 보면 아래와 같은 내용이 있습니다.</p>\n<blockquote>\n<p>In the Kubernetes environment, this can be realized by the\nconcept of side‐car, where both Kerberos token refresher and\nworker are part of the same Pod. Only the Kerberos side‐car has\naccess to Keytab secret and both containers in the same Pod\nshare the volume, where temporary token is written by the side‐\ncare container and read by the worker container.</p>\n</blockquote>\n<p>대략 K8S 환경에서 사이드카 형태로 구성하는 방법에 대한 내용입니다.\n이를 그림으로 그려보면 아래와 같습니다.</p>\n<p><img src=\"https://drive.google.com/uc?export=view&#x26;id=14rfnQmDROdWpqN4TNQJr02_sIT9E_K0i\" alt=\"krb\"></p>\n<p>kerberos 컨테이너는 keytab이 존재하는 볼륨에 접근하고 kinit 명령어를 통해 ccache를 갱신합니다. airflow 인스턴스들의 worker는 해당 볼륨의 갱신된 토큰을 통해 인증을 달성할 수 있습니다. prod, dev와 같이 여러 airflow를 사용하더라도 kerberos의 컨테이너에서 한번만 캐시 업데이트를 수행하면 됩니다. 예시는 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">worker:\n  extraContainers:\n    - name: worker-kerberos\n      image: myrepository/kerberos:latest\n      imagePullPolicy: Always\n      volumeMounts:\n        - name: keytab\n          mountPath: /etc/keytab\n      env:\n        - name: INTERVAL\n          value: &quot;3600&quot;\n        - name: KRB5_CONFIG\n          value: /etc/keytab/krb5.conf\n\n...\n\nextraVolumes:\n  - name: keytab\n    persistentVolumeClaim:\n      claimName: airflow-keytab\nextraVolumeMounts:\n  - name: keytab\n    mountPath: &quot;/etc/keytab&quot;</code></pre></div>\n<br>\n<p>위와 같이 keytab이 존재하는 볼륨을 마운트해주어야 합니다.</p>\n<br>\n<h2 id=\"정리\" style=\"position:relative;\"><a href=\"#%EC%A0%95%EB%A6%AC\" aria-label=\"정리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>정리</h2>\n<p>이외에도 사이드카 컨테이너를 잘 활용한다면 다양한 기능으로 확장할 수 있습니다.\n<code class=\"language-text\">extraInitContainers</code> 옵션도 있으니 함께 활용해보면 좋을 것 같습니다.</p>\n<ul>\n<li><a href=\"https://airflow.apache.org/docs/helm-chart/stable/using-additional-containers.html\">https://airflow.apache.org/docs/helm-chart/stable/using-additional-containers.html</a></li>\n</ul>","excerpt":"Airflow 2.1 버전부터 공식 Helm Chart가 정식 릴리즈 되었습니다.\n오늘은 공식 차트에서 사용할 수 있는 기능 중  옵션을 활용하는 방법에 대해 소개해보려 합니다. Sidecar Container 분산 컨테이너 환경에서 사이드카 패턴이란 Pod 안에서 두 개 이상의 컨테이너로 구성되어 있는 형태를 말합니다. 컨테이너들은 서로 네트워크 또는 볼륨을 공유할 수 있습니다. 사이드카 컨테이너를 활용하면 다음과 장점을 가져갈 수 있습니다. 기존 로직의 변경 없이 새로운 기능 추가\n가끔 일부 기능 추가를 위해 Airflow…"}}}},"pageContext":{"slug":"airflow-sidecar","basePath":"","prev":null,"next":{"slug":"airflow-on-kubernetes-3","publishDate":"2021-02-05"}}}}