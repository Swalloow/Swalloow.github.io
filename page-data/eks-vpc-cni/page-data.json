{"componentChunkName":"component---src-templates-post-js","path":"/eks-vpc-cni/","result":{"data":{"contentfulPost":{"id":"6afb959a-b207-515c-89ff-0da71e2551fa","title":"EKS의 VPC 네트워크 구성 이해하기","slug":"eks-vpc-cni","metaDescription":null,"publishDate":"November 04, 2019","publishDateISO":"2019-11-04","tags":[{"title":"DevOps","id":"701ee587-d6e3-5391-af93-e295765b6f45","slug":"devops"}],"heroImage":{"id":"f36c235f-3e3e-517d-bd80-697bc6183072","title":"cover-devops","fluid":{"aspectRatio":1.5,"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50 1080w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=450&h=300&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=900&h=600&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1080&h=720&q=50&fm=webp 1080w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/7KaSTt3mdmrYq2ZK1RiJku/dafd981ff3686217ac151b562e8b1412/cover_devops.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"56442f16-a8c2-5f6a-89d3-868424f31087","childMarkdownRemark":{"id":"ae453983-e66b-52a7-8aa1-e8540834cc2c","timeToRead":3,"html":"<p>모든 Kubernetes as a Service가 그렇듯 EKS 역시 빠르게 변화하고 있습니다.\n오늘의 주제는 EKS의 VPC 네트워크 구성과 CNI 플러그인 입니다.</p>\n<br>\n<h2 id=\"aws-vpc\" style=\"position:relative;\"><a href=\"#aws-vpc\" aria-label=\"aws vpc permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>AWS VPC</h2>\n<p><img src=\"http://drive.google.com/uc?export=view&#x26;id=1YFGsyvNbctia5Q3dPrRT8KxtirnkII71\"></p>\n<p>아마 AWS를 production 환경에서 사용하고 있다면 VPC 구성은 이미 잘 이해하고 계시리라 생각합니다.\nVPC 내에 생성한 인스턴스는 eth0이라는 기본 네트워크 인터페이스를 가지게 됩니다.\n그리고 네트워크 인터페이스에 하나 이상의 IPv4 또는 IPv6 주소를 할당할 수 있습니다.\n또한 각 Subnet에 존재하는 인스턴스는 Route Table을 통해 통신을 할 수 있습니다.\n여기까지가 우리가 알고 있는 VPC 내의 Host 간 통신입니다.</p>\n<p>그렇다면 EKS는 어떤 점이 다를까요?\n쿠버네티스의 Pod은 <strong>한 개 이상의 컨테이너를 구성</strong>하고 같은 Host와 Network 스택을 공유합니다.\n그리고 여러 Host에 사이에 걸쳐 생성된 Pod은 <strong>Overlay Network</strong>를 통해 서로 통신하게 됩니다.\n기존 VPC 환경에서는 Pod 네트워크 통신을 기존 방식처럼 지원하기 어려웠습니다.</p>\n<p>하지만 대부분의 사용자들이 VPC 기반의 인프라를 구성하고 있었기 때문에\nEKS는 VPC를 지원할 수 있어야 했습니다.\n예를 들어 사용자는 Security Group, VPC Flow 로그 등의 기능을 그대로 사용하면서,\nPrivateLink를 통해 다른 AWS 서비스와 통신할 수 있어야 합니다.\n이 문제를 해결하기 위해 AWS는 CNI 라는 네트워크 플러그인을 지원하기 시작했습니다.</p>\n<br>\n<h2 id=\"eks-cni\" style=\"position:relative;\"><a href=\"#eks-cni\" aria-label=\"eks cni permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EKS CNI</h2>\n<p><img src=\"http://drive.google.com/uc?export=view&#x26;id=1pMXq0s4jrnvwLjoUGwfTfj4HQBsf2NiB\"></p>\n<p>CNI 는 다음과 같은 통신을 지원합니다.</p>\n<ul>\n<li>단일 Host 내에 존재하는 Pod 간의 통신</li>\n<li>서로 다른 Host 내에 존재하는 Pod 간의 통신</li>\n<li>Pod 과 다른 AWS 서비스 간의 통신</li>\n<li>Pod 과 온프레미스 데이터 센터 간의 통신</li>\n<li>Pod 과 인터넷 간의 통신</li>\n</ul>\n<p>앞서 말했듯 VPC 내의 EC2는 여러 개의 ENI 를 가질 수 있으며,\nENI 는 여러 개의 IP 주소를 가질 수 있습니다.\n하지만 인스턴스 유형 별 가질 수 있는 ENI 와 주소의 최대 수에는 제한이 있습니다.\n만약 EC2 인스턴스가 N개의 ENI와 M개의 주소를 가질 수 있다면 최대 IP는 아래와 같이 계산됩니다.</p>\n<p><code class=\"language-text\">Max IPs = min((N * M - N), subnet&#39;s free IP)</code></p>\n<p>처음 Worker Node가 추가되면 하나의 ENI 가 인스턴스에 할당됩니다.\n하지만 실행되는 Pod의 수가 단일 ENI 에서 허용하는 주소를 초과하면 CNI는 노드에 새로운 ENI 를 추가합니다.\nENI 에 secondary IP 할당과 Pod에 할당할 노드의 IP 주소 풀 관리는 <strong>L-IPAM</strong> 데몬을 통해 이루어집니다.\nL-IPAM 데몬은 모든 노드에 DeamonSet으로 배포되며 gRPC를 통해 CNI 플러그인과 통신합니다.</p>\n<p>사용하고 있는 인스턴스 유형이 m5.xlarge라고 가정하고 예시를 들어보겠습니다.\n우선 m5.xlarge 유형은 4 ENI 와 ENI 당 15 개의 IP 주소를 가질 수 있습니다.\n배포된 Pod의 수가 0에서 14 사이라면 IPAM 데몬은 2개의 Warm Pool을 유지하기 위해 ENI를 하나 더 할당합니다.\n이때 사용가능한 IP 수는 <code class=\"language-text\">2 * (15 - 1) = 28</code> 개가 됩니다.\n이런식으로 Warm Pool을 늘려가면서 최대 <code class=\"language-text\">4 * (15 - 1) = 56</code> 개의 IP를 가질 수 있습니다.\n물론 이 부분은 <code class=\"language-text\">WARM_ENI_TARGET</code> 과 같은 CNI 옵션을 통해 수정할 수 있습니다.</p>\n<br>\n<p><img src=\"http://drive.google.com/uc?export=view&#x26;id=1YctEii4hpUFN5ajMU0j0LSEv6AjGS3PU\"></p>\n<p>구체적으로 CNI를 통해 Pod1 과 Pod2가 어떻게 통신하는지 다이어그램으로 표현하면 위와 같습니다.\n각 Pod의 eth0에는 secondary IP address가 할당되며 Pod Side Route Table를 가지고 있습니다.\n노드의 네트워크 인터페이스까지 도달한 패킷은 EC2-VPC fabric에 의해 포워딩 됩니다.</p>\n<p>따라서 EKS 노드를 결정할 때 ENI 제한 관련 부분도 중요하게 생각하셔야 합니다.\n노드 당 ENI, IP 주소 제한은 <a href=\"https://docs.aws.amazon.com/ko_kr/AWSEC2/latest/UserGuide/using-eni.html\">해당 공식 문서</a>에서 확인하실 수 있습니다.\n물론 CNI를 사용하지 않고 기존의 Calico와 같은 Overlay Network를 사용할 수도 있습니다.\n하지만 이를 사용하게 되면 네트워크까지 관리해야하며 새로운 장애 포인트로 이어질 수 있습니다.</p>\n<p>​<br></p>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://github.com/aws/amazon-vpc-cni-k8s/blob/master/docs/cni-proposal.md\">https://github.com/aws/amazon-vpc-cni-k8s/blob/master/docs/cni-proposal.md</a></li>\n<li><a href=\"https://medium.com/google-cloud/understanding-kubernetes-networking-pods-7117dd28727\">https://medium.com/google-cloud/understanding-kubernetes-networking-pods-7117dd28727</a></li>\n</ul>\n<br>","excerpt":"모든 Kubernetes as a Service가 그렇듯 EKS 역시 빠르게 변화하고 있습니다.\n오늘의 주제는 EKS의 VPC 네트워크 구성과 CNI 플러그인 입니다. AWS VPC  아마 AWS를 production 환경에서 사용하고 있다면 VPC 구성은 이미 잘 이해하고 계시리라 생각합니다.\nVPC 내에 생성한 인스턴스는 eth0이라는 기본 네트워크 인터페이스를 가지게 됩니다.\n그리고 네트워크 인터페이스에 하나 이상의 IPv4 또는 IPv6 주소를 할당할 수 있습니다.\n또한 각 Subnet에 존재하는 인스턴스는 Route Table…"}}}},"pageContext":{"slug":"eks-vpc-cni","basePath":"","prev":{"slug":"eks-autoscale","publishDate":"2019-11-23"},"next":{"slug":"aws-cli-mfa","publishDate":"2019-10-03"}}}}