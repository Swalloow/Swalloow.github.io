{"componentChunkName":"component---src-templates-post-js","path":"/social-api-cognito/","result":{"data":{"contentfulPost":{"id":"a1e1ec94-6f0c-502a-82e1-ec0a0d82a479","title":"다양한 소셜 API를 연동하기 전에 고려할 것들 (AWS Cognito)","slug":"social-api-cognito","metaDescription":null,"publishDate":"January 28, 2017","publishDateISO":"2017-01-28","tags":[{"title":"Develop","id":"59312ab7-0dd9-5837-a3ba-024abd83a225","slug":"develop"}],"heroImage":{"id":"1563c3af-a4e8-5db4-acb2-9bfd9fdb294d","title":"cover-develop","fluid":{"aspectRatio":1.5,"src":"//images.ctfassets.net/tushy4jlcik7/4W9SzEIJpHuwsUBnxSSypH/3a18765095ea5756c742b7adb83a0518/cover_develop.jpg?w=1800&q=50","srcSet":"//images.ctfassets.net/tushy4jlcik7/4W9SzEIJpHuwsUBnxSSypH/3a18765095ea5756c742b7adb83a0518/cover_develop.jpg?w=450&h=300&q=50 450w,\n//images.ctfassets.net/tushy4jlcik7/4W9SzEIJpHuwsUBnxSSypH/3a18765095ea5756c742b7adb83a0518/cover_develop.jpg?w=900&h=600&q=50 900w,\n//images.ctfassets.net/tushy4jlcik7/4W9SzEIJpHuwsUBnxSSypH/3a18765095ea5756c742b7adb83a0518/cover_develop.jpg?w=1800&h=1200&q=50 1800w","srcWebp":"//images.ctfassets.net/tushy4jlcik7/4W9SzEIJpHuwsUBnxSSypH/3a18765095ea5756c742b7adb83a0518/cover_develop.jpg?w=1800&q=50&fm=webp","srcSetWebp":"//images.ctfassets.net/tushy4jlcik7/4W9SzEIJpHuwsUBnxSSypH/3a18765095ea5756c742b7adb83a0518/cover_develop.jpg?w=450&h=300&q=50&fm=webp 450w,\n//images.ctfassets.net/tushy4jlcik7/4W9SzEIJpHuwsUBnxSSypH/3a18765095ea5756c742b7adb83a0518/cover_develop.jpg?w=900&h=600&q=50&fm=webp 900w,\n//images.ctfassets.net/tushy4jlcik7/4W9SzEIJpHuwsUBnxSSypH/3a18765095ea5756c742b7adb83a0518/cover_develop.jpg?w=1800&h=1200&q=50&fm=webp 1800w","sizes":"(max-width: 1800px) 100vw, 1800px"},"ogimg":{"src":"//images.ctfassets.net/tushy4jlcik7/4W9SzEIJpHuwsUBnxSSypH/3a18765095ea5756c742b7adb83a0518/cover_develop.jpg?w=1800&fl=progressive&q=50"}},"body":{"id":"552f2798-9778-5a49-a811-7efc4c785289","childMarkdownRemark":{"id":"28e9aed0-c31a-54ea-b81e-af507e77bffa","timeToRead":2,"html":"<p>최근에 대부분의 웹, 모바일 어플리케이션에서 카카오, 네이버 등 다양한 소셜 로그인 기능을 제공하고 있다.\n만약 우리가 만들어야 할 어플리케이션이 다양한 소셜 로그인 API와 연동하여 사용자를 관리해야한다면, OAuth 인증, 보안 등 개발할 때 고려해야할 요소가 많을 것이다.</p>\n<p>따라서, 이 글을 통해 최근 유행하는 클라우드 기반 웹 어플리케이션 설계 방식을 아주 간단히 보고 적합한 설계 방식을 선택하는데 도움이 되었으면 좋겠다.</p>\n<p>OAuth2.0에 대해서는 이전에 쓴 글을 참조하길 바란다. <a href=\"http://swalloow.github.io/about-oauth2/\">http://swalloow.github.io/about-oauth2/</a></p>\n<br>\n<h2 id=\"1-oauth-20-grant-flow\" style=\"position:relative;\"><a href=\"#1-oauth-20-grant-flow\" aria-label=\"1 oauth 20 grant flow permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. OAuth 2.0 Grant Flow</h2>\n<p><img src=\"https://drive.google.com/uc?export=view&#x26;id=1FZ9pgjQbmhM8dulOcPlZKXVihhIbzT_e\" alt=\"OAuth2 Grant Flow1\"></p>\n<p>주로 자바스크립트 기반 웹 어플리케이션에서 많이 사용하는 방식이다. (스크립트 보안 유출 고려)\n최근에는 모바일에서도 많이 사용한다고 한다.</p>\n<br>\n<p><img src=\"https://drive.google.com/uc?export=view&#x26;id=1cbq-XSrQVgh7LU7qOOM70grUgMd6Bxds\" alt=\"OAuth2 Grant Flow2\"></p>\n<p>이 방식은 직접 ID, PW 보내는 방식으로 파트너나 자사 시스템에 사용한다.\n기존의 HTTP 방식을 그대로 사용하기 용이하다.</p>\n<p>위와 같은 방식을 사용했을 때의 장점은 OAuth 2.0을 몸소 체험할 수 있다는 것이다.\n반면에, 단점은 다음과 같다.</p>\n<ul>\n<li>사용자 데이터에 대한 보안을 고려해야 한다.</li>\n<li>Facebook, Twitter은 각자에게 최적화 되어 있어 확장성을 고려한 인증 인터페이스를 만들기 힘듬</li>\n<li>Token만 존재하기 때문에 사용자 관리, 사용자를 구분하기가 힘들다.</li>\n<li>모바일과 웹 어플리케이션이 모두 존재한다면, 인증 및 디바이스 간 동기화 처리 문제가 있다.</li>\n<li>시스템 충돌과 네트워크 연결 문제 또한 감당해야 한다.</li>\n</ul>\n<br>\n<h2 id=\"2-aws-ec2--cognito-baas\" style=\"position:relative;\"><a href=\"#2-aws-ec2--cognito-baas\" aria-label=\"2 aws ec2  cognito baas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. AWS EC2 + Cognito (BaaS)</h2>\n<p><img src=\"https://drive.google.com/uc?export=view&#x26;id=1tf1jsuBMKVBY2tVL8t-QAfZ-mZ7VExQP\" alt=\"AWS Authentication process\"></p>\n<p>사용자 로그인, 인증 처리에 대해 AWS Cognito를 사용한 방법이다.\n기본적인 EC2 인스턴스에 Cognito만 추가해서 사용하면 된다.</p>\n<p>이러한 방법을 적용했을 때의 단점은 일단 클라우드에 요금을 내야 한다는 것이다.\n또한, AWS Cognito에서 지원하지 않는 카카오 로그인 같은 경우 복잡한 과정이 필요하다.\n반면에 장점은 다음과 같다.</p>\n<ul>\n<li>SAML을 통한 보안 문제 해결.</li>\n<li>놀라운 확장성. (SOCIAL IDENTITY를 추가하기만 하면 끝, 모바일 앱까지 확장 가능)</li>\n<li>편리한 사용자 관리. (USER POOL 기능 제공)</li>\n<li>인증 및 디바이스간 동기화 처리. (Cognito Sync가 알아서 해준다)</li>\n<li>시스템 충돌과 네트워크 연결 문제. (Cognito Sync가 알아서 해준다)</li>\n<li>위와 같은 문제를 신경 안쓰므로 로직에 집중해서 빠른 개발이 가능하다.</li>\n</ul>\n<br>\n<h2 id=\"3-aws-serverless-architecture-baas--faas\" style=\"position:relative;\"><a href=\"#3-aws-serverless-architecture-baas--faas\" aria-label=\"3 aws serverless architecture baas  faas permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. AWS Serverless Architecture (BaaS + FaaS)</h2>\n<p><img src=\"https://drive.google.com/uc?export=view&#x26;id=1xSGvyAqUidnvjjbEfLxwZxwGBHrtVL1t\" alt=\"AWS WebApp Application Architecture\"></p>\n<p>AWS API Gateway와 Lambda를 통한 서버리스 아키텍쳐에 대해서는 아래 링크를 참고하자.\n서버리스 아키텍쳐는 서버를 관리할 필요 없이 특정 이벤트에 반응하는 함수를 등록하고, 해당 이벤트가 발생하면 함수가 실행되는 구조이다.\n장점은 다음과 같다.</p>\n<ul>\n<li>서버에 고성능이 필요할 시에는 비용이 절감된다.</li>\n<li>서비스 지향적인 설계가 가능하다. (마이크로 아키텍쳐)</li>\n<li>자동 스케일링</li>\n<li>코드 생산에 집중할 수 있고, 유연한 배포 및 테스트가 가능하다.</li>\n</ul>\n<p>반면에 단점은 다음과 같다.</p>\n<ul>\n<li>AWS 과금이 많이 나올 수 있다. (쓸데없이 많이 고려한 설계일수도)</li>\n<li>API Gateway, Lambda에 대한 러닝 커브가 상당하다. (많은 스터디 필요)</li>\n</ul>\n<br>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>최근에 유행하는 서버리스 아키텍쳐나 마이크로 아키텍쳐를 무조건 도입해야하는 것은 절대 아니다.\n각자 프로젝트의 상황에 맞는 방법을 선택하는게 답인듯하다.</p>\n<br>\n<h2 id=\"참고하면-좋은-문서들\" style=\"position:relative;\"><a href=\"#%EC%B0%B8%EA%B3%A0%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%80-%EB%AC%B8%EC%84%9C%EB%93%A4\" aria-label=\"참고하면 좋은 문서들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>참고하면 좋은 문서들</h2>\n<ul>\n<li><a href=\"https://aws.amazon.com/ko/cognito/?nc2=h_m1\">AWS Cognito</a></li>\n<li><a href=\"https://aws.amazon.com/ko/blogs/korea/category/amazon-cognito/\">AWS Cognito Blog</a></li>\n<li><a href=\"http://blog.aliencube.org/ko/2016/06/23/serverless-architectures/\">Serverless-Architecture</a></li>\n<li><a href=\"http://www.popit.kr/why-microservice/\">Popit - 마이크로서비스 아키텍쳐의 장단점</a></li>\n<li><a href=\"http://bcho.tistory.com/942\">OAuth 2.0 Architecture</a></li>\n</ul>","excerpt":"최근에 대부분의 웹, 모바일 어플리케이션에서 카카오, 네이버 등 다양한 소셜 로그인 기능을 제공하고 있다.\n만약 우리가 만들어야 할 어플리케이션이 다양한 소셜 로그인 API와 연동하여 사용자를 관리해야한다면, OAuth 인증, 보안 등 개발할 때 고려해야할 요소가 많을 것이다. 따라서, 이 글을 통해 최근 유행하는 클라우드 기반 웹 어플리케이션 설계 방식을 아주 간단히 보고 적합한 설계 방식을 선택하는데 도움이 되었으면 좋겠다. OAuth2.0에 대해서는 이전에 쓴 글을 참조하길 바란다. http://swalloow.github.io/about-oauth2/…"}}}},"pageContext":{"slug":"social-api-cognito","basePath":"","prev":{"slug":"macbook-touchbar-customizing","publishDate":"2017-01-30"},"next":{"slug":"jupyter-notebook-kernel","publishDate":"2017-01-28"}}}}